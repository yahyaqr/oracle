{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Me","text":"<p>An aspiring and passionate engineering manager, I am dedicated to building engaging and user-friendly digital solutions using the latest technologies and best practices. \ud83d\udcbb</p> <p>My goal is to continuously learn, grow, and make a positive impact through my work. I am excited to connect and collaborate with other like-minded professionals in the field.</p> <p>How to reach me: Website | Instagram | Medium| LinkedIn</p>"},{"location":"Book/Ego_is_The_Enemy/","title":"Ego is The Enemy","text":"<p>Ego Is The Enemy reveals how a tendency that\u2019s hardwired into our brains \u2013 the belief the world revolves around us and us alone \u2013 holds us back from living the life it makes us desire so much, what we can do to overcome it at every turn and how to achieve true greatness.</p>"},{"location":"Book/Ego_is_The_Enemy/#plus-minus-and-equal","title":"Plus, Minus, and Equal","text":"<p>Each fighter, to become great... needs to have someone better they can learn from, someone lesser they can teach, and someone equal they can challenge themselves against. --- Frank Shamrock.</p>"},{"location":"Book/Ego_is_The_Enemy/#forever-a-student","title":"Forever a Student","text":"<p>It is impossible for a man to learn that, which\u00a0he thinks he already knows.\u201d --- Epictetus</p> <p>You aren\u2019t as good as you think you are, you probably need your attitude readjusted, and the things you learned in books or school are out of date or wrong.</p> <p>As our island of knowledge grows, so does the shore of our ignorance. --- John Wheler</p> <p>A student is self-critical and self-motivated, always trying to improve his understanding so that he can move onto the next topic, the next challenge.  --- page 41.</p>"},{"location":"Book/Ego_is_The_Enemy/#live-with-purpose-not-passion","title":"Live with Purpose Not Passion","text":"<p>Why do I do what I do? Who am I? What purpose am I serving?</p> <p>The critical work that you want to do will require your deliberation and consideration. Leave passion for the amateurs. Make it about what you feel you must do and say, not what you care about and wish to be.</p> <p>The Greeks used the word\u00a0Euthymia\u00a0for this which is a sense of our own path and how we can stay on it without getting distracted. Prioritize your goals with clarity and then follow through.</p> <p>Bill Walsh, 49ers Coach, did not focus on some vague notion of \u201cwinning.\u201d He knew that focusing on the basics and perfecting those would lead to success. He could change what the team was doing and how effectively they were working, but he could not put on a definitive timeline when the next win would happen. He was attached to effort (the part that could be controlled) not outcomes (which were out of his control).  </p> <p>Alive time is time when you are actively using your time usefully and improving; dead time is\u00a0time you spend passive.</p> <p>It\u2019s about being what you are, and being as good as possible at it, without succumbing to all the things that draw you away from it. --- page 117</p>"},{"location":"Book/Ego_is_The_Enemy/#do-your-best-forget-the-rest","title":"Do your Best, Forget the Rest","text":"<p>We have only minimal control over the rewards for our work and effort\u2013other people\u2019s validation, recognition, rewards. So what are we going to do? Not be kind, not work hard, not produce, because there is a chance it wouldn\u2019t be reciprocated? C\u2019mon. --- page 178</p>"},{"location":"Book/Ego_is_The_Enemy/#always-love","title":"Always Love","text":"<p>Hate at any point is a cancer that gnaws away at the very vital center of your life and your existence. It is like eroding acid that eats away the best and the objective center of your life.  --- page 204</p>"},{"location":"Book/The_Compound_Effect/","title":"The Compound Effect","text":"<p>The Compound Effect is the strategy of reaping huge rewards from small, seemingly insignificant actions. You cannot improve something until you measure it. Always take 100 percent responsibility for everything that happens to you.</p>"},{"location":"Book/The_Compound_Effect/#choice-awareness","title":"Choice Awareness","text":"<p>In essence, you make your choices, and then your choices make you. Every decision, no matter how slight, alters the trajectory of your life.</p> <p>The first step toward change is awareness. If you want to get from where you are to where you want to be, you have to start by becoming aware of the choices that lead you away from your desired destination.</p> <p>The choices that lead to life-altering change are, on the surface, disarmingly small. The good ones are easy to overlook and the bad ones are easy to forgive. What\u2019s more, cause and effect are so distant that they\u2019re hard to connect.</p> <p>At the end of the day, look at the list and ask yourself: Are these choices consistent with my core values? Are they in alignment with who I want to become?</p> <p>Cross out any choice that didn\u2019t move you closer to where you ultimately want to be. Over time, you\u2019ll gain awareness of your moment-to-moment choices and consistently make choices that move you towards your ultimate goal.</p>"},{"location":"Book/The_Compound_Effect/#why-power","title":"Why Power","text":"<p>Most of use wouldn't walk a plank between two high rise buildings for $20 dollars. But Darren says: \"If your child was on the opposite building, and that building was on fire, would you walk the length of the plank to save him? Without question and immediately\u2014you\u2019d do it, twenty dollars or not.\"</p> <p>Your \u2018WHY Power\u2019 is the internal drive you need to get started and take massive action. Your WHY can take two forms: what you love and what you hate. Your why doesn't have to be noble, it just has to move you.</p>"},{"location":"Book/The_Compound_Effect/#bookend-routines","title":"Bookend Routines","text":"<p>The key to becoming world-class in your endeavors is to build your performance around world-class routines.</p> <p>It can be difficult, even futile, to predict or control what will show up in the middle of your workday. But you can almost always control how your day starts and ends. You need to have routines for both.</p> <p>Morning Routine: Review your vision/mission, set the top priority for the day, read something positive and instructional, and do work to advance your most important project.</p> <p>Nighttime Routine: Reflect on the choices you\u2019ve made throughout the day, be grateful for the wins you experienced, and get curious about how you can improve tomorrow by asking yourself: How could I have made today even better? </p>"},{"location":"Book/The_Compound_Effect/#new-life-goal-new-daily-habit","title":"New Life Goal, New Daily Habit","text":"<p>The moment you come up with a new life goal, instantly turn it into a tiny, daily habit you can practice.</p> <p>For example, if you want to eat healthy, switch your after-lunch-Snickers for an apple. If you want to become a writer, start writing 250 words a day. And if you finally want to meet someone to fall in love with, send a message to one person every day.</p>"},{"location":"Book/The_Compound_Effect/#create-routine-build-up-momentum","title":"Create Routine, Build Up Momentum","text":"<p>The more good habits you accumulate, the more good decisions you\u2019ll make, until it becomes really easy to choose what\u2019s right. Chances are, you\u2019ll feel unstoppable at some point, because you\u2019ve got the Big Mo (big momentum) on your side.</p> <p>Because of the way momentum works, the hardest part is to get it going in the first place. That\u2019s why initially, you should focus on creating a routine you can consistently show up for \u2013 even if you\u2019re not making it all the way through.</p> <p>Keep showing up until your habit clicks into a routine.</p>"},{"location":"Code/Basic%20Cheatsheet/","title":"Basic Cheatsheet","text":""},{"location":"Code/Basic%20Cheatsheet/#how-to-es6","title":"How to ES6","text":""},{"location":"Code/Basic%20Cheatsheet/#built-ins","title":"Built-ins","text":"<pre><code>// Array\nlet numbers = [1, 2, 3, 4, 5];\n\n// Array methods\nlet squaredNumbers = numbers.map(num =&gt; num ** 2);\nlet evenNumbers = numbers.filter(num =&gt; num % 2 === 0);\nlet sum = numbers.reduce((acc, curr) =&gt; acc + curr, 0);\nlet firstEvenNumber = numbers.find(num =&gt; num % 2 === 0);\nnumbers.forEach(num =&gt; console.log(num));\n\n// String\nlet str = \"   Hello, World!   \";\n\n// String methods\nconsole.log(str.startsWith(\"Hello\")); // true\nconsole.log(str.endsWith(\"World!\")); // true\nconsole.log(str.includes(\"World\")); // true\nconsole.log(str.trim()); // \"Hello, World!\"\nconsole.log(str.padStart(20, \"x\")); // \"xxxxxHello, World!\"\nconsole.log(str.padEnd(20, \"x\")); // \"Hello, World!xxxxx\"\n\n// Object\nlet obj = { name: \"John\", age: 30, city: \"New York\" };\n\n// Object methods\nconsole.log(Object.keys(obj)); // [\"name\", \"age\", \"city\"]\nconsole.log(Object.values(obj)); // [\"John\", 30, \"New York\"]\nconsole.log(Object.entries(obj)); // [[\"name\", \"John\"], [\"age\", 30], [\"city\", \"New York\"]]\n\n// Promise\nlet promise1 = new Promise((resolve) =&gt; setTimeout(resolve, 1000, 'Promise 1 resolved'));\nlet promise2 = new Promise((resolve) =&gt; setTimeout(resolve, 500, 'Promise 2 resolved'));\n\n// Promise methods\nPromise.all([promise1, promise2])\n    .then(values =&gt; console.log(values)); // [\"Promise 1 resolved\", \"Promise 2 resolved\"]\n\nPromise.race([promise1, promise2])\n    .then(value =&gt; console.log(value)); // \"Promise 2 resolved\"\n\n// Miscellaneous\nlet targetObj = { a: 1 };\nlet sourceObj = { b: 2, c: 3 };\nObject.assign(targetObj, sourceObj);\nconsole.log(targetObj); // { a: 1, b: 2, c: 3 }\n\nlet arrayLikeObject = { 0: 'a', 1: 'b', 2: 'c', length: 3 };\nlet newArray = Array.from(arrayLikeObject);\nconsole.log(newArray); // ['a', 'b', 'c']\n\nconsole.log(Array.isArray(numbers)); // true\n\nconsole.log(Math.trunc(4.7)); // 4\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#arrow-functions","title":"Arrow Functions","text":"<pre><code>// Traditional function\nfunction add(a, b) {\n    return a + b;\n}\n\n// Arrow function\nconst add = (a, b) =&gt; a + b;\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#template-literals","title":"Template Literals","text":"<pre><code>let name = \"Alice\";\nlet greeting = `Hello, ${name}!`;\nconsole.log(greeting); // Hello, Alice!\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#destructuring","title":"Destructuring","text":"<pre><code>// Object destructuring\nlet person = { name: \"John\", age: 30 };\nlet { name, age } = person;\nconsole.log(name, age); // John 30\n\n// Array destructuring\nlet numbers = [1, 2, 3];\nlet [x, y, z] = numbers;\nconsole.log(x, y, z); // 1 2 3\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#spread-operator","title":"Spread Operator","text":"<pre><code>let arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#classes","title":"Classes","text":"<pre><code>class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(`${this.name} makes a sound.`);\n    }\n}\n\nlet dog = new Animal('Dog');\ndog.speak(); // Dog makes a sound.\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#modules","title":"Modules","text":"<pre><code>// Module export\nexport function add(a, b) {\n    return a + b;\n}\n\n// Module import\nimport { add } from './math';\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#how-to-install","title":"How to install","text":""},{"location":"Code/Basic%20Cheatsheet/#cra-with-typescript","title":"CRA with TypeScript","text":"<pre><code>npx create-react-app my-app --template typescript\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#add-typescript-in-an-existing-cra","title":"Add TypeScript in an existing CRA","text":"<pre><code>npm init -y\nnpm install --save typescript @types/node @types/react @types/react-dom @types/jest\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#express-typescript","title":"Express-TypeScript","text":"<pre><code>npm init -y\nnpm install express @types/express\nnpm install typescript @types/node\nnpm install jsonwebtoken\nnpm install body-parser\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#how-to-react-typescript","title":"How to React-TypeScript","text":""},{"location":"Code/Basic%20Cheatsheet/#basic","title":"Basic","text":"<pre><code>import React from 'react';\n\ninterface MyComponentProps {\n  name: string;\n  age: number;\n}\n\nconst MyComponent: React.FC&lt;MyComponentProps&gt; = ({ name, age }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{name}&lt;/h1&gt;\n      &lt;p&gt;{age}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#todo","title":"ToDo","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\ninterface Todo {\n\u00a0 id: number;\n\u00a0 title: string;\n\u00a0 completed: boolean;\n}\n\nconst App: React.FC = () =&gt; {\n\u00a0 const [todos, setTodos] = useState&lt;Todo[]&gt;([]);\n\n\u00a0 useEffect(() =&gt; {\n\u00a0 \u00a0 fetchTodos();\n\u00a0 }, []);\n\n\u00a0 const fetchTodos = async () =&gt; {\n\u00a0 \u00a0 try {\n\u00a0 \u00a0 \u00a0 const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n\u00a0 \u00a0 \u00a0 if (!response.ok) {\n\u00a0 \u00a0 \u00a0 \u00a0 throw new Error('Failed to fetch todos');\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 const data = await response.json();\n\u00a0 \u00a0 \u00a0 setTodos(data);\n\u00a0 \u00a0 } catch (error) {\n\u00a0 \u00a0 \u00a0 console.error(error);\n\u00a0 \u00a0 }\n\u00a0 };\n\n\u00a0 const handleToggleTodo = (id: number) =&gt; {\n\u00a0 \u00a0 setTodos(prevTodos =&gt;\n\u00a0 \u00a0 \u00a0 prevTodos.map(todo =&gt;\n\u00a0 \u00a0 \u00a0 \u00a0 todo.id === id ? { ...todo, completed: !todo.completed } : todo\n\u00a0 \u00a0 \u00a0 )\n\u00a0 \u00a0 );\n\u00a0 };\n\n\u00a0 return (\n\u00a0 \u00a0 &lt;div&gt;\n\u00a0 \u00a0 \u00a0 &lt;h1&gt;Todos&lt;/h1&gt;\n\u00a0 \u00a0 \u00a0 &lt;ul&gt;\n\u00a0 \u00a0 \u00a0 \u00a0 {todos.map(todo =&gt; (\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &lt;li\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key={todo.id}\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 style={{ textDecoration: todo.completed ? 'line-through' : 'none', cursor: 'pointer' }}\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 onClick={() =&gt; handleToggleTodo(todo.id)}\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &gt;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {todo.title}\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &lt;/li&gt;\n\u00a0 \u00a0 \u00a0 \u00a0 ))}\n\u00a0 \u00a0 \u00a0 &lt;/ul&gt;\n\u00a0 \u00a0 &lt;/div&gt;\n\u00a0 );\n};\n\nexport default App;\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#how-to-express-typescript","title":"How to Express-TypeScript","text":""},{"location":"Code/Basic%20Cheatsheet/#basic_1","title":"Basic","text":"<pre><code>import express, { Request, Response } from 'express';\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.get('/api/hello', (req: Request, res: Response) =&gt; {\n  res.json({ message: 'Hello, World!' });\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#auth","title":"Auth","text":"<pre><code>import express, { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport bodyParser from 'body-parser';\n\ninterface User {\n  id: number;\n  username: string;\n  password: string;\n}\n\nconst users: User[] = [\n  { id: 1, username: 'user1', password: 'password1' },\n  { id: 2, username: 'user2', password: 'password2' }\n];\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.post('/login', (req: Request, res: Response) =&gt; {\n  const { username, password } = req.body as { username: string; password: string };\n\nconst user = users.find(u =&gt; u.username === username &amp;&amp; u.password === password);\n  if (user) {\n    const token = jwt.sign({ userId: user.id }, 'secret_key', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).json({ message: 'Invalid credentials' });\n  }\n});\n\nconst authenticateToken = (req: Request, res: Response, next: NextFunction) =&gt; {\n  const token = req.headers['authorization'] as string;\n  if (!token) return res.status(401).json({ message: 'Token required' });\n\n  jwt.verify(token, 'secret_key', (err, decoded) =&gt; {\n    if (err) return res.status(403).json({ message: 'Invalid token' });\n    req.userId = (decoded as { userId: number }).userId;\n    next();\n  });\n};\n\napp.get('/protected', authenticateToken, (req: Request, res: Response) =&gt; {\n  res.json({ message: 'Access granted' });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () =&gt; console.log(`Server running on port ${PORT}`));\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#how-to-fetch","title":"How to Fetch","text":""},{"location":"Code/Basic%20Cheatsheet/#http-module","title":"HTTP Module","text":"<pre><code>const http = require('http');\n\nhttp.get('http://api.example.com/data', (res) =&gt; {\n    let data = '';\n\n    res.on('data', (chunk) =&gt; {\n        data += chunk;\n    });\n\n    res.on('end', () =&gt; {\n        console.log(JSON.parse(data));\n    });\n}).on('error', (err) =&gt; {\n    console.error('Error: ', err);\n});\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#fetch-api","title":"Fetch API","text":"<pre><code>fetch('http://api.example.com/data')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error: ', error));\n</code></pre>"},{"location":"Code/Basic%20Cheatsheet/#axios","title":"Axios","text":"<pre><code>npm install axios\n</code></pre> <pre><code>const axios = require('axios');\n\naxios.get('http://api.example.com/data')\n    .then(response =&gt; {\n        console.log(response.data);\n    })\n    .catch(error =&gt; {\n        console.error('Error: ', error);\n    });\n</code></pre>"},{"location":"Code/How_to_Docker/","title":"How to Docker","text":""},{"location":"Code/How_to_Docker/#what-is-a-container","title":"What is a container?","text":"<p>A container is an isolated environment for your code. This means that a container has no knowledge of your operating system, or your files. It runs on the environment provided to you by Docker Desktop. Containers have everything that your code needs in order to run, down to a base operating system. You can use Docker Desktop to manage and explore your containers.</p> <p>In this walkthrough, you'll view and explore an actual container in Docker Desktop.</p>"},{"location":"Code/How_to_Docker/#1-set-up-the-walkthrough","title":"1. Set up the walkthrough","text":"<p>The first thing you need is a running container. Use the following instructions to run a container.</p> <ol> <li>Open Docker Desktop and select the search.</li> <li>Specify\u00a0<code>docker/welcome-to-docker</code>\u00a0in the search and then select\u00a0Run.</li> <li>Expand the\u00a0Optional settings.</li> <li>In\u00a0Container name, specify\u00a0<code>welcome-to-docker</code>.</li> <li> <p>In\u00a0Host port, specify\u00a0<code>8088</code>.</p> <p></p> </li> <li> <p>Select\u00a0Run.</p> </li> </ol>"},{"location":"Code/How_to_Docker/#2-view-containers-on-docker-desktop","title":"2. View containers on Docker Desktop","text":"<p>You just ran a container! You can view it in the\u00a0Containers\u00a0tab of Docker Desktop. This container runs a simple web server that displays a simple website. When working with more complex projects, you'll run different parts in different containers. For example, a different container for the frontend, backend, and database. In this walkthrough, you only have a simple frontend container.</p>"},{"location":"Code/How_to_Docker/#3-view-the-frontend","title":"3. View the frontend","text":"<p>The frontend is accessible on port 8088 of your local host. Select the link in the\u00a0Port(s)\u00a0column of your container, or visit\u00a0http://localhost:8088\u00a0in your browser to view it.</p> <p></p>"},{"location":"Code/How_to_Docker/#4-explore-your-container","title":"4. Explore your container","text":"<p>Docker Desktop lets you easily view and interact with different aspects of your container. Try it out yourself. Select your container and then select\u00a0Files\u00a0to explore your container's isolated file system.</p> <p></p>"},{"location":"Code/How_to_Docker/#5-stop-your-container","title":"5. Stop your container","text":"<p>The\u00a0<code>welcome-to-docker</code>\u00a0container continues to run until you stop it. To stop the container in Docker Desktop, go to the\u00a0Containers\u00a0tab and select the\u00a0Stop\u00a0icon in the\u00a0Actions\u00a0column of your container.</p> <p></p>"},{"location":"Code/How_to_Docker/#summary","title":"Summary","text":"<p>In this walkthrough, you ran a pre-made image and explored a container. In addition to running pre-made images, you can build and run your own application as container.</p>"},{"location":"Code/How_to_Docker/#how-do-i-run-a-container","title":"How do I run a container?","text":"<p>In this walkthrough, you'll learn the basic steps of building an image and running your own container. This walkthrough uses a sample Node.js application, but it's not necessary to know Node.js.</p> <p></p>"},{"location":"Code/How_to_Docker/#1-get-the-sample-application","title":"1. Get the sample application","text":"<p>If you have git, you can clone the repository for the sample application. Otherwise, you can download the sample application. Choose one of the following options.</p> <p>Use the following command in a terminal to clone the sample application repository.</p> <pre><code>$ git clone https://github.com/docker/welcome-to-docker\n</code></pre>"},{"location":"Code/How_to_Docker/#2-view-the-dockerfile-in-your-project-folder","title":"2. View the Dockerfile in your project folder","text":"<p>To run your code in a container, the most fundamental thing you need is a Dockerfile. A Dockerfile describes what goes into a container. This sample already contains a\u00a0<code>Dockerfile</code>. For your own projects, you'll need to create your own\u00a0<code>Dockerfile</code>. You can open the\u00a0<code>Dockerfile</code>\u00a0in a code or text editor and explore its contents.</p>"},{"location":"Code/How_to_Docker/#3-build-your-first-image","title":"3. Build your first image","text":"<p>You always need an image to run a container. In a terminal, run the following commands to build the image. Replace\u00a0<code>/path/to/welcome-to-docker/</code>\u00a0with the path to your\u00a0<code>welcome-to-docker</code>\u00a0directory.</p> <pre><code>$ cd /path/to/welcome-to-docker/\n</code></pre> <pre><code>$ docker build -t welcome-to-docker .\n</code></pre> <p>In the previous command, the\u00a0<code>-t</code>\u00a0flag tags your image with a name,\u00a0<code>welcome-to-docker</code>\u00a0in this case. And the\u00a0<code>.</code>\u00a0lets Docker know where it can find the Dockerfile.</p> <p>Building the image may take some time. After your image is built, you can view your image in the\u00a0Images\u00a0tab in Docker Desktop.</p>"},{"location":"Code/How_to_Docker/#4-run-your-container","title":"4. Run your container","text":"<p>To run your image as a container:</p> <ol> <li>In Docker Desktop, go to the\u00a0Images\u00a0tab.</li> <li>Next to your image, select\u00a0Run.</li> <li>Expand the\u00a0Optional settings.</li> <li> <p>In\u00a0Host port, specify\u00a0<code>8089</code>.</p> <p></p> </li> <li> <p>Select\u00a0Run.</p> </li> </ol>"},{"location":"Code/How_to_Docker/#5-view-the-frontend","title":"5. View the frontend","text":"<p>You can use Docker Desktop to access your running container. Select the link next to your container in Docker Desktop or go to\u00a0http://localhost:8089\u00a0to view the frontend.</p> <p></p>"},{"location":"Code/How_to_Docker/#summary_1","title":"Summary","text":"<p>In this walkthrough, you built your own image and ran it as a container. In addition to building and running your own images, you can run images from Docker Hub.</p>"},{"location":"Code/How_to_Docker/#run-docker-hub-images","title":"Run Docker Hub images","text":"<p>You can share and store images in Docker Hub (http://hub.docker.com). Docker Hub has over 100,000 images created by developers that you can run locally. You can search for Docker Hub images and run them directly from Docker Desktop.</p>"},{"location":"Code/How_to_Docker/#1-search-for-the-image","title":"1. Search for the image","text":"<p>You can search for Docker Hub images on Docker Desktop. To search for the image used in this walkthrough:</p> <ol> <li>Open Docker Desktop and select the search.</li> <li>Specify\u00a0<code>docker/welcome-to-docker</code>\u00a0in the search.</li> </ol> <p></p>"},{"location":"Code/How_to_Docker/#2-run-the-image","title":"2. Run the image","text":"<p>To run the\u00a0<code>docker/welcome-to-docker</code>\u00a0image:</p> <ol> <li>After finding the image using search, select\u00a0Run.</li> <li>Expand the\u00a0Optional settings.</li> <li> <p>In\u00a0Host port, specify\u00a0<code>8090</code>.</p> <p></p> </li> <li> <p>Select\u00a0Run.</p> </li> </ol> <p>Note</p> <p>Many images hosted on Docker Hub have a description that highlights what settings must be set in order to run them. You can read the description for the image on Docker Hub by selecting the image name in the search or by searching for the image directly on\u00a0https://hub.docker.com.</p>"},{"location":"Code/How_to_Docker/#3-explore-the-container","title":"3. Explore the container","text":"<p>That's it! The container is ready to use. Go to the\u00a0Containers\u00a0tab in Docker Desktop to view the container.</p> <p></p>"},{"location":"Code/How_to_Docker/#summary_2","title":"Summary","text":"<p>In this walkthrough, you searched for an image on Docker Hub and ran it as a container. Docker Hub has over 100,000 more images that you can use to help build your own application.</p>"},{"location":"Code/How_to_Docker/#run-multi-container-applications","title":"Run multi-container applications","text":"<p>If you've already completed the\u00a0#How do I run a container?\u00a0walkthrough, you learned that you must start each container individually. Imagine how great it would be if a tool could start multiple containers with a single command. That tool is Docker Compose.</p>"},{"location":"Code/How_to_Docker/#1-get-the-sample-application_1","title":"1. Get the sample application","text":"<p>If you have git, you can clone the repository for the sample application. Otherwise, you can download the sample application. Choose one of the following options.</p> <p>Use the following command in a terminal to clone the sample application repository.</p> <pre><code>$ git clone https://github.com/docker/multi-container-app\n</code></pre> <p>The sample application is a simple todo application built using ExpressJS and Node.js. The application saves all todos in a MongoDB database. You don't need to know any of these technologies to continue with the walkthrough.</p> <p></p>"},{"location":"Code/How_to_Docker/#2-dig-into-the-compose-file","title":"2. Dig into the Compose file","text":"<p>View the files of the sample application. Notice that it has a\u00a0<code>compose.yaml</code>\u00a0file. This file tells Docker how to run your application. Open the\u00a0<code>compose.yaml</code>\u00a0file in a code or text editor to view what it contains.</p>"},{"location":"Code/How_to_Docker/#3-run-the-application","title":"3. Run the application","text":"<p>To run the multi-container application, open a terminal and run the following commands. Replace\u00a0<code>/path/to/multi-container-app/</code>\u00a0with the path to your application's directory.</p> <pre><code>$ cd /path/to/multi-container-app/\n</code></pre> <pre><code>$ docker compose up -d\n</code></pre> <p>In the previous command, the\u00a0<code>-d</code>\u00a0flag tells Docker Compose to run in detached mode.</p>"},{"location":"Code/How_to_Docker/#4-view-the-frontend-and-add-todos","title":"4. View the frontend and add todos","text":"<p>In the\u00a0Containers\u00a0tab of Docker Desktop, you should now have an application stack with two containers running (the todo-app, and todo-database).</p> <p>To view the frontend:</p> <ol> <li>In Docker Desktop, expand the application stack in\u00a0Containers.</li> <li>Select the link to port\u00a03000\u00a0in the\u00a0Port(s)\u00a0column or open\u00a0http://localhost:3000\u2060.</li> </ol> <p>Add some todo tasks in the frontend, and then open\u00a0http://localhost:3000\u00a0in a new browser tab. Notice that the tasks are still visible.</p>"},{"location":"Code/How_to_Docker/#5-develop-in-your-containers","title":"5. Develop in your containers","text":"<p>When developing with Docker, you may need to automatically update and preview your running services as you edit and save your code. You can use Docker Compose Watch for this.</p> <p>To run Compose Watch and see the real-time changes:</p> <ol> <li> <p>Open a terminal and run the following commands. Replace\u00a0<code>/path/to/multi-container-app/</code>\u00a0with the path to your application's directory.</p> <pre><code>$ cd /path/to/multi-container-app/\n</code></pre> <pre><code>$ docker compose watch\n</code></pre> </li> <li> <p>Open\u00a0<code>app/views/todos.ejs</code>\u00a0in a text or code editor, then change the text on line 21.</p> </li> <li>Save the changes in\u00a0<code>app/views/todos.ejs</code>.</li> <li>View your application at\u00a0http://localhost:3000\u00a0to see the changes in real-time.</li> </ol>"},{"location":"Code/How_to_Docker/#6-delete-everything-and-start-over","title":"6. Delete everything and start over","text":"<p>Having your configuration stored in a Compose file has another advantage, you can easily delete everything and start over.</p> <p>To delete the application stack:</p> <ol> <li>Open the\u00a0Containers\u00a0tab of Docker Desktop</li> <li>Select the Delete icon next to your application stack.</li> </ol> <p></p> <p>After you delete the application stack, follow the steps from #Run Docker Hub images\u00a0to run the application again. Note that when you delete the containers and run them again, any todos that you created don't persist.</p>"},{"location":"Code/How_to_Docker/#summary_3","title":"Summary","text":"<p>In this walkthrough, you ran a multi-container application with Docker Compose. You also learned how to develop in containers and how to delete the application stack along with all of the data.</p>"},{"location":"Code/How_to_Docker/#persist-container-data","title":"Persist container data","text":"<p>This walkthrough shows you how to persist data between containers. To better understand some concepts in this walkthrough, complete the\u00a0#Run multi-container applications\u00a0walkthrough first.</p> <p>Docker isolates all content, code, and data in a container from your local filesystem. When you delete a container, Docker deletes all the content within that container.</p> <p></p> <p>Sometimes, you may want to persist the data that a container generates. To do this, you can use volumes.</p>"},{"location":"Code/How_to_Docker/#1-get-the-sample-application_2","title":"1. Get the sample application","text":"<p>If you have git, you can clone the repository for the sample application. Otherwise, you can download the sample application. Choose one of the following options.</p> <p>Use the following command in a terminal to clone the sample application repository.</p> <pre><code>$ git clone https://github.com/docker/multi-container-app\n</code></pre>"},{"location":"Code/How_to_Docker/#2-add-a-volume-to-persist-data","title":"2. Add a volume to persist data","text":"<p>To persist data after you delete a container, use a volume. A volume is a location in your local filesystem, automatically managed by Docker Desktop.</p> <p></p> <p>To add a volume to this project, open the\u00a0<code>compose.yaml</code>\u00a0file in a code or text editor, and then uncomment the following lines.</p> <pre><code>todo-database:\n    # ...\n    volumes:\n      - database:/data/db\n\n# ...\nvolumes:\n  database:\n</code></pre> <p>The\u00a0<code>volumes</code>\u00a0element that is nested under\u00a0<code>todo-database</code>\u00a0tells Compose to mount the volume named\u00a0<code>database</code>\u00a0to\u00a0<code>/data/db</code>\u00a0in the container for the todo-database service.</p> <p>The top-level\u00a0<code>volumes</code>\u00a0element defines and configures a volume named\u00a0<code>database</code>\u00a0that can be used by any of the services in the Compose file.</p>"},{"location":"Code/How_to_Docker/#3-run-the-application_1","title":"3. Run the application","text":"<p>To run the multi-container application, open a terminal and run the following commands. Replace\u00a0<code>/path/to/multi-container-app/</code>\u00a0with the path to your application's directory.</p> <pre><code>$ cd /path/to/multi-container-app/\n</code></pre> <pre><code>$ docker compose up -d\n</code></pre>"},{"location":"Code/How_to_Docker/#4-view-the-frontend-and-add-todos_1","title":"4. View the frontend and add todos","text":"<p>In the\u00a0Containers\u00a0tab of Docker Desktop, you should now have an application stack with two containers running (the todo-app, and todo-database).</p> <p>To view the frontend and add todos:</p> <ol> <li>In Docker Desktop, expand the application stack in\u00a0Containers.</li> <li>Select the link to port\u00a03000\u00a0in the\u00a0Port(s)\u00a0column or open\u00a0http://localhost:3000\u2060.</li> <li>Add some todo tasks in the frontend.</li> </ol>"},{"location":"Code/How_to_Docker/#5-delete-the-application-stack-and-run-new-containers","title":"5. Delete the application stack and run new containers","text":"<p>Now, no matter how often you delete and recreate the containers, Docker Desktop persists your data and it's accessible to any container on your system by mounting the\u00a0<code>database</code>\u00a0volume. Docker Desktop looks for the\u00a0<code>database</code>\u00a0volume and creates it if it doesn't exist.</p> <p>To delete the application stack:</p> <ol> <li>Open the\u00a0Containers\u00a0tab of Docker Desktop</li> <li>Select the Delete icon next to your application stack.</li> </ol> <p></p> <p>After you delete the application stack, follow the steps from\u00a0#Run Docker Hub images\u00a0to run the application again. Note that when you delete the containers and run them again, Docker Desktop persists any todos that you created.</p>"},{"location":"Code/How_to_Docker/#summary_4","title":"Summary","text":"<p>In this walkthrough, you persisted data between containers using a volume. You can use this to persist and share data among isolated and ephemeral containers.</p>"},{"location":"Code/How_to_Docker/#access-a-local-folder-from-a-container","title":"Access a local folder from a container","text":"<p>This walkthrough shows you how to access a local folder from a container. To better understand some concepts in this walkthrough, complete the\u00a0#Run multi-container applications\u00a0walkthrough first.</p> <p>Docker isolates all content, code, and data in a container from your local filesystem. By default, containers can't access directories in your local filesystem.</p> <p></p> <p>Sometimes, you may want to access a directory from your local filesystem. To do this, you can use bind mounts.</p>"},{"location":"Code/How_to_Docker/#1-get-the-sample-application_3","title":"1. Get the sample application","text":"<p>If you have git, you can clone the repository for the sample application. Otherwise, you can download the sample application. Choose one of the following options.</p> <p>Use the following command in a terminal to clone the sample application repository.</p> <pre><code>$ git clone https://github.com/docker/bindmount-apps\n</code></pre>"},{"location":"Code/How_to_Docker/#2-add-a-bind-mount-using-compose","title":"2. Add a bind mount using Compose","text":"<p>Add a bind mount to access data on your system from a container. A bind mount lets you share a directory from your host's filesystem into the container.</p> <p></p> <p>To add a bind mount to this project, open the\u00a0<code>compose.yaml</code>\u00a0file in a code or text editor, and then uncomment the following lines.</p> <pre><code>todo-app:\n    # ...\n    volumes:\n      - ./app:/usr/src/app\n      - /usr/src/app/node_modules\n</code></pre> <p>The\u00a0<code>volumes</code>\u00a0element tells Compose to mount the local folder\u00a0<code>./app</code>\u00a0to\u00a0<code>/usr/src/app</code>\u00a0in the container for the\u00a0<code>todo-app</code>\u00a0service. This particular bind mount overwrites the static contents of the\u00a0<code>/usr/src/app</code>\u00a0directory in the container and creates what is known as a development container. The second instruction,\u00a0<code>/usr/src/app/node_modules</code>, prevents the bind mount from overwriting the container's\u00a0<code>node_modules</code>\u00a0directory to preserve the packages installed in the container.</p>"},{"location":"Code/How_to_Docker/#3-run-the-application_2","title":"3. Run the application","text":"<p>In a terminal, run the following commands to bring up your application. Replace\u00a0<code>/path/to/bindmount-apps/</code>\u00a0with the path to your application's directory.</p> <pre><code>$ cd /path/to/bindmount-apps/\n</code></pre> <pre><code>$ docker compose up -d\n</code></pre>"},{"location":"Code/How_to_Docker/#4-develop-the-application","title":"4. Develop the application","text":"<p>Now, you can take advantage of the container\u2019s environment while you develop the application on your local system. Any changes you make to the application on your local system are reflected in the container. In your local directory, open\u00a0<code>app/views/todos.ejs</code>\u00a0in a code or text editor, update the\u00a0<code>Enter your task</code>\u00a0string, and save the file. Visit or refresh\u00a0localhost:3001\u2060 to view the changes.</p>"},{"location":"Code/How_to_Docker/#summary_5","title":"Summary","text":"<p>In this walkthrough, you added a bind mount to access a local folder from a container. You can use this to develop faster without having to rebuild your container when updating your code.</p>"},{"location":"Code/How_to_Docker/#containerize-your-application","title":"Containerize your application","text":"<p>When working with containers, you typically need to create a\u00a0<code>Dockerfile</code>\u00a0to define your image and a\u00a0<code>compose.yaml</code>\u00a0file to define how to run it.</p> <p>To help you create these files, Docker Desktop has the\u00a0<code>docker init</code>\u00a0command. Run this command in a terminal within your project folder.\u00a0<code>docker init</code>\u00a0creates all the required files to containerize your application. This walkthrough shows you how this works.</p>"},{"location":"Code/How_to_Docker/#1-run-the-command-to-create-docker-assets","title":"1. Run the command to create Docker assets","text":"<p>Choose one of your own applications that you would like to containerize, and in a terminal, run the following commands. Replace\u00a0<code>/path/to/your/project/</code>\u00a0with the directory containing your project.</p> <pre><code>$ cd /path/to/your/project/\n</code></pre> <pre><code>$ docker init\n</code></pre>"},{"location":"Code/How_to_Docker/#2-follow-the-on-screen-prompts","title":"2. Follow the on-screen prompts","text":"<p><code>docker init</code>\u00a0walks you through a few questions to configure your project with sensible defaults. Specify your answers and press\u00a0<code>Enter</code>.</p>"},{"location":"Code/How_to_Docker/#3-try-to-run-your-application","title":"3. Try to run your application","text":"<p>Once you have answered all the questions, run the following commands in a terminal to run your project. Replace\u00a0<code>/path/to/your/project/</code>\u00a0with the directory containing your project.</p> <pre><code>$ cd /path/to/your/project/\n</code></pre> <pre><code>$ docker compose up\n</code></pre>"},{"location":"Code/How_to_Docker/#4-update-the-docker-assets","title":"4. Update the Docker assets","text":"<p>The\u00a0<code>docker init</code>\u00a0command tries its best to do the heavy lifting for you, but sometimes there's some assembly required. In this case, you can refer to the\u00a0Dockerfile reference\u2060\u00a0and\u00a0Compose file reference\u2060 to learn how to update the files created by\u00a0<code>docker init</code>.</p>"},{"location":"Code/How_to_Docker/#summary_6","title":"Summary","text":"<p>In this walkthrough, you learned how to containerize your own application.</p>"},{"location":"Code/How_to_Docker/#publish-your-image","title":"Publish your image","text":"<p>Follow this walkthrough to learn how to publish and share your images on Docker Hub.</p>"},{"location":"Code/How_to_Docker/#1-get-the-example-image","title":"1. Get the example image","text":"<p>To get the example image:</p> <ol> <li>In Docker Desktop, select the search bar.</li> <li>In the search bar, specify\u00a0<code>docker/welcome-to-docker</code>.</li> <li>Select\u00a0Pull\u00a0to pull the image from Docker Hub to your computer.</li> </ol> <p></p>"},{"location":"Code/How_to_Docker/#2-sign-in-to-docker","title":"2. Sign in to Docker","text":"<p>Select\u00a0Sign in\u00a0on the top-right of Docker Desktop to either sign in or create a new Docker account.</p> <p></p>"},{"location":"Code/How_to_Docker/#3-rename-your-image","title":"3. Rename your image","text":"<p>Before you can publish your image, you need to rename it so that Docker Hub knows that the image is yours. In a terminal, run the following command to rename your image. Replace\u00a0<code>YOUR-USERNAME</code>\u00a0with your Docker ID.</p> <pre><code>$ docker tag docker/welcome-to-docker YOUR-USERNAME/welcome-to-docker\n</code></pre>"},{"location":"Code/How_to_Docker/#4-push-your-image-to-docker-hub","title":"4. Push your image to Docker Hub","text":"<p>To push your image to Docker Hub:</p> <ol> <li>In Docker Desktop, go to the\u00a0Images\u00a0tab</li> <li>In the\u00a0Actions\u00a0column for your image, select the\u00a0Show image actions\u00a0icon.</li> <li>Select\u00a0Push to Hub.</li> </ol> <p></p> <p>Go to\u00a0Docker Hub\u2060 and verify that the list of your repositories now contains\u00a0<code>YOUR-USERNAME/welcome-to-docker</code>.</p>"},{"location":"Code/How_to_Docker/#summary_7","title":"Summary","text":"<p>In this walkthrough, you pushed and shared an image on Docker Hub.</p>"},{"location":"Code/How_to_Git_Workflow/","title":"How to Git Workflow","text":"<p>A typical Git workflow for a team of software developers often involves several steps to ensure collaboration, code quality, and project stability. Here's a common workflow:</p>"},{"location":"Code/How_to_Git_Workflow/#pull-from-the-main-branch","title":"Pull from the main branch","text":"<p>Before starting work on a new feature or bug fix, pull the <code>main_branch</code> or latest updated branch to ensure you're working with the most up-to-date codebase.</p>"},{"location":"Code/How_to_Git_Workflow/#create-a-new-branch","title":"Create a new branch","text":"<p>Create a new branch (for example <code>feature_x</code>) for your feature or bug fix. This isolates your changes from the <code>main_branch</code> until they're ready to be merged.</p>"},{"location":"Code/How_to_Git_Workflow/#work-on-your-feature-or-bug-fix","title":"Work on your feature or bug fix","text":"<p>Make your changes on the <code>feature_x</code> branch, committing regularly as you progress. Each commit should represent a logical unit of work and include descriptive commit messages.</p>"},{"location":"Code/How_to_Git_Workflow/#push-your-branch","title":"Push your branch","text":"<p>Once you've completed your work and made your commits, push your <code>feature_x</code> branch to the remote repository to share your changes with your team.</p>"},{"location":"Code/How_to_Git_Workflow/#create-a-pull-request-pr","title":"Create a pull request (PR)","text":"<p>Open a pull request from your <code>feature_x</code> branch to the <code>main_branch</code>. In the pull request description, provide details about the changes you've made, any relevant context, and instructions for reviewing your code.</p>"},{"location":"Code/How_to_Git_Workflow/#code-review","title":"Code review","text":"<p>Your team members will review your code, provide feedback, and possibly request changes. Address any feedback and make any necessary updates to your code.</p>"},{"location":"Code/How_to_Git_Workflow/#merge-the-pull-request","title":"Merge the pull request","text":"<p>Once your code has been reviewed and approved, merge your <code>feature_x</code> branch into the <code>main_branch</code>. This integrates your changes into the main codebase.</p>"},{"location":"Code/How_to_Git_Workflow/#bug-fixing","title":"Bug fixing","text":"<ul> <li>If you encounter a bug in the <code>main_branch</code>, create a new branch (for example <code>bug_fix_y</code>) specifically for fixing that bug, branching off from the <code>main_branch</code>.</li> <li>Work on the bug fix in this <code>bug_fix_y</code> branch, following the same process of making commits and pushing changes.</li> <li>Once the bug fix is complete, open a pull request from the <code>bug_fix_y</code> branch to the <code>main_branch</code>.</li> <li>Follow the same code review process as for features.</li> <li>Merge the <code>bug_fix_y</code> into the <code>main_branch</code> once it's approved.</li> </ul>"},{"location":"Code/How_to_Git_Workflow/#pull-from-the-main-branch-again","title":"Pull from the main branch (again)","text":"<p>After merging your changes, pull the latest changes from the <code>main_branch</code> to ensure your local repository is up to date with any changes that have occurred since you started your work.</p>"},{"location":"Code/How_to_Git_Workflow/#repeat","title":"Repeat","text":"<p>Continue working on new features or bug fixes by starting the process again from step 2.</p>"},{"location":"Code/How_to_Python/","title":"How to Python","text":""},{"location":"Code/How_to_Python/#why","title":"Why","text":"<p>Python had the combination of the most standard libraries available as well as syntax that resembles pseudo code, therefore being the most expressive. This is optimizing for solved interview questions under pressure, when performance is considered then Go/C++ does consistently perform 1/10 the time of Python. In some rare cases, algorithms that time out in Python sometimes pass in C++/Go on Leetcode.</p>"},{"location":"Code/How_to_Python/#language-mechanics","title":"Language Mechanics","text":""},{"location":"Code/How_to_Python/#literals","title":"Literals","text":"<pre><code>255, 0b11111111, 0o377, 0xff ## Integers (decimal, binary, octal, hex)\n123.0, 1.23                  ## Float\n7 + 5j, 7j                   ## Complex\n'a', '\\141', '\\x61'          ## Character (literal, octal, hex)\n'\\n', '\\\\', '\\'', '\\\"'       ## Newline, backslash, single quote, double quote\n\"string\\n\"                   ## String of characters ending with newline\n\"hello\"+\"world\"              ## Concatenated strings\nTrue, False                  ## bool constants, 1 == True, 0 == False\n[1, 2, 3, 4, 5]              ## List\n['meh', 'foo', 5]            ## List\n(2, 4, 6, 8)                 ## Tuple, immutable\n{'name': 'a', 'age': 90}     ## Dict\n{'a', 'e', 'i', 'o', 'u'}    ## Set\nNone                         ## Null var\n</code></pre>"},{"location":"Code/How_to_Python/#loops","title":"Loops","text":"<p>Go through all elements</p> <pre><code>i = 0\nwhile i &lt; len(str):\n  i += 1\n</code></pre> <p>equivalent</p> <pre><code>for i in range(len(message)):\n  print(i)\n</code></pre> <p>Get largest number index from right</p> <pre><code>while i &gt; 0 and nums [i-1] &gt;= nums[i]:\n  i -= 1\n</code></pre> <p>Manually reversing</p> <pre><code>l, r = i, len(nums) - 1\nwhile l &lt; r:\n  nums[l], nums[r] = nums[r], nums[l]\n  l += 1\n  r -= 1\n</code></pre> <p>Go past the loop if we are clever with our boundry</p> <pre><code>for i in range(len(message) + 1):\n  if i == len(message) or message[i] == ' ':\n</code></pre> <p>Fun with Ranges - range(start, stop, step)</p> <pre><code>for a in range(0,3): ## 0,1,2\nfor a in reversed(range(0,3)) ## 2,1,0\nfor i in range(3,-1,-1) ## 3,2,1,0\nfor i in range(len(A)//2): ## A = [0,1,2,3,4,5]\n  print(i) ## 0,1,2\n  print(A[i]) ## 0,1,2\n  print(~i) ## -1,-2,-3\n  print(A[~i]) ## 5,4,3\n</code></pre>"},{"location":"Code/How_to_Python/#strings","title":"Strings","text":"<pre><code>str1.find('x')          ## find first location of char x and return index\nstr1.rfind('x')         ## find first int location of char x from reverse\n</code></pre> <p>Parse a log on \":\"</p> <pre><code>l = \"0:start:0\"\ntokens = l.split(\":\")\nprint(tokens) ## ['0', 'start', '0']\n</code></pre> <p>Reverse works with built in split, [::-1] and \" \".join()</p> <pre><code>## s = \"the sky  is blue\"\ndef reverseWords(self, s: str) -&gt; str:\n  wordsWithoutWhitespace = s.split() ## ['the', 'sky', 'is', 'blue']\n  reversedWords = wordsWithoutWhitespace[::-1] ## ['blue', 'is', 'sky', 'the']\n  final = \" \".join(reversedWords) ## blue is sky the\n</code></pre> <p>Manual split based on isalpha()</p> <pre><code>def splitWords(input_string) -&gt; list:\n  words = [] #\n  start = length = 0\n  for i, c in enumerate(input_string):\n    if c.isalpha():\n      if length == 0:\n        start = i\n        length += 1\n      else:\n        words.append(input_string[start:start+length])\n        length = 0\n  if length &gt; 0:\n    words.append(input_string[start:start+length])\n  return words\n</code></pre> <p>Test type of char</p> <pre><code>def rotationalCipher(input, rotation_factor):\n  rtn = []\n  for c in input:\n    if c.isupper():\n      ci = ord(c) - ord('A')\n      ci = (ci + rotation_factor) % 26\n      rtn.append(chr(ord('A') + ci))\n    elif c.islower():\n      ci = ord(c) - ord('a')\n      ci = (ci + rotation_factor) % 26\n      rtn.append(chr(ord('a') + ci))\n    elif c.isnumeric():\n      ci = ord(c) - ord('0')\n      ci = (ci + rotation_factor) % 10\n      rtn.append(chr(ord('0') + ci))\n    else:\n      rtn.append(c)\n  return \"\".join(rtn)\n</code></pre> <p>AlphaNumberic</p> <pre><code>isalnum()\n</code></pre> <p>Get charactor index</p> <pre><code>print(ord('A')) ## 65\nprint(ord('B')-ord('A')+1) ## 2\nprint(chr(ord('a') + 2)) ## c\n</code></pre> <p>Replace characters or strings</p> <pre><code>def isValid(self, s: str) -&gt; bool:\n  while '[]' in s or '()' in s or '{}' in s:\n    s = s.replace('[]','').replace('()','').replace('{}','')\n  return len(s) == 0\n</code></pre> <p>Insert values in strings</p> <pre><code>txt3 = \"My name is {}, I'm {}\".format(\"John\",36) ## My name is John, I'm 36\n</code></pre> <p>Multiply strings/lists with *, even booleans which map to True(1) and False(0)</p> <pre><code>'meh' * 2 ## mehmeh\n['meh'] * 2 ## ['meh', 'meh']\n['meh'] * True #['meh']\n['meh'] * False #[]\n</code></pre> <p>Find substring in string</p> <pre><code>txt = \"Hello, welcome to my world.\"\nx = txt.find(\"welcome\")  ## 7\n</code></pre> <p>startswith and endswith are very handy</p> <pre><code>str = \"this is string example....wow!!!\"\nstr.endswith(\"!!\") ## True\nstr.startswith(\"this\") ## True\nstr.endswith(\"is\", 2, 4) ## True\n</code></pre> <p>Python3 format strings</p> <pre><code>name = \"Eric\"\nprofession = \"comedian\"\naffiliation = \"Monty Python\"\nmessage = (\n     f\"Hi {name}. \"\n     f\"You are a {profession}. \"\n     f\"You were in {affiliation}.\"\n)\nmessage\n'Hi Eric. You are a comedian. You were in Monty Python.'\n</code></pre> <p>Print string with all chars, useful for debugging</p> <pre><code>print(repr(\"meh\\n\"))     ## 'meh\\n'\n</code></pre>"},{"location":"Code/How_to_Python/#slicing","title":"Slicing","text":"<p>Slicing intro</p> <pre><code>                +---+---+---+---+---+---+\n                | P | y | t | h | o | n |\n                +---+---+---+---+---+---+\nSlice position: 0   1   2   3   4   5   6\nIndex position:   0   1   2   3   4   5\np = ['P','y','t','h','o','n']\np[0] 'P' ## indexing gives items, not lists\nalpha[slice(2,4)] ## equivalent to p[2:4]\np[0:1] ## ['P'] Slicing gives lists\np[0:5] ## ['P','y','t','h','o'] Start at beginning and count 5\np[2:4] = ['t','r'] ## Slice assignment  ['P','y','t','r','o','n']\np[2:4] = ['s','p','a','m'] ## Slice assignment can be any size['P','y','s','p','a','m','o','n']\np[4:4] = ['x','y'] ## insert slice ['P','y','t','h','x','y','o','n']\np[0:5:2] ## ['P', 't', 'o'] sliceable[start:stop:step]\np[5:0:-1] ## ['n', 'o', 'h', 't', 'y']\n</code></pre> <p>Go through num and get combinations missing a member</p> <pre><code>numList = [1,2,3,4]\nfor i in range(len(numList)):\n    newList = numList[0:i] + numList[i+1:len(numList)]\n    print(newList) ## [2, 3, 4], [1, 3, 4], [1, 2, 4], [1, 2, 3]\n</code></pre>"},{"location":"Code/How_to_Python/#tuple","title":"Tuple","text":"<p>Collection that is ordered and unchangable</p> <pre><code>thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[1]) ## banana\n</code></pre> <p>Can be used with Dicts</p> <pre><code>def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n    d = defaultdict(list)\n    for w in strs:\n        key = tuple(sorted(w))\n        d[key].append(w)\n    return d.values()\n</code></pre>"},{"location":"Code/How_to_Python/#sort","title":"Sort","text":"<p>sorted(iterable, key=key, reverse=reverse)</p> <p>Sort sorts alphabectically, from smallest to largest</p> <pre><code>print(sorted(['Ford', 'BMW', 'Volvo'])) ## ['BMW', 'Ford', 'Volvo']\nnums = [-4,-1,0,3,10]\nprint(sorted(n*n for n in nums)) ## [0,1,9,16,100]\n</code></pre> <pre><code>cars = ['Ford', 'BMW', 'Volvo']\ncars.sort() ## returns None type\ncars.sort(key=lambda x: len(x) ) ## ['BMW', 'Ford', 'Volvo']\nprint(sorted(cars, key=lambda x:len(x))) ## ['BMW', 'Ford', 'Volvo']\n</code></pre> <p>Sort key by value, even when value is a list</p> <pre><code>meh = {'a':3,'b':0,'c':2,'d':-1}\nprint(sorted(meh, key=lambda x:meh[x])) ## ['d', 'b', 'c', 'a']\nmeh = {'a':[0,3,'a'],'b':[-2,-3,'b'],'c':[2,3,'c'],'d':[-2,-2,'d']}\nprint(sorted(meh, key=lambda x:meh[x])) ## ['b', 'd', 'a', 'c']\n</code></pre> <pre><code>def merge_sorted_lists(arr1, arr2): ## built in sorted does Timsort optimized for subsection sorted lists\n    return sorted(arr1 + arr2)\n</code></pre> <p>Sort an array but keep the original indexes</p> <pre><code>self.idx, self.vals = zip(*sorted([(i,v) for i,v in enumerate(nums)], key=lambda x:x[1]))\n</code></pre> <p>Sort by tuple, 2nd element then 1st ascending</p> <pre><code>a = [(5,10), (2,20), (2,3), (0,100)]\ntest = sorted(a, key = lambda x: (x[1],x[0]))\nprint(test) ## [(2, 3), (5, 10), (2, 20), (0, 100)]\ntest = sorted(a, key = lambda x: (-x[1],x[0]))\nprint(test) ## [(0, 100), (2, 20), (5, 10), (2, 3)]\n</code></pre> <p>Sort and print dict values by key</p> <pre><code>ans = {-1: [(10, 1), (3, 3)], 0: [(0, 0), (2, 2), (7, 4)], -3: [(8, 5)]}\nfor key, value in sorted(ans.items()): print(value)\n## [(8, 5)]\n## [(10, 1), (3, 3)]\n## [(0, 0), (2, 2), (7, 4)]\n\n## sorted transforms dicts to lists\nsorted(ans) ## [-3, -1, 0]\nsorted(ans.values()) ## [[(0, 0), (2, 2), (7, 4)], [(8, 5)], [(10, 1), (3, 3)]]\nsorted(ans.items()) ## [(-3, [(8, 5)]), (-1, [(10, 1), (3, 3)]), (0, [(0, 0), (2, 2), (7, 4)])]\n## Or just sort the dict directly\n[ans[i] for i in sorted(ans)]\n## [[(8, 5)], [(10, 1), (3, 3)], [(0, 0), (2, 2), (7, 4)]]\n</code></pre>"},{"location":"Code/How_to_Python/#hash","title":"Hash","text":"<pre><code>for c in s1: ## Adds counter for c\n  ht[c] = ht.get(c, 0) + 1 ## ht[a] = 1, ht[a]=2, etc\n</code></pre>"},{"location":"Code/How_to_Python/#set","title":"Set","text":"<pre><code>a = 3\nst = set()\nst.add(a) ## Add to st\nst.remove(a) ## Remove from st\nst.discard(a) ## Removes from set with no error\nst.add(a) ## Add to st\nnext(iter(s)) ## return 3 without removal\nst.pop() ## returns 3\n</code></pre> <pre><code>s = set('abc') ## {'c', 'a', 'b'}\ns |= set('cdf') ## {'f', 'a', 'b', 'd', 'c'} set s with elements from new set\ns &amp;= set('bd') ## {'d', 'b'} only elements from new set\ns -= set('b') ## {'d'} remove elements from new set\ns ^= set('abd') ## {'a', 'b'} elements from s or new but not both\n</code></pre>"},{"location":"Code/How_to_Python/#list","title":"List","text":"<p>Stacks are implemented with Lists. Stacks are good for parsing and graph traversal</p> <pre><code>test = [0] * 100 ## initialize list with 100 0's\n</code></pre> <p>2D</p> <pre><code>rtn.append([])\nrtn[0].append(1) ## [[1]]\n</code></pre> <p>List Comprehension</p> <pre><code>number_list = [ x for x in range(20) if x % 2 == 0]\nprint(number_list) ## [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code></pre> <p>Reverse a list</p> <pre><code>ss = [1,2,3]\nss.reverse()\nprint(ss) #3,2,1\n</code></pre> <p>Join list</p> <pre><code>list1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\nlist3 = list1 + list2 ## ['a', 'b', 'c', 1, 2, 3]\n</code></pre>"},{"location":"Code/How_to_Python/#dict","title":"Dict","text":"<p>Hashtables are implemented with dictionaries</p> <pre><code>d = {'key': 'value'}         ## Declare dict{'key': 'value'}\nd['key'] = 'value'           ## Add Key and Value\n{x:0 for x in {'a', 'b'}}    ## {'a': 0, 'b': 0} declare through comprehension\nd['key'])                    ## Access value\nd.items()                    ## Items as tuple list dict_items([('key', 'value')])\nif 'key' in d: print(\"meh\")  ## Check if value exists\npar = {}\npar.setdefault(1,1)          ## returns 1, makes par = { 1 : 1 }\npar = {0:True, 1:False}\npar.pop(0)                   ## Remove key 0, Returns True, par now {1: False}\nfor k in d: print(k)         ## Iterate through keys\n</code></pre> <p>Create Dict of Lists that match length of list to count votes</p> <pre><code>votes = [\"ABC\",\"CBD\",\"BCA\"]\nrnk = {v:[0] * len(votes[0]) for v in votes[0]}\nprint(rnk) ## {'A': [0, 0, 0], 'B': [0, 0, 0], 'C': [0, 0, 0]}\n</code></pre>"},{"location":"Code/How_to_Python/#tree","title":"Tree","text":"<ol> <li>A tree is an undirected graph in which any two vertices are    connected by exactly one path.</li> <li>Any connected graph who has n nodes with n-1 edges is a tree.</li> <li>The degree of a vertex is the number of edges connected to the vertex.</li> <li>A leaf is a vertex of degree 1. An internal vertex is a vertex of degree at least 2.</li> <li> <p>A path graph is a tree with two or more vertices with no branches, degree of 2 except for leaves which have degree of 1</p> </li> <li> <p>Any two vertices in G can be connected by a unique simple path.</p> </li> <li>G is acyclic, and a simple cycle is formed if any edge is added to G.</li> <li>G is connected and has no cycles.</li> <li>G is connected but would become disconnected if any single edge is removed from G.</li> </ol>"},{"location":"Code/How_to_Python/#binarytree","title":"BinaryTree","text":"<p>DFS Pre, In Order, and Post order Traversal</p> <ul> <li>Preorder</li> <li>encounters roots before leaves</li> <li>Create copy</li> <li>Inorder</li> <li>flatten tree back to original sequence</li> <li>Get values in non-decreasing order in BST</li> <li>Post order</li> <li>encounter leaves before roots</li> <li>Helpful for deleting</li> </ul> <p>Recursive</p> <pre><code>\"\"\"\n     1\n    / \\\n   2   3\n  / \\\n 4   5\n\"\"\"\n## PostOrder 4 5 2 3 1  (Left-Right-Root)\ndef postOrder(node):\n  if node is None:\n    return\n  postorder(node.left)\n  postorder(node.right)\n  print(node.value, end=' ')\n</code></pre> <p>Iterative PreOrder</p> <pre><code>## PreOrder  1 2 4 5 3 (Root-Left-Right)\ndef preOrder(tree_root):\n  stack = [(tree_root, False)]\n  while stack:\n    node, visited = stack.pop()\n    if node:\n      if visited:\n        print(node.value, end=' ')\n      else:\n        stack.append((node.right, False))\n        stack.append((node.left, False))\n        stack.append((node, True))\n</code></pre> <p>Iterative InOrder</p> <pre><code>## InOrder   4 2 5 1 3 (Left-Root-Right)\ndef inOrder(tree_root):\n  stack = [(tree_root, False)]\n  while stack:\n    node, visited = stack.pop()\n    if node:\n      if visited:\n        print(node.value, end=' ')\n      else:\n        stack.append((node.right, False))\n        stack.append((node, True))\n        stack.append((node.left, False))\n</code></pre> <p>Iterative PostOrder</p> <pre><code>## PostOrder 4 5 2 3 1  (Left-Right-Root)\ndef postOrder(tree_root):\n  stack = [(tree_root, False)]\n  while stack:\n    node, visited = stack.pop()\n    if node:\n      if visited:\n        print(node.value, end=' ')\n      else:\n        stack.append((node, True))\n        stack.append((node.right, False))\n        stack.append((node.left, False))\n</code></pre> <p>Iterative BFS(LevelOrder)</p> <pre><code>from collections import deque\n\n#BFS levelOrder 1 2 3 4 5\ndef levelOrder(tree_root):\n  queue = deque([tree_root])\n  while queue:\n    node = queue.popleft()\n    if node:\n        print(node.value, end=' ')\n        queue.append(node.left)\n        queue.append(node.right)\n\ndef levelOrderStack(tree_root):\n    stk = [(tree_root, 0)]\n    rtn = []\n    while stk:\n        node, depth = stk.pop()\n        if node:\n            if len(rtn) &lt; depth + 1:\n                rtn.append([])\n            rtn[depth].append(node.value)\n            stk.append((node.right, depth+1))\n            stk.append((node.left, depth+1))\n    print(rtn)\n    return True\n\ndef levelOrderStackRec(tree_root):\n    rtn = []\n\n    def helper(node, depth):\n        if len(rtn) == depth:\n            rtn.append([])\n        rtn[depth].append(node.value)\n        if node.left:\n            helper(node.left, depth + 1)\n        if node.right:\n            helper(node.right, depth + 1)\n\n    helper(tree_root, 0)\n    print(rtn)\n    return rtn\n</code></pre> <p>Traversing data types as a graph, for example BFS</p> <pre><code>def removeInvalidParentheses(self, s: str) -&gt; List[str]:\n    rtn = []\n    v = set()\n    v.add(s)\n    if len(s) == 0: return [\"\"]\n    while True:\n        for n in v:\n            if self.isValid(n):\n                rtn.append(n)\n        if len(rtn) &gt; 0: break\n        level = set()\n        for n in v:\n            for i, c in enumerate(n):\n                if c == '(' or c == ')':\n                    sub = n[0:i] + n[i + 1:len(n)]\n                    level.add(sub)\n        v = level\n    return rtn\n</code></pre> <p>Reconstructing binary trees</p> <ol> <li>Binary tree could be constructed from preorder and inorder traversal</li> <li>Inorder traversal of BST is an array sorted in the ascending order</li> </ol> <p>Convert tree to array and then to balanced tree</p> <pre><code>def balanceBST(self, root: TreeNode) -&gt; TreeNode:\n    self.inorder = []\n\n    def getOrder(node):\n        if node is None:\n            return\n        getOrder(node.left)\n        self.inorder.append(node.val)\n        getOrder(node.right)\n\n    ## Get inorder treenode [\"1,2,3,4\"]\n    getOrder(root)\n\n    ## Convert to Tree\n    ##        2\n    ##       1 3\n    ##          4\n    def bst(listTree):\n        if not listTree:\n            return None\n        mid = len(listTree) // 2\n        root = TreeNode(listTree[mid])\n        root.left = bst(listTree[:mid])\n        root.right = bst(listTree[mid+1:])\n        return root\n\n    return bst(self.inorder)\n</code></pre>"},{"location":"Code/How_to_Python/#graph","title":"Graph","text":"<p>Build an adjecency graph from edges list</p> <pre><code>## N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\ngraph = [[] for _ in range(N)]\nfor u,v in edges:\n    graph[u].append(v)\n    graph[v].append(u)\n## [[1, 2], [0], [0, 3, 4, 5], [2], [2], [2]]\n</code></pre> <p>Build adjecency graph from traditional tree</p> <pre><code>adj = collections.defaultdict(list)\ndef dfs(node):\n    if node.left:\n        adj[node].append(node.left)\n        adj[node.left].append(node)\n        dfs(node.left)\n    if node.right:\n        adj[node].append(node.right)\n        adj[node.right].append(node)\n        dfs(node.right)\ndfs(root)\n</code></pre> <p>Traverse Tree in graph notation</p> <pre><code>## [[1, 2], [0], [0, 3, 4, 5], [2], [2], [2]]\ndef dfs(node, par=-1):\n    for nei in graph[node]:\n        if nei != par:\n            res = dfs(nei, node)\ndfs(0) ## 1-&gt;2-&gt;3-&gt;4-&gt;5\n</code></pre>"},{"location":"Code/How_to_Python/#heapq","title":"Heapq","text":"<pre><code>      1\n     / \\\n    2   3\n   / \\ / \\\n  5  6 8  7\n</code></pre> <p>Priority Queue</p> <ol> <li>Implemented as complete binary tree, which has all levels as full excepted deepest</li> <li>In a heap tree the node is smaller than its children</li> </ol> <pre><code>def maximumProduct(self, nums: List[int]) -&gt; int:\n  l = heapq.nlargest(3, nums)\n  s = heapq.nsmallest(3, nums)\n  return max(l[0]*l[1]*l[2],s[0]*s[1]*l[0])\n</code></pre> <p>Heap elements can be tuples, heappop() frees the smallest element (flip sign to pop largest)</p> <pre><code>def kClosest(self, points: List[List[int]], K: int) -&gt; List[List[int]]:\n    heap = []\n    for p in points:\n        distance = sqrt(p[0]* p[0] + p[1]*p[1])\n        heapq.heappush(heap,(-distance, p))\n        if len(heap) &gt; K:\n            heapq.heappop(heap)\n    return ([h[1] for h in heap])\n</code></pre> <p>nsmallest can take a lambda argument</p> <pre><code>def kClosest(self, points: List[List[int]], K: int) -&gt; List[List[int]]:\n    return heapq.nsmallest(K, points, lambda x: x[0]*x[0] + x[1]*x[1])\n</code></pre> <p>The key can be a function as well in nsmallest/nlargest</p> <pre><code>def topKFrequent(self, nums: List[int], k: int) -&gt; List[int]:\n    count = Counter(nums)\n    return heapq.nlargest(k, count, count.get)\n</code></pre> <p>Tuple sort, 1st/2nd element. increasing frequency then decreasing order</p> <pre><code>def topKFrequent(self, words: List[str], k: int) -&gt; List[str]:\n    freq = Counter(words)\n    return heapq.nsmallest(k, freq.keys(), lambda x:(-freq[x], x))\n</code></pre>"},{"location":"Code/How_to_Python/#lambda","title":"Lambda","text":"<p>Can be used with (list).sort(), sorted(), min(), max(), (heapq).nlargest,nsmallest(), map()</p> <pre><code>## a=3,b=8,target=10\nmin((b,a), key=lambda x: abs(target - x)) ## 8\n</code></pre> <pre><code>&gt;&gt;&gt; ids = ['id1', 'id2', 'id30', 'id3', 'id22', 'id100']\n&gt;&gt;&gt; print(sorted(ids)) ## Lexicographic sort\n['id1', 'id100', 'id2', 'id22', 'id3', 'id30']\n&gt;&gt;&gt; sorted_ids = sorted(ids, key=lambda x: int(x[2:])) ## Integer sort\n&gt;&gt;&gt; print(sorted_ids)\n['id1', 'id2', 'id3', 'id22', 'id30', 'id100']\n</code></pre> <pre><code>trans = lambda x: list(al[i] for i in x) ## apple, a-&gt;0..\nprint(trans(words[0])) ## [0, 15, 15, 11, 4]\n</code></pre> <p>Lambda can sort by 1st, 2nd element in tuple</p> <pre><code>sorted([('abc', 121),('bbb',23),('abc', 148),('bbb', 24)], key=lambda x: (x[0],x[1]))\n## [('abc', 121), ('abc', 148), ('bbb', 23), ('bbb', 24)]\n</code></pre>"},{"location":"Code/How_to_Python/#zip","title":"Zip","text":"<p>Combine two dicts or lists</p> <pre><code>s1 = {2, 3, 1}\ns2 = {'b', 'a', 'c'}\nlist(zip(s1, s2)) ## [(1, 'a'), (2, 'c'), (3, 'b')]\n</code></pre> <p>Traverse in Parallel</p> <pre><code>letters = ['a', 'b', 'c']\nnumbers = [0, 1, 2]\nfor l, n in zip(letters, numbers):\n  print(f'Letter: {l}') ## a,b,c\n  print(f'Number: {n}') ## 0,1,2\n</code></pre> <p>Empty in one list is ignored</p> <pre><code>letters = ['a', 'b', 'c']\nnumbers = []\nfor l, n in zip(letters, numbers):\n  print(f'Letter: {l}') #\n  print(f'Number: {n}') #\n</code></pre> <p>Compare characters of alternating words</p> <pre><code>for a, b in zip(words, words[1:]):\n    for c1, c2 in zip(a,b):\n        print(\"c1 \", c1, end=\" \")\n        print(\"c2 \", c2, end=\" \")\n</code></pre> <p>Passing in * unpacks a list or other iterable, making each of its elements a separate argument.</p> <pre><code>a = [[1,2],[3,4]]\ntest = zip(*a)\nprint(test) ## (1, 3) (2, 4)\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\ntest = zip(*matrix)\nprint(*test) ## (1, 4, 7) (2, 5, 8) (3, 6, 9)\n</code></pre> <p>Useful when rotating a matrix</p> <pre><code>## matrix = [[1,2,3],[4,5,6],[7,8,9]]\nmatrix[:] = zip(*matrix[::-1]) ## [[7,4,1],[8,5,2],[9,6,3]]\n</code></pre> <p>Iterate through chars in a list of strs</p> <pre><code>strs = [\"cir\",\"car\",\"caa\"]\nfor i, l in enumerate(zip(*strs)):\n    print(l)\n    ## ('c', 'c', 'c')\n    ## ('i', 'a', 'a')\n    ## ('r', 'r', 'a')\n</code></pre> <p>Diagonals can be traversed with the help of a list</p> <pre><code>\"\"\"\n[[1,2,3],\n [4,5,6],\n [7,8,9],\n [10,11,12]]\n\"\"\"\ndef printDiagonalMatrix(self, matrix: List[List[int]]) -&gt; bool:\n    R = len(matrix)\n    C = len(matrix[0])\n\n    tmp = [[] for _ in range(R+C-1)]\n\n    for r in range(R):\n        for c in range(C):\n            tmp[r+c].append(matrix[r][c])\n\n    for t in tmp:\n        for n in t:\n            print(n, end=' ')\n        print(\"\")\n\"\"\"\n 1,\n 2,4\n 3,5,7\n 6,8,10\n 9,11\n 12\n\"\"\"\n</code></pre>"},{"location":"Code/How_to_Python/#random","title":"Random","text":"<pre><code>for i, l in enumerate(shuffle):\n  r = random.randrange(0+i, len(shuffle))\n  shuffle[i], shuffle[r] = shuffle[r], shuffle[i]\nreturn shuffle\n</code></pre> <p>Other random generators</p> <pre><code>import random\nints = [0,1,2]\nrandom.choice(ints) ## 0,1,2\nrandom.choices([1,2,3],[1,1,10]) ## 3, heavily weighted\nrandom.randint(0,2) ## 0,1, 2\nrandom.randint(0,0) ## 0\nrandom.randrange(0,0) ## error\nrandom.randrange(0,2) ## 0,1\n</code></pre>"},{"location":"Code/How_to_Python/#constants","title":"Constants","text":"<pre><code>max = float('-inf')\nmin = float('inf')\n</code></pre>"},{"location":"Code/How_to_Python/#ternary","title":"Ternary","text":"<p>a if condition else b</p> <pre><code>test = stk.pop() if stk else '#'\n</code></pre>"},{"location":"Code/How_to_Python/#bitwise-operators","title":"Bitwise Operators","text":"<pre><code>'0b{:04b}'.format(0b1100 &amp; 0b1010) ## '0b1000' and\n'0b{:04b}'.format(0b1100 | 0b1010) ## '0b1110' or\n'0b{:04b}'.format(0b1100 ^ 0b1010) ## '0b0110' exclusive or\n'0b{:04b}'.format(0b1100 &gt;&gt; 2)     ## '0b0011' shift right\n'0b{:04b}'.format(0b0011 &lt;&lt; 2)     ## '0b1100' shift left\n</code></pre>"},{"location":"Code/How_to_Python/#for-else","title":"For Else","text":"<p>Else condition on for loops if break is not called</p> <pre><code>for w1, w2 in zip(words, words[1:]): #abc, ab\n    for c1, c2 in zip(w1, w2):\n        if c1 != c2:\n            adj[c1].append(c2)\n            degrees[c2] += 1\n            break\n    else: ## nobreak\n        if len(w1) &gt; len(w2):\n            return \"\"   ## Triggers since ab should be before abc, not after\n</code></pre>"},{"location":"Code/How_to_Python/#modulo","title":"Modulo","text":"<pre><code>for n in range(-8,8):\n    print n, n//4, n%4\n\n -8 -2 0\n -7 -2 1\n -6 -2 2\n -5 -2 3\n\n -4 -1 0\n -3 -1 1\n -2 -1 2\n -1 -1 3\n\n  0  0 0\n  1  0 1\n  2  0 2\n  3  0 3\n\n  4  1 0\n  5  1 1\n  6  1 2\n  7  1 3\n</code></pre>"},{"location":"Code/How_to_Python/#any","title":"Any","text":"<p>if any element of the iterable is True</p> <pre><code>def any(iterable):\n    for element in iterable:\n        if element:\n            return True\n    return False\n</code></pre>"},{"location":"Code/How_to_Python/#all","title":"All","text":"<pre><code>def all(iterable):\n    for element in iterable:\n        if not element:\n            return False\n    return True\n</code></pre>"},{"location":"Code/How_to_Python/#bisect","title":"Bisect","text":"<ul> <li>bisect.bisect_left returns the leftmost place in the sorted list to insert the given element</li> <li>bisect.bisect_right returns the rightmost place in the sorted list to insert the given element</li> </ul> <pre><code>import bisect\nbisect.bisect_left([1,2,3,4,5], 2)  ## 1\nbisect.bisect_right([1,2,3,4,5], 2) ## 2\nbisect.bisect_left([1,2,3,4,5], 7)  ## 5\nbisect.bisect_right([1,2,3,4,5], 7) ## 5\n</code></pre> <p>Insert x in a in sorted order. This is equivalent to a.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a is already sorted. Search is binary search O(logn) and insert is O(n)</p> <pre><code>import bisect\nl = [1, 3, 7, 5, 6, 4, 9, 8, 2]\nresult = []\nfor e in l:\n    bisect.insort(result, e)\nprint(result) ## [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <pre><code>li1 = [1, 3, 4, 4, 4, 6, 7] ## [1, 3, 4, 4, 4, 5, 6, 7]\nbisect.insort(li1, 5) #\n</code></pre> <p>Bisect can give two ends of a range, if the array is sorted of course</p> <pre><code>s = bisect.bisect_left(nums, target)\ne = bisect.bisect(nums, target) -1\nif s &lt;= e:\n    return [s,e]\nelse:\n    return [-1,-1]\n</code></pre>"},{"location":"Code/How_to_Python/#math","title":"Math","text":"<p>Calulate power</p> <pre><code>## (a ^ b) % p.\nd = pow(a, b, p)\n</code></pre> <p>Division with remainder</p> <pre><code>divmod(8, 3) ## (2, 2)\ndivmod(3, 8) ##  (0, 3)\n</code></pre>"},{"location":"Code/How_to_Python/#eval","title":"eval","text":"<p>Evaluates an expression</p> <pre><code>x = 1\nprint(eval('x + 1'))\n</code></pre>"},{"location":"Code/How_to_Python/#iter","title":"Iter","text":"<p>Creates iterator from container object such as list, tuple, dictionary and set</p> <pre><code>mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\nprint(next(myit)) ## apple\nprint(next(myit)) ## banana\n</code></pre>"},{"location":"Code/How_to_Python/#map","title":"Map","text":"<p>map(func, *iterables)</p> <pre><code>my_pets = ['alfred', 'tabitha', 'william', 'arla']\nuppered_pets = list(map(str.upper, my_pets)) ## ['ALFRED', 'TABITHA', 'WILLIAM', 'ARLA']\nmy_strings = ['a', 'b', 'c', 'd', 'e']\nmy_numbers = [1,2,3,4,5]\nresults = list(map(lambda x, y: (x, y), my_strings, my_numbers)) ## [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n</code></pre> <pre><code>A1 = [1, 4, 9]\n''.join(map(str, A1))\n</code></pre>"},{"location":"Code/How_to_Python/#filter","title":"Filter","text":"<p>filter(func, iterable)</p> <pre><code>scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]\nover_75 = list(filter(lambda x: x&gt;75, scores)) ## [90, 76, 88, 81]\n</code></pre> <pre><code>scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]\ndef is_A_student(score):\n    return score &gt; 75\nover_75 = list(filter(is_A_student, scores)) ## [90, 76, 88, 81]\n</code></pre> <pre><code>dromes = (\"demigod\", \"rewire\", \"madam\", \"freer\", \"anutforajaroftuna\", \"kiosk\")\npalindromes = list(filter(lambda word: word == word[::-1], dromes)) ## ['madam', 'anutforajaroftuna']\n</code></pre> <p>Get degrees == 0 from list</p> <pre><code>stk = list(filter(lambda x: degree[x]==0, degree.keys()))\n</code></pre>"},{"location":"Code/How_to_Python/#reduce","title":"Reduce","text":"<p>reduce(func, iterable[, initial]) where initial is optional</p> <pre><code>numbers = [3, 4, 6, 9, 34, 12]\nresult = reduce(lambda x, y: x+y, numbers) ## 68\nresult = reduce(lambda x, y: x+y, numbers, 10) #78\n</code></pre>"},{"location":"Code/How_to_Python/#itertools","title":"itertools","text":"<p>itertools.accumulate(iterable[, func]) \u2013&gt; accumulate object</p> <pre><code>import itertools\ndata = [3, 4, 6, 2, 1, 9, 0, 7, 5, 8]\nlist(itertools.accumulate(data)) ## [3, 7, 13, 15, 16, 25, 25, 32, 37, 45]\nlist(accumulate(data, max))  ## [3, 4, 6, 6, 6, 9, 9, 9, 9, 9]\ncashflows = [1000, -90, -90, -90, -90]  ## Amortize a 5% loan of 1000 with 4 annual payments of 90\nlist(itertools.accumulate(cashflows, lambda bal, pmt: bal*1.05 + pmt)) [1000, 960.0, 918.0, 873.9000000000001, 827.5950000000001]\nfor k,v in groupby(\"aabbbc\")    ## group by common letter\n    print(k)                    ## a,b,c\n    print(list(v))              ## [a,a],[b,b,b],[c,c]\n</code></pre>"},{"location":"Code/How_to_Python/#regular-expression","title":"Regular Expression","text":"<p>RE module allows regular expressions in python</p> <pre><code>def removeVowels(self, S: str) -&gt; str:\n    return re.sub('a|e|i|o|u', '', S)\n</code></pre>"},{"location":"Code/How_to_Python/#types","title":"Types","text":"<p>from typing import List, Set, Dict, Tuple, Optional cheat sheet</p>"},{"location":"Code/How_to_Python/#grids","title":"Grids","text":"<p>Useful helpful function</p> <pre><code>R = len(grid)\nC = len(grid[0])\n\ndef neighbors(r, c):\n    for nr, nc in ((r,c-1), (r,c+1), (r-1, c), (r+1,c)):\n        if 0&lt;=nr&lt;R and 0&lt;=nc&lt;C:\n            yield nr, nc\n\ndef dfs(r,c, index):\n    area = 0\n    grid[r][c] = index\n    for x,y in neighbors(r,c):\n        if grid[x][y] == 1:\n            area += dfs(x,y, index)\n    return area + 1\n</code></pre>"},{"location":"Code/How_to_Python/#collections","title":"Collections","text":"<p>Stack with appendleft() and popleft()</p>"},{"location":"Code/How_to_Python/#deque","title":"Deque","text":"<pre><code>from collections import deque\ndeq = deque([1, 2, 3])\ndeq.appendleft(5)\ndeq.append(6)\ndeq\ndeque([5, 1, 2, 3, 6])\ndeq.popleft()\n5\ndeq.pop()\n6\ndeq\ndeque([1, 2, 3])\n</code></pre>"},{"location":"Code/How_to_Python/#counter","title":"Counter","text":"<pre><code>from collections import Counter\ncount = Counter(\"hello\") ## Counter({'h': 1, 'e': 1, 'l': 2, 'o': 1})\ncount['l'] ## 2\ncount['l'] += 1\ncount['l'] ## 3\n</code></pre> <p>Get counter k most common in list of tuples</p> <pre><code>## [1,1,1,2,2,3]\n## Counter  [(1, 3), (2, 2)]\ndef topKFrequent(self, nums: List[int], k: int) -&gt; List[int]:\n    if len(nums) == k:\n        return nums\n    return [n[0] for n in Counter(nums).most_common(k)] ## [1,2]\n</code></pre> <p>elements() lets you walk through each number in the Counter</p> <pre><code>def intersect(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:\n    c1 = collections.Counter(nums1) ## [1,2,2,1]\n    c2 = collections.Counter(nums2) ## [2,2]\n    dif = c1 &amp; c2                   ## {2:2}\n    return list(dif.elements())     ## [2,2]\n</code></pre> <p>operators work on Counter</p> <pre><code>c = Counter(a=3, b=1)\nd = Counter(a=1, b=2)\nc + d ## {'a': 4, 'b': 3}\nc - d ## {'a': 2}\nc &amp; d ## {'a': 1, 'b': 1}\nc | d ## {'a': 3, 'b': 2}\nc = Counter(a=2, b=-4)\n+c ## {'a': 2}\n-c ## {'b': 4}\n</code></pre>"},{"location":"Code/How_to_Python/#default-dict","title":"Default Dict","text":"<pre><code>d={}\nprint(d['Grapes'])## This gives Key Error\nfrom collections import defaultdict\nd = defaultdict(int) ## set default\nprint(d['Grapes']) ## 0, no key error\nd = collections.defaultdict(lambda: 1)\nprint(d['Grapes']) ## 1, no key error\n</code></pre> <pre><code>from collections import defaultdict\ndd = defaultdict(list)\ndd['key'].append(1) ## defaultdict(&lt;class 'list'&gt;, {'key': [1]})\ndd['key'].append(2) ## defaultdict(&lt;class 'list'&gt;, {'key': [1, 2]})\n</code></pre>"},{"location":"Code/How_to_Python/#algorithms","title":"Algorithms","text":""},{"location":"Code/How_to_Python/#general-tips","title":"General Tips","text":"<ul> <li>Get all info</li> <li>Debug example, is it a special case?</li> <li>Brute Force</li> <li>Get to brute-force solution as soon as possible. State runtime and then optimize, don't code yet</li> <li>Optimize</li> <li>Look for unused info</li> <li>Solve it manually on example, then reverse engineer thought process</li> <li>Space vs time, hashing</li> <li>BUDS (Bottlenecks, Unnecessary work, Duplication)</li> <li>Walk through approach</li> <li>Code</li> <li>Test</li> <li>Start small</li> <li>Hit edge cases</li> </ul>"},{"location":"Code/How_to_Python/#binary-search","title":"Binary Search","text":"<pre><code>def firstBadVersion(self, n):\n    l, r = 0, n\n    while l &lt; r:\n        m = l + (r-l) // 2\n        if isBadVersion(m):\n            r = m\n        else:\n            l = m + 1\n    return l\n</code></pre> <pre><code>\"\"\"\n12345678\nFFTTTTTT\n\"\"\"\ndef mySqrt(self, x: int) -&gt; int:\n  def condition(value, x) -&gt; bool:\n    return value * value &gt; x\n\n  if x == 1:\n    return 1\n\n  left, right = 1, x\n  while left &lt; right:\n    mid = left + (right-left) // 2\n    if condition(mid, x):\n      right = mid\n    else:\n      left = mid + 1\n\n  return left - 1\n</code></pre> <p>binary search</p>"},{"location":"Code/How_to_Python/#binary-search-tree","title":"Binary Search Tree","text":"<p>Use values to detect if number is missing</p> <pre><code>def isCompleteTree(self, root: TreeNode) -&gt; bool:\n    self.total = 0\n    self.mx = float('-inf')\n    def dfs(node, cnt):\n        if node:\n            self.total += 1\n            self.mx = max(self.mx, cnt)\n            dfs(node.left, (cnt*2))\n            dfs(node.right, (cnt*2)+1)\n    dfs(root, 1)\n    return self.total == self.mx\n</code></pre> <p>Get a range sum of values</p> <pre><code>def rangeSumBST(self, root: TreeNode, L: int, R: int) -&gt; int:\n    self.total = 0\n    def helper(node):\n        if node is None:\n            return 0\n        if L &lt;= node.val &lt;= R:\n            self.total += node.val\n        if node.val &gt; L:\n            left = helper(node.left)\n        if node.val &lt; R:\n            right = helper(node.right)\n    helper(root)\n    return self.total\n</code></pre> <p>Check if valid</p> <pre><code>def isValidBST(self, root: TreeNode) -&gt; bool:\n    if not root:\n        return True\n    stk = [(root, float(-inf), float(inf))]\n    while stk:\n        node, floor, ceil = stk.pop()\n        if node:\n            if node.val &gt;= ceil or node.val &lt;= floor:\n                return False\n            stk.append((node.right, node.val, ceil))\n            stk.append((node.left, floor, node.val))\n    return True\n</code></pre>"},{"location":"Code/How_to_Python/#topological-sort","title":"Topological Sort","text":"<p>Kahn's algorithm, detects cycles through degrees and needs all the nodes represented to work</p> <ol> <li>Initialize vertices as unvisited</li> <li>Pick vertex with zero indegree, append to result, decrease indegree of neighbors</li> <li>Now repeat for neighbors, resulting list is sorted by source -&gt; dest</li> </ol> <p>If cycle, then degree of nodes in cycle will not be 0 since there is no origin</p> <pre><code>def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\n    ## Kahns algorithm, topological sort\n    adj = collections.defaultdict(list)\n    degree = collections.Counter()\n\n    for dest, orig in prerequisites:\n        adj[orig].append(dest)\n        degree[dest] += 1\n\n    bfs = [c for c in range(numCourses) if degree[c] == 0]\n\n    for o in bfs:\n        for d in adj[o]:\n            degree[d] -= 1\n            if degree[d] == 0:\n                bfs.append(d)\n\n    return len(bfs) == numCourses\n</code></pre> <pre><code>def alienOrder(self, words: List[str]) -&gt; str:\n    nodes = set(\"\".join(words))\n    adj = collections.defaultdict(list)\n    degree = collections.Counter(nodes)\n\n    for w1, w2 in zip(words, words[1:]):\n        for c1, c2 in zip(w1, w2):\n            if c1 != c2:\n                adj[c1].append(c2)\n                degree[c2] += 1\n                break\n        else:\n            if len(w1) &gt; len(w2):\n                return \"\"\n\n    stk = list(filter(lambda x: degree[x]==1, degree.keys()))\n\n    ans = []\n    while stk:\n        node = stk.pop()\n        ans.append(node)\n        for nei in adj[node]:\n            degree[nei] -= 1\n            if degree[nei] == 1:\n                stk.append(nei)\n\n    return \"\".join(ans) * (set(ans) == nodes)\n</code></pre>"},{"location":"Code/How_to_Python/#sliding-window","title":"Sliding Window","text":"<ol> <li>Have a counter or hash-map to count specific array input and keep on increasing the window toward right using outer loop.</li> <li>Have a while loop inside to reduce the window side by sliding toward right. Movement will be based on constraints of problem.</li> <li>Store the current maximum window size or minimum window size or number of windows based on problem requirement.</li> </ol>"},{"location":"Code/How_to_Python/#typical-problem-clues","title":"Typical Problem Clues:","text":"<ol> <li>Get min/max/number of satisfied sub arrays</li> <li>Return length of the subarray with max sum/product</li> <li>Return max/min length/number of subarrays whose sum/product equals K</li> </ol> <p>Can require 2 or 3 pointers to solve</p> <pre><code>    def slidingWindowTemplate(self, s: str):\n        #init a collection or int value to save the result according the question.\n        rtn = []\n\n        ## create a hashmap to save the Characters of the target substring.\n        ## (K, V) = (Character, Frequence of the Characters)\n        hm = {}\n\n        ## maintain a counter to check whether match the target string as needed\n        cnt = collections.Counter(s)\n\n        ## Two Pointers: begin - left pointer of the window; end - right pointer of the window if needed\n        l = r = 0\n\n        ## loop at the begining of the source string\n        for r, c in enumerate(s):\n\n            if c in hm:\n                l = max(hm[c]+1, l) ## +/- 1 or set l to index, max = never move l left\n\n            ## update hm\n            hm[c] = r\n\n            ## increase l pointer to make it invalid/valid again\n            while cnt == 0: ## counter condition\n                cnt[c] += 1  ## modify counter if needed\n\n            ## Save result / update min/max after loop is valid\n            rtn = max(rtn, r-l+1)\n\n        return rtn\n</code></pre> <pre><code>def fruits_into_baskets(fruits):\n  maxCount, j = 0, 0\n  ht = {}\n\n  for i, c in enumerate(fruits):\n    if c in ht:\n      ht[c] += 1\n    else:\n      ht[c] = 1\n\n    if len(ht) &lt;= 2:\n      maxCount = max(maxCount, i-j+1)\n    else:\n      jc = fruits[j]\n      ht[jc] -= 1\n      if ht[jc] &lt;= 0:\n        del ht[jc]\n      j += 1\n\n  return maxCount\n</code></pre>"},{"location":"Code/How_to_Python/#greedy","title":"Greedy","text":"<p>Make the optimal choice at each step.</p> <p>Increasing Triplet Subsequence, true if i &lt; j &lt; k</p> <pre><code>def increasingTriplet(self, nums: List[int]) -&gt; bool:\n    l = m = float('inf')\n\n    for n in nums:\n        if n &lt;= l:\n            l = n\n        elif n &lt;= m:\n            m = n\n        else:\n            return True\n\n    return False\n</code></pre>"},{"location":"Code/How_to_Python/#tree-tricks","title":"Tree Tricks","text":"<p>Bottom up solution with arguments for min, max</p> <pre><code>def maxAncestorDiff(self, root: TreeNode) -&gt; int:\n    if not root:\n        return 0\n    self.ans = 0\n    def dfs(node, minval, maxval):\n        if not node:\n            self.ans = max(self.ans, abs(maxval - minval))\n            return\n        dfs(node.left, min(node.val, minval), max(node.val, maxval))\n        dfs(node.right, min(node.val, minval), max(node.val, maxval))\n    dfs(root, float('inf'), float('-inf'))\n    return self.ans\n</code></pre> <p>Building a path through a tree</p> <pre><code>def binaryTreePaths(self, root: TreeNode) -&gt; List[str]:\n    rtn = []\n    if root is None: return []\n    stk = [(root, str(root.val))]\n    while stk:\n        node, path = stk.pop()\n        if node.left is None and node.right is None:\n            rtn.append(path)\n        if node.left:\n            stk.append((node.left, path + \"-&gt;\" + str(node.left.val)))\n        if node.right:\n            stk.append((node.right, path + \"-&gt;\" + str(node.right.val)))\n    return rtn\n</code></pre> <p>Using return value to sum</p> <pre><code>def diameterOfBinaryTree(self, root: TreeNode) -&gt; int:\n    self.mx = 0\n    def dfs(node):\n        if node:\n            l = dfs(node.left)\n            r = dfs(node.right)\n            total = l + r\n            self.mx = max(self.mx, total)\n            return max(l, r) + 1\n        else:\n            return 0\n    dfs(root)\n    return self.mx\n</code></pre> <p>Change Tree to Graph</p> <pre><code>def distanceK(self, root: TreeNode, target: TreeNode, K: int) -&gt; List[int]:\n    adj = collections.defaultdict(list)\n\n    def dfsa(node):\n        if node.left:\n            adj[node].append(node.left)\n            adj[node.left].append(node)\n            dfsa(node.left)\n        if node.right:\n            adj[node].append(node.right)\n            adj[node.right].append(node)\n            dfsa(node.right)\n\n    dfsa(root)\n\n    def dfs(node, prev, d):\n        if node:\n            if d == K:\n                rtn.append(node.val)\n            else:\n                for nei in adj[node]:\n                    if nei != prev:\n                        dfs(nei, node, d+1)\n\n    rtn = []\n    dfs(target, None, 0)\n    return rtn\n</code></pre>"},{"location":"Code/How_to_Python/#anagrams","title":"Anagrams","text":"<p>Subsection of sliding window, solve with Counter Dict</p> <p>i.e. abc = bca != eba 111 111 111</p> <pre><code>def isAnagram(self, s: str, t: str) -&gt; bool:\n    sc = collections.Counter(s)\n    st = collections.Counter(t)\n    if sc != st:\n        return False\n    return True\n</code></pre> <p>Sliding Window version (substring)</p> <pre><code>def findAnagrams(self, s: str, p: str) -&gt; List[int]:\n    cntP = collections.Counter(p)\n    cntS = collections.Counter()\n    P = len(p)\n    S = len(s)\n    if P &gt; S:\n        return []\n    ans = []\n    for i, c in enumerate(s):\n        cntS[c] += 1\n        if i &gt;= P:\n            if cntS[s[i-P]] &gt; 1:\n                cntS[s[i-P]] -= 1\n            else:\n                del cntS[s[i-P]]\n        if cntS == cntP:\n            ans.append(i-(P-1))\n    return ans\n</code></pre>"},{"location":"Code/How_to_Python/#dynamic-programming","title":"Dynamic Programming","text":"<ol> <li>dynamic programming</li> </ol> <pre><code>def coinChange(self, coins: List[int], amount: int) -&gt; int:\n  MAX = float('inf')\n  dp =  [MAX] * (amount + 1)\n  dp[0] = 0\n  for c in coins:\n    for a in range(c, amount+1):\n      dp[a] =  min(dp[a], dp[a-c]+1)\n  return dp[amount] if dp[amount] != MAX else -1\n</code></pre> <p>Classic DP grid, longest common subsequence</p> <pre><code>def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n    Y = len(text2)+1\n    X = len(text1)+1\n    dp = [[0] * Y for _ in range(X)]\n    ## [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n    for i, c in enumerate(text1):\n        for j, d in enumerate(text2):\n            if c == d:\n                dp[i + 1][j + 1] = 1 + dp[i][j]\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    return dp[-1][-1]\n## [[0,0,0,0],[0,1,1,1],[0,1,1,1],[0,1,2,2],[0,1,2,2],[0,1,2,3]]\n## abcde\n## \"ace\"\n</code></pre>"},{"location":"Code/How_to_Python/#cyclic-sort","title":"Cyclic Sort","text":"<ol> <li>Useful algo when sorting in place</li> </ol> <pre><code>## if my number is equal to my index, i+1\n## if my number is equal to this other number, i+1 (dups)\n## else swap\ndef cyclic_sort(nums):\n  i = 0\n  while i &lt; len(nums):\n    j = nums[i] - 1\n    if nums[i] != nums[j]:\n      nums[i], nums[j] = nums[j], nums[i]\n    else:\n      i += 1\n  return nums\n</code></pre>"},{"location":"Code/How_to_Python/#quick-sort","title":"Quick Sort","text":"<ol> <li>Can be modified for divide in conquer problems</li> </ol> <pre><code>def quickSort(array):\n    def sort(arr, l, r):\n        if l &lt; r:\n            p = part(arr, l, r)\n            sort(arr, l, p-1)\n            sort(arr, p+1, r)\n\n    def part(arr, l, r):\n        pivot = arr[r]\n        a = l\n        for i in range(l,r):\n            if arr[i] &lt; pivot:\n                arr[i], arr[a] = arr[a], arr[i]\n                a += 1\n        arr[r], arr[a] = arr[a], arr[r]\n        return a\n\n    sort(array, 0, len(array)-1)\n    return array\n</code></pre>"},{"location":"Code/How_to_Python/#merge-sort","title":"Merge Sort","text":"<pre><code>from collections import deque\ndef mergeSort(array):\n    def sortArray(nums):\n        if len(nums) &gt; 1:\n            mid = len(nums)//2\n            l1 = sortArray(nums[:mid])\n            l2 = sortArray(nums[mid:])\n            nums = sort(l1,l2)\n        return nums\n\n    def sort(l1,l2):\n        result = []\n        l1 = deque(l1)\n        l2 = deque(l2)\n        while l1 and l2:\n            if l1[0] &lt;= l2[0]:\n                result.append(l1.popleft())\n            else:\n                result.append(l2.popleft())\n        result.extend(l1 or l2)\n        return result\n    return sortArray(array)\n</code></pre>"},{"location":"Code/How_to_Python/#merge-arrays","title":"Merge Arrays","text":"<p>Merge K sorted Arrays with a heap</p> <pre><code>def mergeSortedArrays(self, arrays):\n    return list(heapq.merge(*arrays))\n</code></pre> <p>Or manually with heappush/heappop.</p> <pre><code>class Solution:\ndef mergeSortedArrays(self, arrays):\n    pq = []\n    for i, arr in enumerate(arrays):\n        pq.append((arr[0], i, 0))\n    heapify(pq)\n\n    res = []\n    while pq:\n        num, i, j = heappop(pq)\n        res.append(num)\n        if j + 1 &lt; len(arrays[i]):\n            heappush(pq, (arrays[i][j + 1], i, j + 1))\n    return res\n</code></pre> <p>Merging K Sorted Lists</p> <pre><code>def mergeKLists(self, lists: List[ListNode]) -&gt; ListNode:\n    prehead = ListNode()\n    heap = []\n    for i in range(len(lists)):\n        node = lists[i]\n        while node:\n            heapq.heappush(heap, node.val)\n            node = node.next\n    node = prehead\n    while len(heap) &gt; 0:\n        val = heapq.heappop(heap)\n        node.next = ListNode()\n        node = node.next\n        node.val = val\n    return prehead.next\n</code></pre>"},{"location":"Code/How_to_Python/#linked-list","title":"Linked List","text":"<ol> <li>Solutions typically require 3 pointers: current, previous and next</li> <li>Solutions are usually made simplier with a prehead or dummy head node you create and then add to. Then return dummy.next</li> </ol> <p>Reverse:</p> <pre><code>def reverseLinkedList(head):\n    prev, node  = None, head\n    while node:\n        node.next, prev, node = prev, node, node.next\n    return prev\n</code></pre> <p>Reversing is easier if you can modify the values of the list</p> <pre><code>def reverse(head):\n  node = head\n  stk = []\n  while node:\n    if node.data % 2 == 0:\n      stk.append(node)\n    if node.data % 2 == 1 or node.next is None:\n      while len(stk) &gt; 1:\n        stk[-1].data, stk[0].data = stk[0].data, stk[-1].data\n        stk.pop(0)\n        stk.pop(-1)\n      stk.clear()\n    node = node.next\n  return head\n</code></pre> <p>Merge:</p> <pre><code>def mergeTwoLists(self, l1: ListNode, l2: ListNode) -&gt; ListNode:\n    dummy = ListNode(-1)\n\n    prev = dummy\n\n    while l1 and l2:\n        if l1.val &lt; l2.val:\n            prev.next = l1\n            l1 = l1.next\n        else:\n            prev.next = l2\n            l2 = l2.next\n        prev = prev.next\n\n    prev.next = l1 if l1 is not None else l2\n\n    return dummy.next\n</code></pre>"},{"location":"Code/How_to_Python/#convert-base","title":"Convert Base","text":"<ol> <li>Typically two steps. A digit modulo step and a integer division step by the next base then reverse the result or use a deque()</li> </ol> <p>Base 10 to 16, or any base by changing '16' and index</p> <pre><code>def toHex(self, num: int) -&gt; str:\n  rtn = []\n  index = \"0123456789abcdef\"\n  if num == 0: return '0'\n  if num &lt; 0: num += 2 ** 32\n  while num &gt; 0:\n    digit = num % 16\n    rtn.append(index[digit])\n    num = num // 16\n  return \"\".join(rtn[::-1])\n</code></pre>"},{"location":"Code/How_to_Python/#parenthesis","title":"Parenthesis","text":"<ol> <li>Count can be used if simple case, otherwise stack. Basic Calculator is an extension of this algo</li> </ol> <pre><code>def isValid(self, s) -&gt; bool:\n  cnt = 0\n  for c in s:\n    if c == '(':\n      cnt += 1\n    elif c == ')':\n      cnt -= 1\n      if cnt &lt; 0:\n        return False\n  return cnt == 0\n</code></pre> <p>Stack can be used if more complex</p> <pre><code>def isValid(self, s: str) -&gt; bool:\n  stk = []\n  mp = {\")\":\"(\", \"}\":\"{\", \"]\":\"[\"}\n    for c in s:\n      if c in mp.values():\n        stk.append(c)\n      elif c in mp.keys():\n        test = stk.pop() if stk else '#'\n        if mp[c] != test:\n          return False\n  return len(stk) == 0\n</code></pre> <p>Or must store parenthesis index for further modification</p> <pre><code>def minRemoveToMakeValid(self, s: str) -&gt; str:\n  rtn = list(s)\n  stk = []\n  for i, c in enumerate(s):\n    if c == '(':\n      stk.append(i)\n    elif c == ')':\n      if len(stk) &gt; 0:\n        stk.pop()\n      else:\n        rtn[i] = ''\n  while stk:\n    rtn[stk.pop()] = ''\n  return \"\".join(rtn)\n</code></pre>"},{"location":"Code/How_to_Python/#max-profit-stock","title":"Max Profit Stock","text":"<p>Infinite Transactions, base formula</p> <pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n    t0, t1 = 0, float('-inf')\n    for p in prices:\n        t0old = t0\n        t0 = max(t0, t1 + p)\n        t1 = max(t1, t0old - p)\n    return t0\n</code></pre> <p>Single Transaction, t0 (k-1) = 0</p> <pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n    t0, t1 = 0, float('-inf')\n    for p in prices:\n        t0 = max(t0, t1 + p)\n        t1 = max(t1, - p)\n    return t0\n</code></pre> <p>K Transactions</p> <pre><code>t0 = [0] * (k+1)\nt1 = [float(-inf)] * (k+1)\nfor p in prices:\n    for i in range(k, 0, -1):\n        t0[i] = max(t0[i], t1[i] + p)\n        t1[i] = max(t1[i], t0[i-1] - p)\nreturn t0[k]\n</code></pre>"},{"location":"Code/How_to_Python/#shift-array-right","title":"Shift Array Right","text":"<p>Arrays can be shifted right by reversing the whole string, and then reversing 0,k-1 and k,len(str)</p> <pre><code>def rotate(self, nums: List[int], k: int) -&gt; None:\n    def reverse(l, r, nums):\n        while l &lt; r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1\n    if len(nums) &lt;= 1: return\n    k = k % len(nums)\n    reverse(0, len(nums)-1, nums)\n    reverse(0, k-1, nums)\n    reverse(k, len(nums)-1, nums)\n</code></pre>"},{"location":"Code/How_to_Python/#continuous-subarrays-with-sum-k","title":"Continuous Subarrays with Sum k","text":"<p>The total number of continuous subarrays with sum k can be found by hashing the continuous sum per value and adding the count of continuous sum - k</p> <pre><code>def subarraySum(self, nums: List[int], k: int) -&gt; int:\n    mp = {0: 1}\n    rtn, total = 0, 0\n    for n in nums:\n        total += n\n        rtn += mp.get(total - k, 0)\n        mp[total] = mp.get(total, 0) + 1\n    return rtn\n</code></pre>"},{"location":"Code/How_to_Python/#events","title":"Events","text":"<p>Events pattern can be applied when to many interval problems such as 'Find employee free time between meetings' and 'find peak population' when individual start/ends are irrelavent and sum start/end times are more important</p> <pre><code>def employeeFreeTime(self, schedule: '[[Interval]]') -&gt; '[Interval]':\n    events = []\n    for e in schedule:\n        for m in e:\n            events.append((m.start, 1))\n            events.append((m.end, -1))\n    events.sort()\n    itv = []\n    prev = None\n    bal = 0\n    for t, c in events:\n        if bal == 0 and prev is not None and t != prev:\n            itv.append(Interval(prev, t))\n        bal += c\n        prev = t\n    return itv\n</code></pre>"},{"location":"Code/How_to_Python/#merge-meetings","title":"Merge Meetings","text":"<p>Merging a new meeting into a list</p> <pre><code>def insert(self, intervals: List[List[int]], newInterval: List[int]) -&gt; List[List[int]]:\n    bisect.insort(intervals, newInterval)\n    merged = [intervals[0]]\n    for i in intervals:\n        ms, me = merged[-1]\n        s, e = i\n        if me &gt;= s:\n            merged[-1] = (ms, max(me, e))\n        else:\n            merged.append(i)\n    return merged\n</code></pre>"},{"location":"Code/How_to_Python/#trie","title":"Trie","text":"<p>Good for autocomplete, spell checker, IP routing (match longest prefix), predictive text, solving word games</p> <pre><code>class Trie:\n    def __init__(self):\n        self.root = {}\n\n    def addWord(self, s: str):\n        tmp = self.root\n        for c in s:\n            if c not in tmp:\n                tmp[c] = {}\n            tmp = tmp[c]\n        tmp['#'] = s ## Store full word at '#' to simplify\n\n    def matchPrefix(self, s: str, tmp=None):\n        if not tmp: tmp = self.root\n        for c in s:\n            if c not in tmp:\n                return []\n            tmp = tmp[c]\n\n        rtn = []\n\n        for k in tmp:\n            if k == '#':\n                rtn.append(tmp[k])\n            else:\n                rtn += self.matchPrefix('', tmp[k])\n        return rtn\n\n    def hasWord(self, s: str):\n        tmp = self.root\n        for c in s:\n            if c in tmp:\n                tmp = tmp[c]\n            else:\n                return False\n        return True\n</code></pre> <p>Search example with . for wildcards</p> <pre><code>def search(self, word: str) -&gt; bool:\n    def searchNode(word, node):\n        for i,c in enumerate(word):\n            if c in node:\n                node = node[c]\n            elif c == '.':\n                return any(searchNode(word[i+1:], node[cn]) for cn in node if cn != '$' )\n            else:\n                return False\n        return '$' in node\n    return searchNode(word, self.trie)\n</code></pre>"},{"location":"Code/How_to_Python/#kadane","title":"Kadane","text":"<p>local_maxiumum[i] = max(A[i], A[i] + local_maximum[i-1]) Explanation Determine max subarray sum</p> <pre><code>## input: [-2,1,-3,4,-1,2,1,-5,4]\ndef maxSubArray(self, nums: List[int]) -&gt; int:\n    for i in range(1, len(nums)):\n        if nums[i-1] &gt; 0:\n            nums[i] += nums[i-1]\n    return max(nums) ## max([-2,1,-2,4,3,5,6,1,5]) = 6\n</code></pre>"},{"location":"Code/How_to_Python/#union-find","title":"Union Find","text":"<p>Union Find is a useful algorithm for graph</p> <p>DSU for integers</p> <pre><code>class DSU:\n    def __init__(self, N):\n        self.par = list(range(N))\n\n    def find(self, x): ## Find Parent\n        if self.par[x] != x:\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr: ## If parents are equal, return False\n            return False\n        self.par[yr] = xr ## Give y node parent of x\n        return True ## return True if union occured\n</code></pre> <p>DSU for strings</p> <pre><code>class DSU:\n    def __init__(self):\n        self.par = {}\n\n    def find(self, x):\n        if x != self.par.setdefault(x, x):\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr: return\n        self.par[yr] = xr\n</code></pre> <p>DSU with union by rank</p> <pre><code>class DSU:\n    def __init__(self, N):\n        self.par = list(range(N))\n        self.sz = [1] * N\n\n    def find(self, x):\n        if self.par[x] != x:\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr:\n            return False\n        if self.sz[xr] &lt; self.sz[yr]:\n            xr, yr = yr, xr\n        self.par[yr] = xr\n        self.sz[xr] += self.sz[yr]\n        return True\n</code></pre>"},{"location":"Code/How_to_Python/#fast-power","title":"Fast Power","text":"<p>Fast Power, or Exponential by squaring allows calculating squares in logn time (x^n)2 = x^(2n)</p> <pre><code>def myPow(self, x: float, n: int) -&gt; float:\n    if n &lt; 0:\n        n *= -1\n        x = 1/x\n    ans = 1\n    while n &gt; 0:\n        if n % 2 == 1:\n            ans = ans * x\n        x *= x\n        n = n // 2\n    return ans\n</code></pre>"},{"location":"Code/How_to_Python/#fibonacci-golden","title":"Fibonacci Golden","text":"<p>Fibonacci can be calulated with Golden Ratio</p> <pre><code>def fib(self, N: int) -&gt; int:\n    golden_ratio = (1 + 5 ** 0.5) / 2\n    return int((golden_ratio ** N + 1) / 5 ** 0.5)\n</code></pre>"},{"location":"Code/How_to_Python/#basic-calculator","title":"Basic Calculator","text":"<p>A calculator can be simulated with stack</p> <pre><code>class Solution:\n    def calculate(self, s: str) -&gt; int:\n        s += '$'\n        def helper(stk, i):\n            sign = '+'\n            num = 0\n            while i &lt; len(s):\n                c = s[i]\n                if c == \" \":\n                    i += 1\n                    continue\n                elif c.isdigit():\n                    num = num * 10 + int(c)\n                    i += 1\n                elif c == '(':\n                    num, i = helper([], i+1)\n                else:\n                    if sign == '+':\n                        stk.append(num)\n                    if sign == '-':\n                        stk.append(-num)\n                    if sign == '*':\n                        stk.append(stk.pop() * num)\n                    if sign == '/':\n                        stk.append(int(stk.pop() / num))\n                    i += 1\n                    num = 0\n                    if c == ')':\n                        return sum(stk), i\n                    sign = c\n            return sum(stk)\n        return helper([],0)\n</code></pre>"},{"location":"Code/How_to_Python/#reverse-polish","title":"Reverse Polish","text":"<pre><code>class Solution:\n    def evalRPN(self, tokens: List[str]) -&gt; int:\n        stk = []\n        while tokens:\n            c = tokens.pop(0)\n            if c not in '+-/*':\n                stk.append(int(c))\n            else:\n                a = stk.pop()\n                b = stk.pop()\n                if c == '+':\n                    stk.append(a + b)\n                if c == '-':\n                    stk.append(b-a)\n                if c == '*':\n                    stk.append(a * b)\n                if c == '/':\n                    stk.append(int(b / a))\n        return stk[0]\n</code></pre>"},{"location":"Code/How_to_Python/#resevior-sampling","title":"Resevior Sampling","text":"<p>Used to sample large unknown populations. Each new item added has a 1/count chance of being selected</p> <pre><code>def __init__(self, nums):\n    self.nums = nums\ndef pick(self, target):\n    res = None\n    count = 0\n    for i, x in enumerate(self.nums):\n        if x == target:\n            count += 1\n            chance = random.randint(1, count)\n            if chance == 1:\n                res = i\n    return res\n</code></pre>"},{"location":"Code/How_to_Python/#string-subsequence","title":"String Subsequence","text":"<p>Can find the min number of subsequences of strings in some source through binary search and a dict of the indexes of the source array</p> <pre><code>def shortestWay(self, source: str, target: str) -&gt; int:\n    ref = collections.defaultdict(list)\n    for i,c in enumerate(source):\n        ref[c].append(i)\n\n    ans = 1\n    i = -1\n    for c in target:\n        if c not in ref:\n            return -1\n        offset = ref[c]\n        j = bisect.bisect_left(offset, i)\n        if j == len(offset):\n            ans += 1\n            i = offset[0] + 1\n        else:\n            i = offset[j] + 1\n\n    return ans\n</code></pre>"},{"location":"Code/How_to_Python/#candy-crush","title":"Candy Crush","text":"<p>Removing adjacent duplicates is much more effective with a stack</p> <pre><code>def removeDuplicates(self, s: str, k: int) -&gt; str:\n    stk = []\n    for c in s:\n        if stk and stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] &gt;= k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    ans = []\n    for c in stk:\n        ans.extend([c[0]] * c[1])\n    return \"\".join(ans)\n</code></pre>"},{"location":"Code/How_to_Python/#dutch-flag","title":"Dutch Flag","text":"<p>Dutch National Flag Problem proposed by Edsger W. Dijkstra</p> <pre><code>def sortColors(self, nums: List[int]) -&gt; None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    ## for all idx &lt; p0 : nums[idx &lt; p0] = 0\n    ## curr is an index of element under consideration\n    p0 = curr = 0\n    ## for all idx &gt; p2 : nums[idx &gt; p2] = 2\n    p2 = len(nums) - 1\n\n    while curr &lt;= p2:\n        if nums[curr] == 0:\n            nums[p0], nums[curr] = nums[curr], nums[p0]\n            p0 += 1\n            curr += 1\n        elif nums[curr] == 2:\n            nums[curr], nums[p2] = nums[p2], nums[curr]\n            p2 -= 1\n        else:\n            curr += 1\n</code></pre>"},{"location":"Code/How_to_React/","title":"How to React","text":"<p>React\u00a0is a free and\u00a0open-source\u00a0JavaScript\u00a0library for building user interfaces or\u00a0front-end\u00a0webpage components such as forms along with fields like text areas and buttons.</p> <p>Since its release in 2013, React has been maintained by Meta (formerly Facebook) along with a community of developers and companies.</p> <p>It is component-based. An example of a component could be a form or even just a form field or button on a website. In React, applications are completely built with components.</p> <p>Some of the most persistent issues of front-end development are solved with React, allowing one to build dynamic and interactive web apps with ease. It is fast, scalable, flexible, powerful, and has a robust developer community that\u2019s rapidly growing.</p>"},{"location":"Code/How_to_React/#components","title":"Components","text":"<p>In React,\u00a0components\u00a0are pieces of reusable, independent code that make up the user interface (UI) of the application. Each component comes with one or both of the following:</p> <ul> <li>A\u00a0#state object that contains component data that is expected to change over time.</li> <li>A\u00a0#props object\u00a0with data that can be passed down from parent component to child component.</li> </ul>"},{"location":"Code/How_to_React/#class-components","title":"Class Components","text":"<p>Class components contain a state and use a\u00a0<code>render()</code>\u00a0function to return\u00a0#JSX\u00a0markup. When defined, the\u00a0<code>class</code>\u00a0has to be an extension of the\u00a0<code>React.Component</code>\u00a0class:</p> <pre><code>import React from 'react';\n\nclass ClassComponent extends React.Component {\n  this.state = {\n    property1: \"A string\",\n    property2: 1,\n    property3: true\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        ...\n      &lt;div&gt;\n    )\n  };\n};\n</code></pre>"},{"location":"Code/How_to_React/#function-components","title":"Function Components","text":"<p>Function components are stateless and only use the\u00a0<code>return</code>\u00a0statement. No import statement necessary:</p> <pre><code>function FunctionComponent(props) {\n  return (\n    &lt;div&gt;\n      ...\n    &lt;div&gt;\n  )\n}\n</code></pre>"},{"location":"Code/How_to_React/#arrow-function","title":"Arrow Function","text":"<p>The\u00a0arrow function\u00a0is a feature that was introduced in ES6. It uses the\u00a0<code>=</code>\u00a0and\u00a0<code>&gt;</code>\u00a0characters to define a function like a variable. In React, function components can be defined with this syntax:</p> <pre><code>const FunctionComponent = (props) =&gt; {\n  return (\n    &lt;div&gt;\n      ...\n    &lt;div&gt;\n  )\n}\n</code></pre>"},{"location":"Code/How_to_React/#jsx","title":"JSX","text":"<p>JSX is a syntax extension of JavaScript that combines the JavaScript and HTML-like syntax to provide highly functional, reusable markup. It\u2019s used to create DOM elements which are then rendered in the React DOM.</p> <p>While not required in React, JSX provides a neat visual reqresentation of the application\u2019s UI.</p> <p>A JavaScript file containing JSX will have to be compiled before it reaches a web browser.</p>"},{"location":"Code/How_to_React/#syntax","title":"Syntax","text":"<p>JSX looks a lot like HTML:</p> <pre><code>const headerElement = &lt;h1&gt;This is a header&lt;/h1&gt;;\n</code></pre> <p>In the block of code, we see the similarities between JSX syntax and HTML: they both use the angle bracket opening\u00a0<code>&lt;h1&gt;</code>\u00a0and closing\u00a0<code>&lt;/h1&gt;</code>\u00a0tags.</p> <p>Under the hood, after it\u2019s been processed to regular JavaScript, it looks like this:</p> <pre><code>const headerElement = React.createElement('h1', 'This is a header');\n</code></pre> <p>JavaScript code, such as variables and functions, can be used in JSX, as well:</p> <pre><code>import React from 'react';\n\nconst App = () =&gt; {\n  return (\n    &lt;React.Fragment&gt;\n      &lt;button onClick={() =&gt; 'The button was clicked!'}&gt;Click!&lt;/button&gt;\n    &lt;/React.Fragment&gt;\n  );\n};\n</code></pre>"},{"location":"Code/How_to_React/#jsx-attributes","title":"JSX Attributes","text":"<p>The syntax of JSX attributes closely resembles that of HTML attributes.</p> <pre><code>const example = &lt;h1 id=\"example\"&gt;JSX Attributes&lt;/h1&gt;;\n</code></pre> <p>In the block of code, inside of the opening tag of the\u00a0<code>&lt;h1&gt;</code>\u00a0JSX element, we see an\u00a0<code>id</code>\u00a0attribute with the value\u00a0<code>\"example\"</code>.</p>"},{"location":"Code/How_to_React/#nested-jsx-elements","title":"Nested JSX Elements","text":"<p>In order for the code to compile, a JSX expression must have exactly one outermost element. In the below block of code, the\u00a0<code>&lt;a&gt;</code>\u00a0tag is the outermost element.</p> <pre><code>const myClasses = (\n  &lt;a href=\"https://www.twitter.com\"&gt;\n    &lt;h1&gt;Sign Up!&lt;/h1&gt;\n  &lt;/a&gt;\n);\n</code></pre>"},{"location":"Code/How_to_React/#multiline-jsx-expression","title":"Multiline JSX Expression","text":"<p>A JSX expression that spans multiple lines must be wrapped in parentheses\u00a0<code>(</code>\u00a0and\u00a0<code>)</code>.</p> <pre><code>const myList = (\n  &lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n  &lt;/ul&gt;\n);\n</code></pre> <p>Here, we see the opening parentheses on the same line as the constant declaration, before the JSX expression begins. We see the closing parentheses on the line following the end of the JSX expression.</p>"},{"location":"Code/How_to_React/#jsx-with-map-method","title":"JSX with\u00a0<code>.map()</code>\u00a0Method","text":"<p>The array method\u00a0<code>.map()</code>\u00a0comes up often in React. It\u2019s good to get in the habit of using it alongside JSX.</p> <p>If you want to create a list of JSX elements from a given array, then<code>.map()</code>\u00a0over each element in the array, returning a list item for each one.</p> <pre><code>const strings = ['Home', 'Shop', 'About Me'];\n\nconst listItems = strings.map((string) =&gt; &lt;li&gt;{string}&lt;/li&gt;);\n\n&lt;ul&gt;{listItems}&lt;/ul&gt;;\n</code></pre>"},{"location":"Code/How_to_React/#jsx-conditionals","title":"JSX Conditionals","text":"<p>JSX does not support\u00a0<code>if</code>/<code>else</code>\u00a0syntax in embedded JavaScript. There are three ways to express conditionals for use with JSX elements:</p> <p>Using Ternary Operator</p> <p>Using ternary operator within curly braces in JSX:</p> <pre><code>const headline = &lt;h1&gt;{age &gt;= drinkingAge ? 'Buy Drink' : 'Do Teen Stuff'}&lt;/h1&gt;;\n</code></pre> <p>Using\u00a0<code>if</code>\u00a0Statement</p> <p>Using\u00a0<code>if</code>/<code>else</code>\u00a0statement outside of JSX element:</p> <pre><code>let text;\n\nif (age &gt;= drinkingAge) {\n  text = 'Buy Drink';\n} else {\n  text = 'Do Teen Stuff';\n}\n\nconst headline = &lt;h1&gt;{text}&lt;/h1&gt;;\n</code></pre> <p>Using\u00a0<code>&amp;&amp;</code>\u00a0Operator</p> <p>Using\u00a0<code>&amp;&amp;</code>\u00a0AND operator:</p> <pre><code>// Renders as empty div if length is 0\nconst unreadMessages = ['hello?', 'remember me!'];\n\nconst update = (\n  &lt;div&gt;\n    {unreadMessages.length &gt; 0 &amp;&amp; (\n      &lt;h1&gt;You have {unreadMessages.length} unread messages.&lt;/h1&gt;\n    )}\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"Code/How_to_React/#context","title":"Context","text":"<p>The\u00a0Context\u00a0API in\u00a0#React\u00a0is an easy way to manage the state of some information. It lets the parent\u00a0#Components\u00a0pass the information down to any other component further down the tree hierarchy without needing to pass it as a\u00a0#Props It can be used in combination with the\u00a0#useState()\u00a0hook to change the state. Typical use cases are passing themes (e.g. color, paddings, font sizes, etc.) or the authenticated user.</p>"},{"location":"Code/How_to_React/#benefit","title":"Benefit","text":"<p>Normally, information on values is passed between components as props. But sometimes it has to be passed down several levels in the tree, also called\u00a0<code>prop drilling</code>. In larger applications, this can be complicated and lead to code that is hard to maintain. With\u00a0<code>Context</code>\u00a0this is no longer necessary.</p>"},{"location":"Code/How_to_React/#api-implementation","title":"API Implementation","text":"<p>To implement the Context API, it\u2019s necessary to first create the Context using\u00a0#createContext(). Afterward, the\u00a0#useContext()\u00a0hook can be used to read the context from the appropriate component.</p>"},{"location":"Code/How_to_React/#createcontext","title":"createContext()","text":"<p>The\u00a0createContext()\u00a0function is used to create an instance of the\u00a0#Context API\u00a0that other components can read. It should be used in combination with the\u00a0#useContext()\u00a0hook.</p> <p>Syntax</p> <pre><code>import { createContext } from 'react';\n\nconst MyContext = createContext(defaultValue);\n</code></pre> <ul> <li>The\u00a0<code>defaultValue</code>\u00a0can either be another context made from the\u00a0<code>createContext()</code>\u00a0method or a primitive\u00a0data type, including\u00a0<code>null</code>.</li> <li><code>createContext()</code>\u00a0returns a context object that should be named in\u00a0<code>PascalCase</code>.</li> </ul> <p>To pass the context down further, it is necessary to wrap the component tree in a context provider. A\u00a0<code>value</code>\u00a0prop needs to be passed inside the provider.</p> <p>Example</p> <pre><code>export default function App() {\n  const theme = 'light';\n\n  return (\n    &lt;ThemeContext.Provider value={theme}&gt;\n      &lt;Container /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n</code></pre> <p>Components have to use the\u00a0#useContext()\u00a0hook to get the context information.</p> <p>Note: In legacy code, there may not only be\u00a0<code>Providers</code>\u00a0but also\u00a0<code>Consumers</code>\u00a0that wrap the components. This is no longer recommended.</p>"},{"location":"Code/How_to_React/#hooks","title":"Hooks","text":"<p>In React,\u00a0hooks\u00a0are\u00a0functions\u00a0that give class-like abilities to function\u00a0#Components, including\u00a0#State\u00a0and side-effects.</p> <p>There are a few rules when using hooks, including the following:</p> <ul> <li>Hooks must be called from React functions (i.e. components or custom hooks) and not from a regular JavaScript function.</li> <li>Hooks should not be called inside of a loop, condition, or nested function. Instead, hooks should be called at the top level of a React function so they render in the same order every time.</li> </ul> <p>While there are standard React hooks, like\u00a0<code>useState()</code>\u00a0and\u00a0<code>useEffect()</code>, there are also custom-made hooks!</p> <pre><code>import React, { useHook } from 'react';\n</code></pre> <p>Hooks are imported at the top of a file from the\u00a0<code>react</code>\u00a0library:</p> <p>Note:\u00a0The code snippet above is purely pseudocode and useHook is not an actual React hook.</p>"},{"location":"Code/How_to_React/#usecontext","title":"useContext()","text":"<p>The\u00a0<code>useContext()</code>\u00a0hook subscribes a child #Components\u00a0to a\u00a0#Context\u00a0which includes its\u00a0<code>value</code> #Props\u00a0that exists further up the component tree.</p> <p>Syntax</p> <p>The components can read the\u00a0<code>Context</code>\u00a0value using the\u00a0<code>useContext()</code>\u00a0hook:</p> <pre><code>const myValue = useContext(MyContext);\n</code></pre> <p>The\u00a0<code>useContext()</code>\u00a0hook searches for the closest provider above the component in which it was called within the tree hierarchy. Therefore, providers within the same component are ignored. Additionally,\u00a0<code>useContext</code>\u00a0needs to be imported from\u00a0<code>react</code>\u00a0at the top of the file.</p> <p>Context is passed to other components by wrapping them in a context provider component. Inside the component, a\u00a0<code>value</code>\u00a0prop has to be created and assigned a value:</p> <pre><code>&lt;MyContext.Provider value={theme}&gt;\n  {/*\n    Child components that subscribe to the context\n    through the context provider.\n  */}\n&lt;/MyContext.Provider&gt;\n</code></pre> <p>Example 1</p> <p>The following example shows a single file,\u00a0<code>App.js</code>, and how a background theme could be passed down to all child components via the\u00a0<code>useContext()</code>\u00a0hook. The\u00a0<code>value</code>\u00a0prop in this case is the\u00a0<code>theme</code>\u00a0state:</p> <pre><code>// App.js\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nexport default function App() {\n  const [theme, setTheme] = useState('white');\n\n  return (\n    &lt;ThemeContext.Provider value={theme}&gt;\n      &lt;Button setTheme={setTheme} /&gt;\n      &lt;Container /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nfunction Button(props) {\n  const theme = useContext(ThemeContext);\n  const textColor = theme === 'white' ? 'black' : 'white';\n\n  return (\n    &lt;button\n      style={{\n        background: theme,\n        color: textColor,\n        border: `1px solid ${textColor}`,\n        borderRadius: 6,\n      }}\n      onClick={() =&gt; {\n        theme === 'white' ? props.setTheme('black') : props.setTheme('white');\n      }}\n    &gt;\n      Click me to change the color\n    &lt;/button&gt;\n  );\n}\n\nfunction Container() {\n  const theme = useContext(ThemeContext);\n  const textColor = theme === 'white' ? 'black' : 'white';\n\n  return (\n    &lt;div\n      style={{\n        background: theme,\n        color: textColor,\n        border: `1px solid ${textColor}`,\n        borderRadius: 6,\n      }}\n    &gt;\n      &lt;h2&gt;I will change my color!&lt;/h2&gt;\n      &lt;h6&gt;So will the background!&lt;/h6&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>The\u00a0<code>useContext()</code>\u00a0hook was used to apply a\u00a0<code>ThemeContext</code>\u00a0to the\u00a0<code>&lt;Container&gt;</code>\u00a0component to switch the colors of the text and background between black and white.</p> <p>The\u00a0<code>theme</code>\u00a0state is changed through the\u00a0<code>setter</code>\u00a0function that is passed to the\u00a0<code>Button</code>\u00a0component as a prop. The component uses it in the\u00a0<code>onClick</code>\u00a0event. In the example above, the theme is changed to black if the theme is white and vice versa.</p> <p>Example 2</p> <p>The following example shows how the\u00a0<code>useContext()</code>\u00a0hook can subscribe a component to a context imported from another file:</p> <pre><code>// App.js\nimport { createContext } from 'react';\nimport { Display } from './Display';\n\nexport const NotificationContext = createContext();\n\nexport function App() {\n  const notifications = [\n    'This is awesome!',\n    'And so versatile!',\n    'I really like this',\n  ];\n\n  return (\n    &lt;NotificationContext.Provider value={notifications}&gt;\n      &lt;Display /&gt;\n    &lt;/NotificationContext.Provider&gt;\n  );\n}\n</code></pre> <p>Now, other files can import the\u00a0<code>NotificationContext</code>, along with the exported\u00a0<code>Provider</code>, to be applied to their components:</p> <pre><code>// Display.js\nimport { useContext } from 'react';\nimport { NotificationContext } from './context.js';\n\nexport function Display() {\n  const notifications = useContext(NotificationContext);\n  return (\n    &lt;div&gt;\n      {notifications.map((notification) =&gt; {\n        &lt;h2 key={notification}&gt;{notification}&lt;/h2&gt;;\n      })}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"Code/How_to_React/#useeffect","title":"useEffect()","text":"<p>The\u00a0<code>useEffect()</code>\u00a0hook takes in a\u00a0function and an\u00a0array. The function will be executed after the current render process finishes and only if the elements inside the array has changed from the previous render.</p> <p>This hook can be used to run side effects (call to an external API, update another state, etc.) or attach event listeners.</p> <p>Syntax</p> <p>The\u00a0<code>useEffect()</code>\u00a0hook accepts a function and an array of dependencies as its first and second parameter respectively. This hook doesn\u2019t return any value.</p> <pre><code>useEffect(\n  () =&gt; {\n    // Runs side effect here\n  },\n  [] // Array of dependencies\n);\n</code></pre> <p>If the array of dependencies is empty, the effect will only run once when the component mounts.</p> <p>The function passed as the first parameter may also return a \u201ccleanup function\u201d that is executed before the next scheduled effect runs. This chance can be used to remove event listeners or abort an API call.</p> <pre><code>useEffect(\n  () =&gt; {\n    // Runs side effect here\n\n    return () =&gt; {\n      // Do clean up here\n    };\n  },\n  [] // Array of dependencies\n);\n</code></pre> <p>Example</p> <p>In the following example, the\u00a0<code>useEffect()</code>\u00a0hook attaches a\u00a0<code>'scroll'</code>\u00a0listener to the\u00a0<code>window</code>\u00a0object and removes it with a cleanup function:</p> <pre><code>import React, { useEffect } from 'react';\n\nfunction PageWrapper() {\n  useEffect(() =&gt; {\n    function scrollHandler() {\n      console.log('Current scroll position is', window.scrollTop);\n    }\n\n    window.addEventListener('scroll', scrollHandler);\n\n    return () =&gt; window.removeEventListener('scroll', scrollHandler);\n  }, []); // Runs only once when component mounts\n\n  return &lt;div&gt;Page content...&lt;/div&gt;;\n}\n</code></pre>"},{"location":"Code/How_to_React/#useref","title":"useRef()","text":"<p>The\u00a0<code>useRef()</code>\u00a0hook in React is used to create mutable references to elements or values within functional #Components. It enables direct access and interaction with DOM elements, allowing the persistence of data across renders without triggering re-renders.</p> <p>Syntax</p> <p>In the\u00a0<code>useRef()</code>\u00a0hook, the\u00a0<code>initialValue</code>\u00a0is an optional parameter that can be provided when creating a new ref object.</p> <p><code>initialValue</code>\u00a0allows the initialization of the\u00a0<code>.current</code>\u00a0property of the ref object with an initial value.</p> <p>This hook can be utilized as follows :</p> <pre><code>import React, { useRef } from 'react';\n\nconst myRef = useRef(initialValue);\n</code></pre> <p>When\u00a0<code>useRef()</code>\u00a0is called, it returns a ref object, and this ref object has a\u00a0<code>.current</code>\u00a0property.</p> <p>If no\u00a0<code>initialValue</code>\u00a0is provided,\u00a0<code>myRef.current</code>\u00a0will be null by default.</p> <p>Example 1</p> <p>In this example, the\u00a0<code>useRef()</code>\u00a0hook is used to store the previous value of the count state, allowing the display of the current and previous count values without triggering re-renders.</p> <pre><code>import React, { useState, useRef, useEffect } from 'react';\n\nfunction PreviousValue() {\n  const [count, setCount] = useState(0);\n  const prevCountRef = useRef();\n\n  useEffect(() =&gt; {\n    prevCountRef.current = count;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Current Count: {count}&lt;/p&gt;\n      &lt;p&gt;Previous Count: {prevCountRef.current}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>In the code example, useRef is used to create the\u00a0<code>prevCountRef</code>\u00a0reference to store and access the previous value of the count state variable.</p> <p>To store the previous count value in a state variable (using\u00a0<code>useState()</code>), each time the\u00a0<code>Increment</code>\u00a0button is clicked and the count changes, it would trigger a re-render. Because changing state variables causes components to re-render.</p> <p>There is no need to re-render the component just to track the previous value; it\u2019s only necessary to update the value without causing a re-render. So the\u00a0<code>useRef()</code>\u00a0hook is used.</p>"},{"location":"Code/How_to_React/#usestate","title":"useState()","text":"<p>The\u00a0<code>useState()</code>\u00a0hook returns the current #State\u00a0of the #Components\u00a0and its setter function. State must be changed through the setter only and not be mutated directly as it may cause unexpected behavior.</p> <p>Syntax</p> <pre><code>import React, { useState } from 'react';\n\nconst [state, setState] = useState(initialValue);\n</code></pre> <p>When the component is first rendered, its\u00a0<code>state</code>\u00a0is assigned an\u00a0<code>initialValue</code>\u00a0through the\u00a0<code>useState()</code>\u00a0hook. If one is not provided, the default value is\u00a0<code>undefined</code>. Afterwards, the\u00a0<code>setState</code>\u00a0function can change the value of\u00a0<code>state</code>\u00a0and trigger a re-render of the component.</p> <p>The\u00a0<code>state</code>\u00a0must be changed only through the\u00a0<code>setState</code>\u00a0function and not be mutated directly as this may cause unexpected behavior.</p> <p>The return value of\u00a0<code>useState()</code>\u00a0is an array\u00a0whose elements (the state and setter function) can be accessed through destructuring.</p> <p>Note:\u00a0The name of the setter function should correlate with the name of the\u00a0<code>state</code>\u00a0value (e.g.,\u00a0<code>const [time, setTime] = useState(0);</code>).</p> <p>Example 1</p> <p>A controlled input whose value depends on the\u00a0<code>name</code>\u00a0state and changes it through\u00a0<code>setName</code>\u00a0setter on\u00a0<code>onChange</code>\u00a0event.</p> <pre><code>import React, { useState } from 'react';\n\nfunction ProfileName() {\n  const [name, setName] = useState('');\n\n  function handleChange(event) {\n    /*\n     Sets the name state to the value of\n     the input after the onChange event.\n    */\n    setName(event.currentTarget.value);\n  }\n\n  return &lt;input value={name} onChange={handleChange} /&gt;;\n}\n</code></pre> <p>Example 2</p> <p>In cases where the component state is an array or\u00a0object, the setter function must update with a modified copy of the state, not the original.</p> <p>The following example involves deleting an item from the\u00a0<code>foods</code>\u00a0state array and updating with\u00a0<code>filteredItems</code>\u00a0through the\u00a0<code>onClick</code>\u00a0event:</p> <pre><code>import React, { useState } from 'react';\n\nfunction FavoriteFoodList() {\n  const [foods, setFoods] = useState(['pizza', 'hot dog']);\n\n  function handleDeleteFood(deletedIndex) {\n    /*\n      Instead of changing the foods array directly,\n      the .filter() method can be used to return a \n      copy that excludes the deleted item.\n    */\n    const filteredItems = foods.filter((food, index) =&gt; index !== deletedIndex);\n\n    setFoods(filteredItems);\n  }\n\n  return (\n    &lt;div&gt;\n      {foods.map((item, index) =&gt; (\n        &lt;button onClick={() =&gt; handleDeleteFood(index)}&gt;{item}&lt;/button&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"Code/How_to_React/#lifecycle-methods","title":"Lifecycle Methods","text":"<p>In React,\u00a0lifecycle methods\u00a0are unique event listeners that listen for changes during certain points during a #Components\u2018s lifecycle. A component\u2019s lifecycle usually runs in this order:</p> <ol> <li>Rendering/mounting a component to the DOM for the first time.</li> <li>Updating an existing component.</li> <li>Catching any errors associated with a component render-gone-wrong.</li> <li>Unmounting a component and removing it from the DOM.</li> </ol> <p>Lifecycle methods were originally exclusive to class components. But thanks to React #Hooks, even functional component\u2019s can work with their lifecycle.</p>"},{"location":"Code/How_to_React/#renderingmounting-a-component","title":"Rendering/Mounting a Component","text":"<p>After a component is first created and\u00a0<code>render()</code>ed to the DOM, it is \u201cmounted\u201d. The method used here is called\u00a0<code>componentDidMount()</code>, which occurs after the component is rendered.</p> <pre><code>import React from \"react\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    console.log(\"Component has mounted!\")\n  }\n\n  render() {\n    console.log(\"Rendering...\")\n    return(\n      &lt;React.Fragment&gt;\n      &lt;React.Fragment&gt;\n    )\n  }\n}\n</code></pre> <p>And the output should be this:</p> <pre><code>Rendering...\nComponent has mounted!\n</code></pre>"},{"location":"Code/How_to_React/#updating-a-component","title":"Updating a Component","text":"<p>When changes are made to a component, usually to its\u00a0<code>state</code>, it is in the update-phase of its lifecycle. This is handled by the\u00a0<code>componentDidUpdate()</code>\u00a0method.</p> <p>Using the common\u00a0<code>&lt;Counter&gt;</code>\u00a0example, and some custom\u00a0<code>increase()</code>\u00a0and\u00a0<code>decrease()</code>\u00a0event methods to change its\u00a0<code>count</code>\u00a0state,\u00a0<code>compomentDidUpdate()</code>\u00a0will execute immediately after either of these methods executes:</p> <pre><code>import React from 'react';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n    this.increment = () =&gt; this.setState({ count: this.state.count + 1 });\n    this.decrement = () =&gt; this.setState({ count: this.state.count - 1 });\n  }\n\n  componentDidMount() {\n    console.log('Component has mounted.');\n  }\n\n  componentDidUpdate() {\n    console.log('Component updated. Count is now ' + this.state.count + '.');\n  }\n\n  render() {\n    console.log('Rendering...');\n    return (\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;Count: {this.state.count}&lt;/h1&gt;\n        &lt;button onClick={this.increment}&gt;+1&lt;/button&gt;\n        &lt;button onClick={this.decrement}&gt;-1&lt;/button&gt;\n      &lt;/React.Fragment&gt;\n    );\n  }\n}\n</code></pre> <p>Assuming we clicked the \u201c+\u201d button twice, which causes a re-<code>render()</code>\u00a0each time, our output would be this:</p> <pre><code>Rendering...\nComponent has mounted.\nRendering...\nComponent updated. Count is now 1.\nRendering...\nComponent updated. Count is now 2.\n</code></pre>"},{"location":"Code/How_to_React/#catching-errors-in-components","title":"Catching Errors in Components","text":"<p>Prior to React 16, there were no features that handled errors being thrown during the component tree\u2019s \u201crendering\u201d phase. When this occurred, the following would happen:</p> <ul> <li>The entire app would crash and all components would ummount.</li> <li>A trace report of the error would replace the UI.</li> </ul> <p>This prompted the creation of the following lifecycle methods for handling errors in React class components:</p> <ul> <li><code>static getDerivedStateFromError(error)</code>\u00a0for returning an updated state to allow a render of fallback UI.</li> <li><code>componentDidCatch(error, errorInfo)</code>\u00a0for logging error information to the console, including a component stack tracing back to the source of the error.</li> </ul> <p>Any class component that uses either or both of these methods is considered to be an\u00a0Error Boundary component\u00a0because they are catching errors thrown from their child components.</p> <pre><code>import React from \"react\";\n\nclass CounterThatThrowsError extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0\n    }\n\n    this.increment = () =&gt; this.setState({count: this.state.count + 1})\n    this.decrement = () =&gt; this.setState({count: this.state.count - 1})\n  }\n\n  render() {\n    if(this.state.count === 3) throw new Error(\"Crashed!\")\n    return(\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;Count: {this.state.count}&lt;/h1&gt;\n        &lt;button onClick={this.increment}&gt;+1&lt;/button&gt;\n        &lt;button onClick={this.decrement}&gt;-1&lt;/button&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false,\n      error: null\n    }\n  }\n\n  getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n      error: error\n    }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error.name + \": \" error.message)\n    // Output: Error: Crashed!\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return (\n        &lt;div style={{ marginLeft: \"2em\" }}&gt;\n          &lt;h1&gt;Oh no! Something's gone wrong!&lt;/h1&gt;\n        &lt;/div&gt;\n      )\n    }\n\n    return(\n      &lt;div className=\"App\"&gt;\n        &lt;Counter /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre> <p>Note: <code>getDerivedStateFromError()</code>\u00a0and\u00a0<code>componentDidCatch()</code>\u00a0are only able to work with errors strictly related to their child components. They are not compatible with errors related to event handlers.</p>"},{"location":"Code/How_to_React/#unmounting-a-component","title":"Unmounting a Component","text":"<p>When a component is unmounted, it is considered to be at the end of its lifecycle within the React application. The associated lifecycle method is\u00a0<code>componentWillUnmount()</code>, which executes when React anticipates its host-component will be destroyed.</p> <p>Going back to the previous example where the\u00a0<code>&lt;Counter&gt;</code>\u00a0component throws an error after is state is equal to 3, it is thereby destroyed and replaced by new a new UI inside of its parent component,\u00a0<code>&lt;App&gt;</code>.</p> <pre><code>import React from \"react\";\n\nclass CounterThatThrowsError extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0\n    }\n\n    this.increment = () =&gt; this.setState({count: this.state.count + 1})\n    this.decrement = () =&gt; this.setState({count: this.state.count - 1})\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter has been unmounted!\")\n    // Output: Counter has been unmounted!\n  }\n\n  render() {\n    if(this.state.count === 3) throw new Error(\"Crashed!\")\n    return(\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;Count: {this.state.count}&lt;/h1&gt;\n        &lt;button onClick={this.increment}&gt;+1&lt;/button&gt;\n        &lt;button onClick={this.decrement}&gt;-1&lt;/button&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false,\n      error: null\n    }\n  }\n\n  getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n      error: error\n    }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error.name + \": \" error.message)\n    // Output: Error: Crashed!\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return (\n        &lt;div style={{ marginLeft: \"2em\" }}&gt;\n          &lt;h1&gt;Oh no! Something's gone wrong!&lt;/h1&gt;\n        &lt;/div&gt;\n      )\n    }\n\n    return(\n      &lt;div className=\"App\"&gt;\n        &lt;Counter /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre>"},{"location":"Code/How_to_React/#props","title":"Props","text":"<p>In React, components are able to use props, or \u201cproperties\u201d, to display and share data throughout the application. In other words, props is the information that gets passed from one component to another.</p> <p>Parent components can pass props to their child components, but not the other way around. Props can be many data types, including:</p> <ul> <li>Numbers</li> <li>Strings</li> <li>Functions</li> <li>Objects</li> </ul>"},{"location":"Code/How_to_React/#syntax_1","title":"Syntax","text":"<pre><code>import React from 'react';\n\nclass ParentComponent extends React.Component {\n  render() {\n    return &lt;ChildComponent prop1=\"Mike\" prop2=\"piza\"&gt;\n  }\n}\n\nfunction ChildComponent(props) {\n  return &lt;h2&gt;This is prop1: {props.prop1}. This is prop2: {props.prop2}.&lt;/h2&gt;\n}\n</code></pre>"},{"location":"Code/How_to_React/#thisprops","title":"<code>this.props</code>","text":"<p>Every component has something called\u00a0<code>props</code>.</p> <p>A component\u2019s\u00a0<code>props</code>\u00a0is an object. It holds information about that component.</p> <p>To see a component\u2019s\u00a0<code>props</code>\u00a0object, you use the expression\u00a0<code>this.props</code>. Here\u2019s an example of\u00a0<code>this.props</code>\u00a0being used inside of a render method:</p> <pre><code>render() {\n  // Printing the props object\n  console.log(this.props);\n  return &lt;h1&gt;Hello world&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"Code/How_to_React/#pass-props-to-a-component","title":"Pass\u00a0<code>props</code>\u00a0to a Component","text":"<p>You can pass information to a React component. How? By giving that component an attribute:</p> <pre><code>&lt;MyComponent foo=\"bar\" /&gt;\n</code></pre> <p>Let\u2019s say that you want to pass a component the message,\u00a0<code>\"This is some top secret info.\"</code>. Here\u2019s how you could do it:</p> <pre><code>&lt;Example message=\"This is some top secret info.\" /&gt;\n</code></pre> <p>As you can see, to pass information to a component, you need a name for the information that you want to pass.</p> <p>In the above example, we used the name\u00a0<code>message</code>. You can use any name you want.</p> <p>If you want to pass information that isn\u2019t a string, then wrap that information in curly braces. Here\u2019s how you would pass an array:</p> <pre><code>&lt;Greeting myInfo={['top', 'secret', 'lol']} /&gt;\n</code></pre> <p>In this next example, we pass several pieces of information to\u00a0<code>&lt;Greeting /&gt;</code>. The values that aren\u2019t strings are wrapped in curly braces:</p> <pre><code>&lt;Greeting name=\"Frarthur\" town=\"Flundon\" age={2} haunted={false} /&gt;\n</code></pre>"},{"location":"Code/How_to_React/#displaying-the-props","title":"Displaying the Props","text":"<p>You will often want a component to display the information that you pass.</p> <p>Here\u2019s how to make a component display passed-in information:</p> <ol> <li>Find the component class that is going to receive that information.</li> <li>Include\u00a0<code>this.props.name-of-information</code>\u00a0in that component class\u2019s render method\u2019s\u00a0<code>return</code>\u00a0statement.</li> </ol> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Greeting extends React.Component {\n  render() {\n    return &lt;h1&gt;Hi there, {this.props.firstName}!&lt;/h1&gt;;\n  }\n}\n\nReactDOM.render(&lt;Greeting firstName=\"Rybu\" /&gt;, document.getElementById('app'));\n</code></pre>"},{"location":"Code/How_to_React/#routing","title":"Routing","text":"<p>In React, routing is most commonly achieved through React Router.</p> <p>React Router is a third-party library that allow components to be used as routed endpoints within an application. This library comes in three packages:</p> <ul> <li><code>react-router</code>: For core functionality</li> <li><code>react-router-native</code>: React Native version</li> <li><code>react-router-dom</code>: Recommended for web applications</li> </ul> <p>Install the newest version with\u00a0<code>npm</code>:</p> <pre><code>npm install react-router-dom@latest\n</code></pre> <p>The newest version of React Router is\u00a0v6, which comes with many breaking changes including:</p> <ul> <li>Using a\u00a0<code>&lt;Routes /&gt;</code>\u00a0component instead of a\u00a0<code>&lt;Switch /&gt;</code>\u00a0component for\u00a0<code>&lt;Route /&gt;</code>\u00a0configuration.</li> <li>Using the\u00a0<code>element</code>\u00a0attribute instead of\u00a0<code>component</code>\u00a0when passing a JSX to a\u00a0<code>&lt;Link /&gt;</code>.</li> </ul>"},{"location":"Code/How_to_React/#example","title":"Example","text":"<p>Below, a\u00a0<code>&lt;BrowserRouter/&gt;</code>\u00a0(aliased as\u00a0<code>&lt;Router/&gt;</code>) is used to map the navigation\u00a0<code>&lt;Link/&gt;</code>\u00a0components to a\u00a0<code>&lt;Routes/&gt;</code>\u00a0component. The\u00a0<code>&lt;Routes/&gt;</code>\u00a0renders the appropriate\u00a0<code>&lt;Route&gt;</code>\u00a0based on the most specific-matching\u00a0<code>path</code>\u00a0among all possible matches.</p> <pre><code>import Home from './Home';\nimport About from './About';\nimport Projects from './Projects';\nimport Contact from './Contact';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Router&gt;\n        &lt;nav&gt;\n          &lt;ul&gt;\n            &lt;Routes&gt;\n              &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n              &lt;Route path=\"/blog\" element={&lt;Blog /&gt;} /&gt;\n              &lt;Route path=\"/contact\" element={&lt;Contact /&gt;} /&gt;\n              &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n            &lt;/Routes&gt;\n            &lt;li&gt;\n              &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n              &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n              &lt;Link to=\"/projects\"&gt;Projects&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n              &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n            &lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/nav&gt;\n      &lt;/Router&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst Home = () =&gt; {\n  return &lt;h2&gt;Home&lt;/h2&gt;;\n};\n\nconst About = () =&gt; {\n  return &lt;h2&gt;About&lt;/h2&gt;;\n};\n\nconst Projects = () =&gt; {\n  return &lt;h2&gt;Projects&lt;/h2&gt;;\n};\n\nconst Contact = () =&gt; {\n  return &lt;h2&gt;Contact&lt;/h2&gt;;\n};\n\nexport default App;\n</code></pre>"},{"location":"Code/How_to_React/#state","title":"State","text":"<p>The\u00a0<code>state</code>\u00a0object holds data in a #Components\u00a0that is expected to change over time. It is created and maintained by the component itself, and when it changes, the component re-renders.</p> <p>#Props are passed down by parent components, whereas state is created and maintained by the component itself.</p> <p>Class and functional components handle state differently. Functional components use #Hooks\u00a0to manage state. The following will address how class components manage state.</p>"},{"location":"Code/How_to_React/#syntax_2","title":"Syntax","text":"<pre><code>class ComponentName extends React.Component {\n  // With constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      property: value,\n    };\n  }\n\n  // With property initializer\n  state = {\n    property: value,\n  };\n\n  render() {\n    return (\n      /* Value of property is rendered */\n      &lt;div&gt;{this.state.property}&lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>The snippet above features two common ways of initializing state in a class component:</p> <ul> <li>The\u00a0<code>constructor()</code>\u00a0method assigns a new object to\u00a0<code>this.state</code>.</li> <li>A\u00a0<code>state</code>\u00a0object is directly assigned with property initializers.</li> </ul> <p>Only one of these two ways can be applied when making a class component.</p>"},{"location":"Code/How_to_React/#example_1","title":"Example","text":"<p>The following example initializes the\u00a0<code>state</code>\u00a0object in the component\u2019s\u00a0<code>constructor()</code>\u00a0and returns its value in the\u00a0<code>render()</code>\u00a0method:</p> <p><pre><code>class Car extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      brand: 'Chevrolet',\n      model: 'Malibu',\n      color: 'white',\n      year: 1998,\n    };\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;My First Car&lt;/h1&gt;\n        &lt;p&gt;\n          It is a {this.state.color}\n          {this.state.brand}\n          {this.state.model}\n          made in {this.state.year}. \ud83d\ude99\n        &lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> With property initializers, it is not necessary to set state or bind methods in the constructor:</p> <pre><code>class Car extends React.Component {\n  // No need to use constructor\n  state = {\n    brand: 'Chevrolet',\n    model: 'Malibu',\n    color: 'white',\n    year: 1998,\n  };\n\n  // Same renderd JSX\n}\n</code></pre>"},{"location":"Code/How_to_React/#virtual-dom","title":"Virtual DOM","text":"<p>In React,\u00a0virtual DOM\u00a0is a conceptual representation of the actual DOM object, like a lightweight copy. A virtual DOM object has the same properties as a real DOM object, but it lacks the real thing\u2019s power to directly change what\u2019s on the screen.</p> <p>Manipulating the DOM is slow. Manipulating the virtual DOM is much faster, because nothing gets drawn onscreen. Think of manipulating the virtual DOM as editing a blueprint, as opposed to moving rooms in an actual house.</p> <p>With virtual DOM, when changes are made to the UI and there\u2019s a re-render, they are compared to the relevant branches in the DOM-tree. Then, the changes are applied to the DOM-tree.</p> <p></p> <p>The virtual DOM is not to be confused with the Shadow DOM, or any other technology or concept.</p>"},{"location":"Code/How_to_React/#how-it-works","title":"How It Works","text":"<p>During a render of a\u00a0#JSX\u00a0element, every single virtual DOM object gets updated. This sounds incredibly inefficient, but the cost is insignificant because the virtual DOM can update so quickly. Once the virtual DOM has updated, then React compares the virtual DOM with a virtual DOM snapshot that was taken right before the update.</p> <p>By comparing the new virtual DOM with a pre-update version, React figures out exactly which virtual DOM objects have changed. This process is called \u201cdiffing.\u201d</p> <p>Once React knows which virtual DOM objects have changed, then React updates those objects, and only those objects, on the real DOM. For example, if changes were made to a list item, React would know to rebuild the one checked-off list item, and leave the rest of the list alone.</p> <p>This makes a big difference! React can update only the necessary parts of the DOM. React\u2019s reputation for performance comes largely from this innovation.</p> <p>In summary, here\u2019s what happens trying to update the DOM in React:</p> <ol> <li>The entire virtual DOM gets updated.</li> <li>The virtual DOM gets compared to what it looked like before it was updated. React figures out which objects have changed.</li> <li>Only the objects that were changed get updated on the real DOM.</li> <li>Changes on the real DOM cause the screen to change.</li> </ol>"},{"location":"Code/How_to_React_Native/","title":"How to React Native","text":"<p>Components\u00a0are units of reusable code that describe the appearance and behavior of a mobile application\u2019s user inteface\u00a0(UI).</p>"},{"location":"Code/How_to_React_Native/#ui-views","title":"UI Views","text":"<p>Represented as small, rectangular, and oftentimes nestable elements, views can display text, media, and respond to user input. React Native invokes views in their native environment with JavaScript.</p> <p></p>"},{"location":"Code/How_to_React_Native/#native-components","title":"Native Components","text":"<p>These previously mentioned platform-backed components are called Native Components. Whether iOS or Android, React Native creates the corresponding, platform-specific view(s) for these components at runtime. Therefore, React Native apps look, feel, and perform like Native apps.</p>"},{"location":"Code/How_to_React_Native/#core-components","title":"Core Components","text":"<p>React Native offers a set of essential, ready-to-use native components called core components. There are many components ranging from text to activity indicators. Most apps will use these core components:</p> Core Component Description <code>&lt;View&gt;</code> A common container component that supports layout with flexbox, styles, touch handling, accessibility controls, and can contain other components inside such as other views. It is analogous to a non-scrolling\u00a0<code>&lt;div&gt;</code>\u00a0HTML element. <code>&lt;Text&gt;</code> Displays text and supports styles and touch events. It is analogous to a\u00a0paragraph element. <code>&lt;Image&gt;</code> Displays different types of images, including from network, static, local disks, and from \u2018data:\u2019\u00a0URI\u00a0scheme. It is analogous to an\u00a0image element. <code>&lt;TextInput&gt;</code> Allows the input of text by the user and provides several configuration capabilities such as auto-correction, auto-capitalization, placeholder text, etc. It is analogous to an <code>&lt;input&gt;</code>\u00a0element with its\u00a0<code>type</code>\u00a0attribute set to\u00a0<code>\"text\"</code>. <code>&lt;ScrollView&gt;</code> A container that can nest multiple components and views that can scroll vertically or horizontally. It is analogous to a scrolling\u00a0<code>div</code>\u00a0element."},{"location":"Code/How_to_React_Native/#community-components","title":"Community Components","text":"<p>Components can also be custom-built; there\u2019s a big ecosystem of these community-built components that can be accessed on the\u00a0Native Directory.</p> <p></p>"},{"location":"Code/How_to_React_Native/#examples","title":"Examples","text":"<p>React Native uses the same component syntax structure for its views to display elements to the screen, like in\u00a0How_to_React. The following examples are of a\u00a0<code>Box</code>\u00a0component defined as both a class and functional component:</p> <pre><code>import React, { Component } from 'react';\nimport { Text } from 'react-native';\n\n// Functional Component\nconst Box = () =&gt; {\n  return &lt;Text&gt;I have a small box&lt;/Text&gt;;\n};\n\n// Class Component\nclass Box extends Component {\n  render() {\n    return &lt;Text&gt;I have a small box&lt;/Text&gt;;\n  }\n}\n\nexport default Box;\n</code></pre> <p>Note:\u00a0To test this example, either the class or function definition of the\u00a0<code>Box</code>\u00a0component must be commented out before doing so.</p>"},{"location":"Code/How_to_React_Native/#jsx-props-and-state","title":"JSX, Props, and State","text":"<p>Components also use\u00a0JSX, accept\u00a0props, and manage\u00a0state.</p>"},{"location":"Code/How_to_React_Native/#jsx","title":"JSX","text":"<p>As in React, the JSX syntax in React Native allows elements and variables to be written inside the JavaScript:</p> <pre><code>import React from 'react';\nimport { Text } from 'react-native';\n\nconst Box = () =&gt; {\n  const size = \u201csmall\u201d;\n  return (\n    &lt;Text&gt;I have a {size} box&lt;/Text&gt;\n  );\n}\n\nexport default Box;\n</code></pre>"},{"location":"Code/How_to_React_Native/#props","title":"Props","text":"<p>Most core components in React Native accept props. For example, different sizes for the\u00a0<code>Box</code>\u00a0component can be passed via props:</p> <pre><code>import React from 'react';\nimport { View, Text } from 'react-native';\n\nconst Box = (props) =&gt; {\n  return (\n    &lt;Text&gt;I have a {props.size} box&lt;/Text&gt;\n  );\n}\n\nconst BoxCollection = () =&gt; {\n  return (\n    &lt;View&gt;\n      &lt;Box size=\u201csmall\u201d /&gt;\n      &lt;Box size=\u201cmedium\u201d /&gt;\n      &lt;Box size=\u201clarge\u201d /&gt;\n    &lt;/View&gt;\n  );\n}\n\nexport default BoxCollection;\n</code></pre>"},{"location":"Code/How_to_React_Native/#state","title":"State","text":"<p>Like in React, components in React Native also use state to handle data that changes over time, such as with user interaction:</p> <pre><code>import React, { useState } from 'react';\nimport { View, Text, Button } from 'react-native';\n\nconst Box = () =&gt; {\n  const [size, setSize] = useState('small');\n  return (\n    &lt;View&gt;\n      &lt;Text&gt;I have a {size} box&lt;/Text&gt;\n      &lt;Button color=\"red\" onPress={() =&gt; setSize('small')} title=\"Small\" /&gt;\n      &lt;Button color=\"blue\" onPress={() =&gt; setSize('medium')} title=\"Medium\" /&gt;\n      &lt;Button color=\"orange\" onPress={() =&gt; setSize('large')} title=\"Large\" /&gt;\n    &lt;/View&gt;\n  );\n};\n\nexport default Box;\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/","title":"How to React TypeScript","text":""},{"location":"Code/How_to_React_TypeScript/#typing-component-props","title":"Typing Component Props","text":"<p>This is intended as a basic orientation and reference for React developers familiarizing with TypeScript.</p>"},{"location":"Code/How_to_React_TypeScript/#basic-prop-types-examples","title":"Basic Prop Types Examples","text":"<p>A list of TypeScript types you will likely use in a React+TypeScript app:</p> <pre><code>type AppProps = {  \n    message: string;  \n    count: number;  \n    disabled: boolean;\n\n    /** array of a type! */  \n    names: string[];  \n\n    /** string literals to specify exact string values,\n    with a union type to join them together */  \n    status: \"waiting\" | \"success\";  \n\n    /** an object with known properties\n    (but could have more at runtime) */  \n    obj: {  \n        id: string;  \n        title: string;  \n    };  \n\n    /** array of objects! (common) */  \n    objArr: {  \n        id: string;  \n        title: string;  \n    }[];\n\n    /** any non-primitive value - can't access any properties\n    (NOT COMMON but useful as placeholder) */  \n    obj2: object;  \n\n    /** an interface with no required properties -\n    (NOT COMMON, except for things like `React.Component&lt;{}, State&gt;`) */  \n    obj3: {};  \n\n    /** a dict object with any number of properties of the same type */  \n    dict1: {  \n        [key: string]: MyTypeHere;  \n    };  \n\n    // equivalent to dict1  \n    dict2: Record&lt;string, MyTypeHere&gt;; \n\n    /** function that doesn't take or return anything (VERY COMMON) */  \n    onClick: () =&gt; void;\n\n    /** function with named prop (VERY COMMON) */  \n    onChange: (id: number) =&gt; void;  \n\n    /** function type syntax that takes an event (VERY COMMON) */  \n    onChange: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void;  \n\n    /** alternative function type syntax that takes an event (VERY COMMON) */  \n    onClick(event: React.MouseEvent&lt;HTMLButtonElement&gt;): void;  \n\n    /** any function as long as you don't invoke it (not recommended) */  \n    onSomething: Function;  \n\n    /** an optional prop (VERY COMMON!) */  \n    optional?: OptionalType;  \n\n    /** when passing down the state setter function returned by `useState`\n    to a child component. `number` is an example,\n    swap out with whatever the type of your state */  \n    setState: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;;  \n};\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#object-as-the-non-primitive-type","title":"<code>object</code>\u00a0as the non-primitive type","text":"<p><code>object</code>\u00a0is a common source of misunderstanding in TypeScript. It does not mean \"any object\" but rather \"any non-primitive type\", which means it represents anything that is not\u00a0<code>number</code>,\u00a0<code>string</code>,\u00a0<code>boolean</code>,\u00a0<code>symbol</code>,\u00a0<code>null</code>\u00a0or\u00a0<code>undefined</code>.</p> <p>Typing \"any non-primitive value\" is most likely not something that you should do much in React, which means you will probably not use\u00a0<code>object</code>\u00a0much.</p>"},{"location":"Code/How_to_React_TypeScript/#empty-interface-and-object","title":"Empty interface,\u00a0<code>{}</code>\u00a0and\u00a0<code>Object</code>","text":"<p>An empty interface,\u00a0<code>{}</code>\u00a0and\u00a0<code>Object</code>\u00a0all represent \"any non-nullish value\"\u2014not \"an empty object\" as you might think.\u00a0Using these types is a common source of misunderstanding and is not recommended.</p> <pre><code>interface AnyNonNullishValue {} // equivalent to `type AnyNonNullishValue = {}` or `type AnyNonNullishValue = Object`  \n\nlet value: AnyNonNullishValue;  \n\n// these are all fine, but might not be expected  \nvalue = 1;  \nvalue = \"foo\";  \nvalue = () =&gt; alert(\"foo\");  \nvalue = {};  \nvalue = { foo: \"bar\" };  \n\n// these are errors  \nvalue = undefined;  \nvalue = null;\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#useful-react-prop-type-examples","title":"Useful React Prop Type Examples","text":"<p>Relevant for components that accept other React components as props.</p> <pre><code>export declare interface AppProps {\n    // best, accepts everything React can render\n    children?: React.ReactNode;   \n\n    // A single React element\n    childrenElement: React.tsx.Element;\n\n    // to pass through style props\n    style?: React.CSSProperties;   \n\n    // form events! the generic parameter is the type of event.target \n    onChange?: React.FormEventHandler&lt;HTMLInputElement&gt;;\n\n    // to impersonate all the props of a button element\n    // and explicitly not forwarding its ref \n    props: Props &amp; React.ComponentPropsWithoutRef&lt;\"button\"&gt;;\n\n    // to impersonate all the props of MyButtonForwardedRef\n    // and explicitly forwarding its ref \n    props2: Props &amp; React.ComponentPropsWithRef&lt;MyButtonWithForwardRef&gt;;\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#function-components","title":"Function Components","text":"<p>These can be written as normal functions that take a\u00a0<code>props</code>\u00a0argument and return a tsx element.</p> <pre><code>// Declaring type of props - see \"Typing Component Props\" for more examples  \n// use `interface` if exporting so that consumers can extend\ntype AppProps = {  \n    message: string;  \n};   \n\n// Easiest way to declare a Function Component; return type is inferred.  \nconst App = ({ message }: AppProps) =&gt; &lt;div&gt;{message}&lt;/div&gt;;  \n\n// you can choose annotate the return type\n// so an error is raised if you accidentally return some other type  \nconst App = ({ message }: AppProps): React.tsx.Element =&gt; &lt;div&gt;{message}&lt;/div&gt;;  \n\n// you can also inline the type declaration;\n// Eliminates naming the prop types, but looks repetitive  \nconst App = ({ message }: { message: string }) =&gt; &lt;div&gt;{message}&lt;/div&gt;;  \n\n// Alternatively, you can use `React.FunctionComponent` (or `React.FC`), if you prefer.  \n// With latest React types and TypeScript 5.1.\n// it's mostly a stylistic choice, otherwise discouraged.  \nconst App: React.FunctionComponent&lt;{ message: string }&gt; = ({ message }) =&gt; (  \n    &lt;div&gt;{message}&lt;/div&gt;  \n);\n</code></pre> <p>Tip: You might use\u00a0Paul Shen's VS Code Extension\u00a0to automate the type destructure declaration (incl a\u00a0keyboard shortcut).</p>"},{"location":"Code/How_to_React_TypeScript/#hooks","title":"Hooks","text":"<p>Hooks are\u00a0supported in\u00a0<code>@types/react</code>\u00a0from v16.8 up.</p>"},{"location":"Code/How_to_React_TypeScript/#usestate","title":"useState","text":"<p>Type inference works very well for simple values:</p> <pre><code>const [state, setState] = useState(false);\n// `state` is inferred to be a boolean\n// `setState` only takes booleans\n</code></pre> <p>See also the\u00a0Using Inferred Types\u00a0section if you need to use a complex type that you've relied on inference for.</p> <p>However, many hooks are initialized with null-ish default values, and you may wonder how to provide types. Explicitly declare the type, and use a union type:</p> <pre><code>const [user, setUser] = useState&lt;User | null&gt;(null);\n\n// later...\nsetUser(newUser);\n</code></pre> <p>You can also use type assertions if a state is initialized soon after setup and always has a value after:</p> <pre><code>const [user, setUser] = useState&lt;User&gt;({} as User);\n\n// later...\nsetUser(newUser);\n</code></pre> <p>This temporarily \"lies\" to the TypeScript compiler that\u00a0<code>{}</code>\u00a0is of type\u00a0<code>User</code>. You should follow up by setting the\u00a0<code>user</code>\u00a0state \u2014 if you don't, the rest of your code may rely on the fact that\u00a0<code>user</code>\u00a0is of type\u00a0<code>User</code>\u00a0and that may lead to runtime errors.</p>"},{"location":"Code/How_to_React_TypeScript/#usecallback","title":"useCallback","text":"<p>You can type the\u00a0<code>useCallback</code>\u00a0just like any other function.</p> <pre><code>const memoizedCallback = useCallback(\n  (param1: string, param2: number) =&gt; {\n    console.log(param1, param2)\n    return { ok: true }\n  },\n  [...],\n);\n/**\n * VSCode will show the following type:\n * const memoizedCallback:\n *  (param1: string, param2: number) =&gt; { ok: boolean }\n */\n</code></pre> <p>Note that for React &lt; 18, the function signature of\u00a0<code>useCallback</code>\u00a0typed arguments as\u00a0<code>any[]</code>\u00a0by default:</p> <pre><code>function useCallback&lt;T extends (...args: any[]) =&gt; any&gt;(\n  callback: T,\n  deps: DependencyList\n): T;\n</code></pre> <p>In React &gt;= 18, the function signature of\u00a0<code>useCallback</code>\u00a0changed to the following:</p> <pre><code>function useCallback&lt;T extends Function&gt;(callback: T, deps: DependencyList): T;\n</code></pre> <p>Therefore, the following code will yield \"<code>Parameter 'e' implicitly has an 'any' type.</code>\" error in React &gt;= 18, but not &lt;17.</p> <pre><code>// @ts-expect-error Parameter 'e' implicitly has 'any' type.\nuseCallback((e) =&gt; {}, []);\n// Explicit 'any' type.\nuseCallback((e: any) =&gt; {}, []);\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#usereducer","title":"useReducer","text":"<p>You can use\u00a0Discriminated Unions\u00a0for reducer actions. Don't forget to define the return type of reducer, otherwise TypeScript will infer it.</p> <pre><code>import { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\ntype ACTIONTYPE =\n  | { type: \"increment\"; payload: number }\n  | { type: \"decrement\"; payload: string };\n\nfunction reducer(state: typeof initialState, action: ACTIONTYPE) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + action.payload };\n    case \"decrement\":\n      return { count: state.count - Number(action.payload) };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    &lt;&gt;\n      Count: {state.count}\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\", payload: \"5\" })}&gt;\n        -\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\", payload: 5 })}&gt;\n        +\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#useeffect-uselayouteffect","title":"useEffect / useLayoutEffect","text":"<p>Both of\u00a0<code>useEffect</code>\u00a0and\u00a0<code>useLayoutEffect</code>\u00a0are used for performing\u00a0side effects\u00a0and return an optional cleanup function which means if they don't deal with returning values, no types are necessary. When using\u00a0<code>useEffect</code>, take care not to return anything other than a function or\u00a0<code>undefined</code>, otherwise both TypeScript and React will yell at you. This can be subtle when using arrow functions:</p> <pre><code>function DelayedEffect(props: { timerMs: number }) {\n  const { timerMs } = props;\n\n  useEffect(\n    () =&gt;\n      setTimeout(() =&gt; {\n        /* do stuff */\n      }, timerMs),\n    [timerMs]\n  );\n  // bad example! setTimeout implicitly returns a number\n  // because the arrow function body isn't wrapped in curly braces\n  return null;\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#useref","title":"useRef","text":"<p>In TypeScript,\u00a0<code>useRef</code>\u00a0returns a reference that is either\u00a0read-only\u00a0or\u00a0mutable, depends on whether your type argument fully covers the initial value or not. Choose one that suits your use case.</p>"},{"location":"Code/How_to_React_TypeScript/#option-1-dom-element-ref","title":"Option 1: DOM element ref","text":"<p>To access a DOM element:\u00a0provide only the element type as argument, and use\u00a0<code>null</code>\u00a0as initial value. In this case, the returned reference will have a read-only\u00a0<code>.current</code>\u00a0that is managed by React. TypeScript expects you to give this ref to an element's\u00a0<code>ref</code>\u00a0prop:</p> <pre><code>function Foo() {\n  // - If possible, prefer as specific as possible. For example, HTMLDivElement\n  //   is better than HTMLElement and way better than Element.\n  // - Technical-wise, this returns RefObject&lt;HTMLDivElement&gt;\n  const divRef = useRef&lt;HTMLDivElement&gt;(null);\n\n  useEffect(() =&gt; {\n    // Note that ref.current may be null. This is expected, because you may\n    // conditionally render the ref-ed element, or you may forget to assign it\n    if (!divRef.current) throw Error(\"divRef is not assigned\");\n\n    // Now divRef.current is sure to be HTMLDivElement\n    doSomethingWith(divRef.current);\n  });\n\n  // Give the ref to an element so React can manage it for you\n  return &lt;div ref={divRef}&gt;etc&lt;/div&gt;;\n}\n</code></pre> <p>If you are sure that\u00a0<code>divRef.current</code>\u00a0will never be null, it is also possible to use the non-null assertion operator\u00a0<code>!</code>:</p> <pre><code>const divRef = useRef&lt;HTMLDivElement&gt;(null!);\n// Later... No need to check if it is null\ndoSomethingWith(divRef.current);\n</code></pre> <p>Note that you are opting out of type safety here - you will have a runtime error if you forget to assign the ref to an element in the render, or if the ref-ed element is conditionally rendered.</p> <p>Tip: Choosing which\u00a0<code>HTMLElement</code>\u00a0to use</p> <p>Refs demand specificity - it is not enough to just specify any old <code>HTMLElement</code>. If you don't know the name of the element type you need, you can check lib.dom.ts or make an intentional type error and let the language service tell you:</p> <p></p>"},{"location":"Code/How_to_React_TypeScript/#option-2-mutable-value-ref","title":"Option 2: Mutable value ref","text":"<p>To have a mutable value:\u00a0provide the type you want, and make sure the initial value fully belongs to that type:</p> <pre><code>function Foo() {\n  // Technical-wise, this returns MutableRefObject&lt;number | null&gt;\n  const intervalRef = useRef&lt;number | null&gt;(null);\n\n  // You manage the ref yourself (that's why it's called MutableRefObject!)\n  useEffect(() =&gt; {\n    intervalRef.current = setInterval(...);\n    return () =&gt; clearInterval(intervalRef.current);\n  }, []);\n\n  // The ref is not passed to any element's \"ref\" prop\n  return &lt;button onClick={/* clearInterval the ref */}&gt;Cancel timer&lt;/button&gt;;\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#useimperativehandle","title":"useImperativeHandle","text":"<p>Based on this\u00a0Stackoverflow answer:</p> <pre><code>// Countdown.tsx\n\n// Define the handle types which will be passed to the forwardRef\nexport type CountdownHandle = {\n  start: () =&gt; void;\n};\n\ntype CountdownProps = {};\n\nconst Countdown = forwardRef&lt;CountdownHandle, CountdownProps&gt;((props, ref) =&gt; {\n  useImperativeHandle(ref, () =&gt; ({\n    // start() has type inference here\n    start() {\n      alert(\"Start\");\n    },\n  }));\n\n  return &lt;div&gt;Countdown&lt;/div&gt;;\n});\n</code></pre> <pre><code>// The component uses the Countdown component\n\nimport Countdown, { CountdownHandle } from \"./Countdown.tsx\";\n\nfunction App() {\n  const countdownEl = useRef&lt;CountdownHandle&gt;(null);\n\n  useEffect(() =&gt; {\n    if (countdownEl.current) {\n      // start() has type inference here as well\n      countdownEl.current.start();\n    }\n  }, []);\n\n  return &lt;Countdown ref={countdownEl} /&gt;;\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#custom-hooks","title":"Custom Hooks","text":"<p>If you are returning an array in your Custom Hook, you will want to avoid type inference as TypeScript will infer a union type (when you actually want different types in each position of the array). Instead, use\u00a0TS 3.4 const assertions:</p> <pre><code>import { useState } from \"react\";\n\nexport function useLoading() {\n  const [isLoading, setState] = useState(false);\n  const load = (aPromise: Promise&lt;any&gt;) =&gt; {\n    setState(true);\n    return aPromise.finally(() =&gt; setState(false));\n  };\n  return [isLoading, load] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n</code></pre> <p>This way, when you destructure you actually get the right types based on destructure position.</p>"},{"location":"Code/How_to_React_TypeScript/#class-components","title":"Class Components","text":"<p>Within TypeScript,\u00a0<code>React.Component</code>\u00a0is a generic type (aka\u00a0<code>React.Component&lt;PropType, StateType&gt;</code>), so you want to provide it with (optional) prop and state type parameters:</p> <pre><code>type MyProps = {\n  // using `interface` is also ok\n  message: string;\n};\ntype MyState = {\n  count: number; // like this\n};\nclass App extends React.Component&lt;MyProps, MyState&gt; {\n  state: MyState = {\n    // optional second annotation for better type inference\n    count: 0,\n  };\n  render() {\n    return (\n      &lt;div&gt;\n        {this.props.message} {this.state.count}\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>Don't forget that you can export/import/extend these types/interfaces for reuse.</p> <p>Why annotate\u00a0<code>state</code>\u00a0twice?</p> <p>It isn't strictly necessary to annotate the\u00a0<code>state</code>\u00a0class property, but it allows better type inference when accessing\u00a0<code>this.state</code>\u00a0and also initializing the state.</p> <p>This is because they work in two different ways, the 2nd generic type parameter will allow\u00a0<code>this.setState()</code>\u00a0to work correctly, because that method comes from the base class, but initializing\u00a0<code>state</code>\u00a0inside the component overrides the base implementation so you have to make sure that you tell the compiler that you're not actually doing anything different.</p> <p>Class Methods: Do it like normal, but just remember any arguments for your functions also need to be typed:</p> <pre><code>class App extends React.Component&lt;{ message: string }, { count: number }&gt; {\n  state = { count: 0 };\n  render() {\n    return (\n      &lt;div onClick={() =&gt; this.increment(1)}&gt;\n        {this.props.message} {this.state.count}\n      &lt;/div&gt;\n    );\n  }\n  increment = (amt: number) =&gt; {\n    // like this\n    this.setState((state) =&gt; ({\n      count: state.count + amt,\n    }));\n  };\n}\n</code></pre> <p>Class Properties: If you need to declare class properties for later use, just declare it like\u00a0<code>state</code>, but without assignment:</p> <pre><code>class App extends React.Component&lt;{\n  message: string;\n}&gt; {\n  pointer: number; // like this\n  componentDidMount() {\n    this.pointer = 3;\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        {this.props.message} and {this.pointer}\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#typing-getderivedstatefromprops","title":"Typing getDerivedStateFromProps","text":"<p>Before you start using\u00a0<code>getDerivedStateFromProps</code>, please go through the\u00a0documentation\u00a0and\u00a0You Probably Don't Need Derived State. Derived State can be implemented using hooks which can also help set up memoization.</p> <p>Here are a few ways in which you can annotate\u00a0<code>getDerivedStateFromProps</code></p> <ol> <li>If you have explicitly typed your derived state and want to make sure that the return value from\u00a0<code>getDerivedStateFromProps</code>\u00a0conforms to it.</li> </ol> <pre><code>class Comp extends React.Component&lt;Props, State&gt; {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial&lt;State&gt; | null {\n    //\n  }\n}\n</code></pre> <ol> <li>When you want the function's return value to determine your state.</li> </ol> <pre><code>class Comp extends React.Component&lt;\n  Props,\n  ReturnType&lt;typeof Comp[\"getDerivedStateFromProps\"]&gt;\n&gt; {\n  static getDerivedStateFromProps(props: Props) {}\n}\n</code></pre> <ol> <li>When you want derived state with other state fields and memorization</li> </ol> <pre><code>type CustomValue = any;\ninterface Props {\n  propA: CustomValue;\n}\ninterface DefinedState {\n  otherStateField: string;\n}\ntype State = DefinedState &amp; ReturnType&lt;typeof transformPropsToState&gt;;\nfunction transformPropsToState(props: Props) {\n  return {\n    savedPropA: props.propA, // save for memoization\n    derivedState: props.propA,\n  };\n}\nclass Comp extends React.PureComponent&lt;Props, State&gt; {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      otherStateField: \"123\",\n      ...transformPropsToState(props),\n    };\n  }\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (isEqual(props.propA, state.savedPropA)) return null;\n    return transformPropsToState(props);\n  }\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#typing-defaultprops","title":"Typing defaultProps","text":""},{"location":"Code/How_to_React_TypeScript/#you-may-not-need-defaultprops","title":"You May Not Need\u00a0<code>defaultProps</code>","text":"<p>As per\u00a0this tweet, defaultProps will eventually be deprecated. You can check the discussions here:</p> <ul> <li>Original tweet</li> <li>More info can also be found in\u00a0this article</li> </ul> <p>The consensus is to use object default values.</p> <p>Function Components:</p> <pre><code>type GreetProps = { age?: number };\n\nconst Greet = ({ age = 21 }: GreetProps) =&gt; // etc\n</code></pre> <p>Class Components:</p> <pre><code>type GreetProps = {\n  age?: number;\n};\n\nclass Greet extends React.Component&lt;GreetProps&gt; {\n  render() {\n    const { age = 21 } = this.props;\n    /*...*/\n  }\n}\n\nlet el = &lt;Greet age={3} /&gt;;\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#forms-and-events","title":"Forms and Events","text":"<p>If performance is not an issue (and it usually isn't!), inlining handlers is easiest as you can just use\u00a0type inference and contextual typing:</p> <pre><code>const el = (\n  &lt;button\n    onClick={(event) =&gt; {\n      /* event will be correctly typed automatically! */\n    }}\n  /&gt;\n);\n</code></pre> <p>But if you need to define your event handler separately, IDE tooling really comes in handy here, as the @type definitions come with a wealth of typing. Type what you are looking for and usually the autocomplete will help you out. Here is what it looks like for an\u00a0<code>onChange</code>\u00a0for a form event:</p> <pre><code>type State = {\n  text: string;\n};\nclass App extends React.Component&lt;Props, State&gt; {\n  state = {\n    text: \"\",\n  };\n\n  // typing on RIGHT hand side of =\n  onChange = (e: React.FormEvent&lt;HTMLInputElement&gt;): void =&gt; {\n    this.setState({ text: e.currentTarget.value });\n  };\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;input type=\"text\" value={this.state.text} onChange={this.onChange} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>Instead of typing the arguments and return values with\u00a0<code>React.FormEvent&lt;&gt;</code>\u00a0and\u00a0<code>void</code>, you may alternatively apply types to the event handler itself (contributed by @TomasHubelbauer):</p> <pre><code>  // typing on LEFT hand side of =\n  onChange: React.ChangeEventHandler&lt;HTMLInputElement&gt; = (e) =&gt; {\n    this.setState({text: e.currentTarget.value})\n  }\n</code></pre> <p>Why two ways to do the same thing?</p> <p>The first method uses an inferred method signature\u00a0<code>(e: React.FormEvent&lt;HTMLInputElement&gt;): void</code>\u00a0and the second method enforces a type of the delegate provided by\u00a0<code>@types/react</code>. So\u00a0<code>React.ChangeEventHandler&lt;&gt;</code>\u00a0is simply a \"blessed\" typing by\u00a0<code>@types/react</code>, whereas you can think of the inferred method as more...\u00a0artisanally hand-rolled. Either way it's a good pattern to know.\u00a0See our Github PR for more.</p> <p>Typing onSubmit, with Uncontrolled components in a Form</p> <p>If you don't quite care about the type of the event, you can just use\u00a0<code>React.SyntheticEvent</code>. If your target form has custom named inputs that you'd like to access, you can use a type assertion:</p> <pre><code>&lt;form\n  ref={formRef}\n  onSubmit={(e: React.SyntheticEvent) =&gt; {\n    e.preventDefault();\n    const target = e.target as typeof e.target &amp; {\n      email: { value: string };\n      password: { value: string };\n    };\n    const email = target.email.value; // typechecks!\n    const password = target.password.value; // typechecks!\n    // etc...\n  }}\n&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Email:\n      &lt;input type=\"email\" name=\"email\" /&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Password:\n      &lt;input type=\"password\" name=\"password\" /&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"submit\" value=\"Log in\" /&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>Of course, if you're making any sort of significant form,\u00a0you should use Formik\u00a0or\u00a0React Hook Form, which are written in TypeScript.</p>"},{"location":"Code/How_to_React_TypeScript/#context","title":"Context","text":""},{"location":"Code/How_to_React_TypeScript/#basic-example","title":"Basic example","text":"<p>Here's a basic example of creating a context containing the active theme.</p> <pre><code>import { createContext } from \"react\";\n\ntype ThemeContextType = \"light\" | \"dark\";\n\nconst ThemeContext = createContext&lt;ThemeContextType&gt;(\"light\");\n</code></pre> <p>Wrap the components that need the context with a context provider:</p> <pre><code>import { useState } from \"react\";\n\nconst App = () =&gt; {\n  const [theme, setTheme] = useState&lt;ThemeContextType&gt;(\"light\");\n\n  return (\n    &lt;ThemeContext.Provider value={theme}&gt;\n      &lt;MyComponent /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n};\n</code></pre> <p>Call\u00a0<code>useContext</code>\u00a0to read and subscribe to the context.</p> <pre><code>import { useContext } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const theme = useContext(ThemeContext);\n\n  return &lt;p&gt;The current theme is {theme}.&lt;/p&gt;;\n};\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#without-default-context-value","title":"Without default context value","text":"<p>If you don't have any meaningful default value, specify\u00a0<code>null</code>:</p> <pre><code>import { createContext } from \"react\";\n\ninterface CurrentUserContextType {\n  username: string;\n}\n\nconst CurrentUserContext = createContext&lt;CurrentUserContextType | null&gt;(null);\n</code></pre> <pre><code>const App = () =&gt; {\n  const [currentUser, setCurrentUser] = useState&lt;CurrentUserContextType&gt;({\n    username: \"filiptammergard\",\n  });\n\n  return (\n    &lt;CurrentUserContext.Provider value={currentUser}&gt;\n      &lt;MyComponent /&gt;\n    &lt;/CurrentUserContext.Provider&gt;\n  );\n};\n</code></pre> <p>Now that the type of the context can be\u00a0<code>null</code>, you'll notice that you'll get a\u00a0<code>'currentUser' is possibly 'null'</code>\u00a0TypeScript error if you try to access the\u00a0<code>username</code>\u00a0property. You can use optional chaining to access\u00a0<code>username</code>:</p> <pre><code>import { useContext } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const currentUser = useContext(CurrentUserContext);\n\n  return &lt;p&gt;Name: {currentUser?.username}.&lt;/p&gt;;\n};\n</code></pre> <p>However, it would be preferable to not have to check for\u00a0<code>null</code>, since we know that the context won't be\u00a0<code>null</code>. One way to do that is to provide a custom hook to use the context, where an error is thrown if the context is not provided:</p> <pre><code>import { createContext } from \"react\";\n\ninterface CurrentUserContextType {\n  username: string;\n}\n\nconst CurrentUserContext = createContext&lt;CurrentUserContextType | null&gt;(null);\n\nconst useCurrentUser = () =&gt; {\n  const currentUserContext = useContext(CurrentUserContext);\n\n  if (!currentUserContext) {\n    throw new Error(\n      \"useCurrentUser has to be used within &lt;CurrentUserContext.Provider&gt;\"\n    );\n  }\n\n  return currentUserContext;\n};\n</code></pre> <p>Using a runtime type check in this will has the benefit of printing a clear error message in the console when a provider is not wrapping the components properly. Now it's possible to access\u00a0<code>currentUser.username</code>\u00a0without checking for\u00a0<code>null</code>:</p> <pre><code>import { useContext } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const currentUser = useContext(CurrentUserContext);\n\n  return &lt;p&gt;Name: {currentUser?.username}.&lt;/p&gt;;\n};\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#type-assertion-as-an-alternative","title":"Type assertion as an alternative","text":"<p>Another way to avoid having to check for\u00a0<code>null</code>\u00a0is to use type assertion to tell TypeScript you know the context is not\u00a0<code>null</code>:</p> <pre><code>const CurrentUserContext = createContext&lt;CurrentUserContextType&gt;(\n  {} as CurrentUserContextType\n);\n</code></pre> <p>Another option is to use an empty object as default value and cast it to the expected context type:</p> <pre><code>const CurrentUserContext = createContext&lt;CurrentUserContextType&gt;(null!);\n</code></pre> <p>You can also use non-null assertion to get the same result:</p> <pre><code>const CurrentUserContext = createContext&lt;CurrentUserContextType&gt;(null!);\n</code></pre> <p>When you don't know what to choose, prefer runtime checking and throwing over type asserting.</p>"},{"location":"Code/How_to_React_TypeScript/#forwardrefcreateref","title":"forwardRef/createRef","text":"<p>Check the\u00a0Hooks section\u00a0for\u00a0<code>useRef</code>.</p> <p><code>createRef</code>:</p> <pre><code>import { createRef, PureComponent } from \"react\";\n\nclass CssThemeProvider extends PureComponent&lt;Props&gt; {\n  private rootRef = createRef&lt;HTMLDivElement&gt;(); // like this\n  render() {\n    return &lt;div ref={this.rootRef}&gt;{this.props.children}&lt;/div&gt;;\n  }\n}\n</code></pre> <p><code>forwardRef</code>:</p> <pre><code>import { forwardRef, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\nexport type Ref = HTMLButtonElement;\n\nexport const FancyButton = forwardRef&lt;Ref, Props&gt;((props, ref) =&gt; (\n  &lt;button ref={ref} className=\"MyClassName\" type={props.type}&gt;\n    {props.children}\n  &lt;/button&gt;\n));\n</code></pre> <p>Side note: the <code>ref</code> you get from forwardRef is mutable so you can assign to it if needed</p> <p>This was done\u00a0on purpose. You can make it immutable if you have to - assign\u00a0<code>React.Ref</code>\u00a0if you want to ensure nobody reassigns it:</p> <pre><code>import { forwardRef, ReactNode, Ref } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef(\n  (\n    props: Props,\n    ref: Ref&lt;HTMLButtonElement&gt; // &lt;-- here!\n  ) =&gt; (\n    &lt;button ref={ref} className=\"MyClassName\" type={props.type}&gt;\n      {props.children}\n    &lt;/button&gt;\n  )\n);\n</code></pre> <p>If you are grabbing the props of a component that forwards refs, use\u00a0<code>ComponentPropsWithRef</code>.</p>"},{"location":"Code/How_to_React_TypeScript/#generic-forwardrefs","title":"Generic forwardRefs","text":"<p>Read more context in\u00a0https://fettblog.eu/typescript-react-generic-forward-refs/:</p>"},{"location":"Code/How_to_React_TypeScript/#option-1-wrapper-component","title":"Option 1 - Wrapper component","text":"<pre><code>type ClickableListProps&lt;T&gt; = {\n  items: T[];\n  onSelect: (item: T) =&gt; void;\n  mRef?: React.Ref&lt;HTMLUListElement&gt; | null;\n};\n\nexport function ClickableList&lt;T&gt;(props: ClickableListProps&lt;T&gt;) {\n  return (\n    &lt;ul ref={props.mRef}&gt;\n      {props.items.map((item, i) =&gt; (\n        &lt;li key={i}&gt;\n          &lt;button onClick={(el) =&gt; props.onSelect(item)}&gt;Select&lt;/button&gt;\n          {item}\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#option-2-redeclare-forwardref","title":"Option 2 - Redeclare forwardRef","text":"<pre><code>// Redeclare forwardRef\ndeclare module \"react\" {\n  function forwardRef&lt;T, P = {}&gt;(\n    render: (props: P, ref: React.Ref&lt;T&gt;) =&gt; React.ReactElement | null\n  ): (props: P &amp; React.RefAttributes&lt;T&gt;) =&gt; React.ReactElement | null;\n}\n\n// Just write your components like you're used to!\nimport { forwardRef, ForwardedRef } from \"react\";\n\ninterface ClickableListProps&lt;T&gt; {\n  items: T[];\n  onSelect: (item: T) =&gt; void;\n}\n\nfunction ClickableListInner&lt;T&gt;(\n  props: ClickableListProps&lt;T&gt;,\n  ref: ForwardedRef&lt;HTMLUListElement&gt;\n) {\n  return (\n    &lt;ul ref={ref}&gt;\n      {props.items.map((item, i) =&gt; (\n        &lt;li key={i}&gt;\n          &lt;button onClick={(el) =&gt; props.onSelect(item)}&gt;Select&lt;/button&gt;\n          {item}\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n\nexport const ClickableList = forwardRef(ClickableListInner);\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#option-3-call-signature","title":"Option 3 - Call signature","text":"<pre><code>// Add to `index.d.ts`\ninterface ForwardRefWithGenerics extends React.FC&lt;WithForwardRefProps&lt;Option&gt;&gt; {\n  &lt;T extends Option&gt;(props: WithForwardRefProps&lt;T&gt;): ReturnType&lt;\n    React.FC&lt;WithForwardRefProps&lt;T&gt;&gt;\n  &gt;;\n}\n\nexport const ClickableListWithForwardRef: ForwardRefWithGenerics =\n  forwardRef(ClickableList);\n</code></pre>"},{"location":"Code/How_to_React_TypeScript/#portals","title":"Portals","text":"<p>Using\u00a0<code>ReactDOM.createPortal</code>:</p> <pre><code>const modalRoot = document.getElementById(\"modal-root\") as HTMLElement;\n// assuming in your html file has a div with id 'modal-root';\n\nexport class Modal extends React.Component&lt;{ children?: React.ReactNode }&gt; {\n  el: HTMLElement = document.createElement(\"div\");\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n</code></pre> <p>Using hooks</p> <p>Same as above but using hooks</p> <pre><code>import { useEffect, useRef, ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst modalRoot = document.querySelector(\"#modal-root\") as HTMLElement;\n\ntype ModalProps = {\n  children: ReactNode;\n};\n\nfunction Modal({ children }: ModalProps) {\n  // create div element only once using ref\n  const elRef = useRef&lt;HTMLDivElement | null&gt;(null);\n  if (!elRef.current) elRef.current = document.createElement(\"div\");\n\n  useEffect(() =&gt; {\n    const el = elRef.current!; // non-null assertion because it will never be null\n    modalRoot.appendChild(el);\n    return () =&gt; {\n      modalRoot.removeChild(el);\n    };\n  }, []);\n\n  return createPortal(children, elRef.current);\n}\n</code></pre> <p>Modal Component Usage Example:</p> <pre><code>import { useState } from \"react\";\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    &lt;div&gt;\n      // you can also put this in your static html file\n      &lt;div id=\"modal-root\"&gt;&lt;/div&gt;\n      {showModal &amp;&amp; (\n        &lt;Modal&gt;\n          &lt;div\n            style={{\n              display: \"grid\",\n              placeItems: \"center\",\n              height: \"100vh\",\n              width: \"100vh\",\n              background: \"rgba(0,0,0,0.1)\",\n              zIndex: 99,\n            }}\n          &gt;\n            I'm a modal!{\" \"}\n            &lt;button\n              style={{ background: \"papyawhip\" }}\n              onClick={() =&gt; setShowModal(false)}\n            &gt;\n              close\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/Modal&gt;\n      )}\n      &lt;button onClick={() =&gt; setShowModal(true)}&gt;show Modal&lt;/button&gt;\n      // rest of your app\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>This example is based on the\u00a0Event Bubbling Through Portal\u00a0example of React docs.</p>"},{"location":"Code/How_to_React_TypeScript/#error-boundaries","title":"Error Boundaries","text":""},{"location":"Code/How_to_React_TypeScript/#option-1-using-react-error-boundary","title":"Option 1: Using react-error-boundary","text":"<p>React-error-boundary\u00a0- is a lightweight package ready to use for this scenario with TS support built-in. This approach also lets you avoid class components that are not that popular anymore.</p>"},{"location":"Code/How_to_React_TypeScript/#option-2-writing-your-custom-error-boundary-component","title":"Option 2: Writing your custom error boundary component","text":"<p>If you don't want to add a new npm package for this, you can also write your own\u00a0<code>ErrorBoundary</code>\u00a0component.</p> <pre><code>import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component&lt;Props, State&gt; {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Sorry.. there was an error&lt;/h1&gt;;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n</code></pre>"},{"location":"Code/How_to_TypeScript/","title":"How to TypeScript","text":"<p>TypeScript is a typed superset of JavaScript that combines the flexibility and general syntax of JavaScript with a type checker and syntax. It\u2019s one of the fastest-growing and most popular languages on the web today.</p> <p>Code written in TypeScript compiles to regular JavaScript. Anything you write in TypeScript can be run wherever it could be in JavaScript: web browsers, Node servers, and more.</p>"},{"location":"Code/How_to_TypeScript/#about-typescript","title":"About TypeScript","text":"<p>TypeScript\u00a0is a typed language that checks to see if JavaScript variables are of the correct data type before the code is run. It achieves this by using four tools that build on each other in the following order:</p> <ol> <li>A language specification that describes JavaScript syntax as well as new TypeScript-specific syntax</li> <li>A compiler program that takes in TypeScript (and therefore also JavaScript) syntax and converts it to the equivalent JavaScript</li> <li>A type checker program that reads in TypeScript syntax, understands the types of values every entity is meant to be and notices any \u201ctype errors\u201d (mismatches)</li> <li>A language server that editors such as VS Code can run to provide build-time hints and refactoring tools</li> </ol>"},{"location":"Code/How_to_TypeScript/#history","title":"History","text":"<p>TypeScript was released in October 2012 by Microsoft after two years of development.\u00a0Anders Hejlsberg, the original designer of C#, was the lead designer for the language.</p>"},{"location":"Code/How_to_TypeScript/#installation","title":"Installation","text":"<p>To download the latest stable build via npm, use the following command:</p> <pre><code>npm install -g typescript\n</code></pre> <p>To check the installed version, use the following command:</p> <pre><code>tsc -v\n</code></pre> <p>TypeScript was developed by Microsoft and is\u00a0available in VSCode\u00a0by default.</p>"},{"location":"Code/How_to_TypeScript/#playground","title":"Playground","text":"<p>There\u2019s an interactive playground provided by the TypeScript team at\u00a0https://www.typescriptlang.org/play.</p> <p>It allows you to type in JavaScript or TypeScript code on the left and see the resultant JavaScript output or any TypeScript type errors.</p>"},{"location":"Code/How_to_TypeScript/#arrays","title":"Arrays","text":"<p>In TypeScript, arrays are considered to be collections of single, \u201cgeneric\u201d types of values. All elements must be of the same type of data as prescribed in the array definition.</p>"},{"location":"Code/How_to_TypeScript/#defining-an-array","title":"Defining an array","text":"<p>Array types can be inferred during the initialization of a new array.</p> <p>In this example, the\u00a0<code>vowels</code>\u00a0array is inferred to consist of elements of type\u00a0<code>string</code>:</p> <pre><code>const vowels = ['a', 'e', 'i', 'o', 'u'];\n\nvowels.push('y'); // Ok\n\nvowels.push(7);\n// Error: Argument of type 'number' is not assignable to parameter of type 'string'.\n</code></pre> <p>Arrays can also be defined with the \u201cgeneric\u201d type of its elements already preset in two ways:</p> <pre><code>const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n\n// alternate way using Array class\nconst altVowels: Array&lt;string&gt; = ['a', 'e', 'i', 'o', 'u'];\n</code></pre> <p>More than one type can be prescribed in the array definition with the \u201cor\u201d\u00a0<code>|</code>\u00a0operator:</p> <pre><code>const numbers: (string | number)[] = [1, '2', 3, 'four'];\n\n// Alternative syntax\n// const numbers: [string, number] = [1, \"2\", 3, \"four\"];\n</code></pre> <p>As long as each element in\u00a0<code>numbers</code>\u00a0is of type\u00a0<code>string</code>\u00a0or\u00a0<code>number</code>, it is valid.</p>"},{"location":"Code/How_to_TypeScript/#array-types","title":"Array Types","text":"<p>An array type consists of the type of values inside the array followed by square brackets\u00a0<code>[]</code>.</p> <p>Arrays without any initial contents may be declared as that type to tell TypeScript what will later go into them.</p> <p>In this example,\u00a0<code>dates</code>\u00a0doesn\u2019t initially include a value, so declaring it as\u00a0<code>Date[]</code>\u00a0tells TypeScript what\u2019s allowed in it:</p> <pre><code>const dates: Date[] = [];\n\ndates.push(new Date('2021-12-1994')); // Ok\n\ndates.push(10241995);\n// Error: Argument of type 'number' is not assignable to parameter of type 'Date'.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#assignability","title":"Assignability","text":"<p>Assignability\u00a0is how TypeScript can determine whether a value of a particular data type can be assigned to a variable of the same (or another) data type.</p>"},{"location":"Code/How_to_TypeScript/#whenwhere-assignability-takes-place","title":"When/Where Assignability Takes Place","text":"<p>TypeScript performs assignability checks whenever a value is being assigned into another location in the computer\u2019s memory, such as:</p> <ul> <li>Assigning values to variables.</li> <li>Passing arguments to functions.</li> </ul>"},{"location":"Code/How_to_TypeScript/#example-assigning-matching-data-types","title":"Example: Assigning Matching Data Types","text":"<p>In this snippet of code, TypeScript sees that the\u00a0<code>spooky</code>\u00a0variable is initially assigned a boolean value, so it believes the\u00a0<code>spooky</code>\u00a0variable should always be of type\u00a0<code>boolean</code>.</p> <p>Assigning a variable of type boolean later on is allowed, as a type is assignable to itself, but assigning any other type, such as a\u00a0<code>string</code>, is not allowed:</p> <pre><code>let spooky = true;\n\nspooky = false; // Allowed\n\nspooky = 'skeletons'; // Not allowed\n</code></pre> <p>Running the code above will cause the following error:</p> <pre><code>Error: Type 'string' is not assignable to type 'boolean'.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#examples-comparing-object-types","title":"Examples: Comparing Object Types","text":"<p>When comparing object types, TypeScript will ensure that all the required fields exist in the assigning object type. It will also ensure that all field that do exist on the types match up.</p> <p>In the following example, we define an\u00a0<code>interface</code>\u00a0object called\u00a0<code>Skeleton</code>, which will serve as a blueprint for the following:</p> <ul> <li>The names of\u00a0<code>Skeleton</code>\u00a0properties.</li> <li>The corresponding\u00a0<code>: type</code>\u00a0definitions.</li> </ul> <p>the first\u00a0<code>receiveSkeleton()</code>\u00a0call works because its object argument contains both required properties -<code>spooky</code>\u00a0and\u00a0<code>scary</code>- and they are of the correct types.</p> <p><pre><code>interface Skeleton {\n  spooky: boolean;\n  scary: boolean;\n}\n\nfunction receiveSkeleton(skeleton: Skeleton) {\n  console.log(skeleton.spooky ? 'Spooky ' : 'Not spooky...');\n  console.log(skeleton.scary ? 'scary!' : 'Not scary...');\n}\n\nreceiveSkeleton({ spooky: true, scary: false }); // Ok\n</code></pre> The second example throws an\u00a0<code>Error</code>\u00a0because the\u00a0<code>spooky</code>\u00a0property is of type\u00a0<code>string</code>\u00a0instead of\u00a0<code>boolean</code>:</p> <pre><code>receiveSkeleton({\n  spooky: 'Very!',\n  scary: true,\n});\n</code></pre> <p>The error will look like this:</p> <pre><code>Error: Type 'string' is not assignable to type 'boolean'\n</code></pre> <p>This third and final example throws an\u00a0<code>Error</code>\u00a0because the object we passed to\u00a0<code>receiveSkeleton</code>\u00a0was missing a\u00a0<code>scary</code>\u00a0property.</p> <pre><code>receiveSkeleton({\n  spooky: false,\n});\n</code></pre> <p>The following error will occur, per the TypeScript checker:</p> <pre><code>Error: Argument of type '{ spooky: false; }'\nis not assignable to parameter of type 'Skeleton'.\nProperty 'scary' is missing in type '{ spooky: false; }'\nbut required in type 'Skeleton'.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#classes","title":"Classes","text":"<p>With TypeScript,\u00a0<code>class</code>\u00a0objects can use type annotation to describe the relationship between class members and their static types. Classes are a core part of the JavaScript language that TypeScript respects. In addition to type annotations, TypeScript adds a few new syntaxes to help write classes in a type-safe manner.</p>"},{"location":"Code/How_to_TypeScript/#members","title":"Members","text":"<p>Class member types work similarly to parameter and variable types.</p> <ul> <li>If an initial value exists, the member\u2019s type is inferred to be that type.</li> <li>If no initial value exists, the member is implicitly of type\u00a0<code>any</code>\u00a0unless a type annotation exists on its name.</li> </ul> <p>In the following\u00a0<code>Box</code>\u00a0class,\u00a0<code>count</code>\u00a0is inferred to be of type\u00a0<code>number</code>\u00a0because its initial value is\u00a0<code>0</code>, while\u00a0<code>value</code>\u00a0is explicitly declared as type\u00a0<code>string</code>.</p> <pre><code>class Box {\n  count = 0;\n  value: string;\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n</code></pre> <p>Therefore, asking for the\u00a0<code>count</code>\u00a0of a\u00a0<code>Box</code>\u00a0instance is of type\u00a0<code>number</code>, and the\u00a0<code>value</code>\u00a0is of type\u00a0<code>string</code>:</p> <pre><code>const myBox = new Box('stuff');\nmyBox.count; // Type: number\nmyBox.value; // Type: string\n</code></pre>"},{"location":"Code/How_to_TypeScript/#member-visibility","title":"Member Visibility","text":"<p>JavaScript has a\u00a0<code>#</code>\u00a0syntax to mark a member as private, meaning it can only be accessed inside its class:</p> <pre><code>class Secret {\n  #value: string;\n\n  constructor(value: string) {\n    this.#value = value;\n  }\n\n  getValue() {\n    return this.#value;\n  }\n}\n\nconst mySecret = new Secret('shhh');\n\nmySecret.getValue(); // Ok\n\nmySecret.#value;\n\n/* \nError: Property '#value' is not accessible outside\nclass 'Secret' because it has a private identifier.\n*/\n</code></pre>"},{"location":"Code/How_to_TypeScript/#public-private-or-protected","title":"Public, Private, or Protected","text":"<p>Separately, TypeScript also supports adding\u00a0<code>public</code>,\u00a0<code>protected</code>, or\u00a0<code>private</code>\u00a0in front of a class member to indicate whether the member may be used outside that class.</p> <ul> <li><code>public</code>\u00a0(default): anybody may access that member, anywhere.</li> <li><code>protected</code>: only the class or its derived classes may access that member.</li> <li><code>private</code>: only the class itself may access that member.</li> </ul> <p>The key difference between JavaScript\u2019s\u00a0<code>#</code>\u00a0syntax and TypeScript\u2019s privacy keywords are that:</p> <ul> <li>JavaScript\u2019s\u00a0<code>#</code>\u00a0syntax changes the name of the member.</li> <li>TypeScript\u2019s privacy keywords exist only in the type system; the member\u2019s name is not changed.</li> </ul> <p>In this example, the\u00a0<code>Base</code>\u00a0class sets up five variables:</p> <ul> <li>The first two,\u00a0<code>first</code>\u00a0and\u00a0<code>second</code>, are publicly accessible.</li> <li>The third,\u00a0<code>third</code>, is protected and only accessible in the class or a derived class.</li> <li>The fourth and fifth,\u00a0<code>fourth</code>\u00a0and\u00a0<code>fifth</code>, are set to private with\u00a0<code>private</code>\u00a0and\u00a0<code>#</code>, respectively.</li> </ul> <pre><code>class Base {\n  // These two are functionally equivalent\n  first = '';\n  public second = '';\n\n  protected third = '';\n\n  private fourth = '';\n  #fifth = '';\n}\n</code></pre> <p>The\u00a0<code>Derived</code>\u00a0class uses the\u00a0<code>extends</code>\u00a0keyword to become a child of the\u00a0<code>Base</code>\u00a0class. In the example below, a\u00a0<code>.test()</code>\u00a0method is used to borrow from members of the parent\u00a0<code>Base</code>\u00a0class:</p> <pre><code>class Derived extends Base {\n  test() {\n    this.first; // Ok: public\n    this.second; // Ok: public\n\n    this.third; // Ok: protected\n\n    this.fourth;\n    /*\n    Error: Property 'fourth' is private\n    and only accessible within class 'Base'.\n    */\n\n    this.fifth;\n    /*\n    Error: Property '#fifth' is not accessible outside\n    class 'Base' because it has a private identifier.\n    */\n  }\n}\n</code></pre> <p>The members\u00a0<code>first</code>,\u00a0<code>second</code>, and even the protected\u00a0<code>third</code>, are all accessible within the\u00a0<code>Derived</code>\u00a0class definition. With\u00a0<code>fourth</code>\u00a0and\u00a0<code>fifth</code>, however, they are both private members of\u00a0<code>Base</code>. Therefore, they are not accessible inside of\u00a0<code>Derived</code>.</p> <p>The example below shows how some members of\u00a0<code>Dervied</code>\u00a0can be invoked through an instance variable,\u00a0<code>derived</code>, while others are not as accessible. While\u00a0<code>third</code>\u00a0can be used within the actual\u00a0<code>Derived</code>\u00a0class, as a protected member, it cannot be used outside of the class with an instance variable.</p> <pre><code>const derived = new Derived();\n\nderived.first; // Ok: public\nderived.second; // Ok: public\n\nderived.third;\n/*\nError: Property 'third' is protected\nand only accessible within class 'Base'.\n*/\n\nderived.fourth;\n/*\nError: Property 'fourth' is private\nand only accessible within class 'Base'.\n*/\n\nderived.fifth;\n/*\nError: Property '#fifth' is not accessible outside\nclass 'Base' because it has a private identifier.\n*/\n</code></pre>"},{"location":"Code/How_to_TypeScript/#implementing-interfaces","title":"Implementing Interfaces","text":"<p>Classes can use the TypeScript\u00a0<code>interface</code>\u00a0keyword to further define the \u201cshape\u201d of the class object. This means that instances of the class are assignable to a given interface type.</p> <p>To use interfaces with classes, we use the\u00a0<code>implements</code>\u00a0keyword between the class name and name of the interface followed by the opening curly bracket\u00a0<code>{</code>.</p> <p>In this example, the\u00a0<code>Speaker</code>\u00a0interface has a single\u00a0<code>speak()</code>\u00a0method, so the\u00a0<code>SpeechGiver</code>\u00a0class may be marked as implementing it:</p> <pre><code>interface Speaker {\n  speak(): string;\n}\n\nclass SpeechGiver implements Speaker {\n  constructor(speech: string) {\n    this.speech = speech;\n  }\n\n  increaseEmphasis() {\n    this.speech += '!';\n  }\n\n  speak() {\n    return this.speech;\n  }\n}\n</code></pre> <p>Classes can implement more than one interface, as well, by a comma-separated (<code>,</code>) list of any number of interfaces.</p> <p>Marking a class as implementing an interface doesn\u2019t change anything about the class itself; it won\u2019t change the types of any members or implicitly add them to the class. It\u2019s purely a way to make sure the class implements the interface properly where it\u2019s declared, rather than when instances of the class happen to not match up with an interface.</p>"},{"location":"Code/How_to_TypeScript/#functions","title":"Functions","text":"<p>With\u00a0functions, TypeScript infers the types of its parameters as well as any return value.</p>"},{"location":"Code/How_to_TypeScript/#function-parameters","title":"Function Parameters","text":"<p>The types of function parameters work similarly to variable declarations. If the parameter has a default value, it will take on the type of that value. Otherwise, we may declare the type of that parameter by adding a type annotation after its name.</p> <p>Here, the\u00a0<code>logAgeAndName()</code>\u00a0function explicitly declares\u00a0<code>age</code>\u00a0to be of type\u00a0<code>number</code>, while\u00a0<code>name</code>\u00a0is inferred to be of type\u00a0<code>string</code>\u00a0from its default value:</p> <pre><code>function logAgeAndName(age: number, name = '(anonymous)') {\n  console.log(`${name}, age ${age}`);\n}\n\nlogAgeAndName(16, 'Mulan'); // ok: Mulan, age 16\n\nlogAgeAndName(0); // also ok: (anonymous), age 0\n\nlogAgeAndName('Mulan', 16);\n// Argument of type 'string' is not assignable to parameter of type 'number'\n</code></pre> <p>The last use of\u00a0<code>logAgeAndName()</code>\u00a0shows that the order of the parameters passed to the function matter. The first argument is expected to be of type\u00a0<code>number</code>\u00a0while the second is inferred to be of type\u00a0<code>string</code>.</p> <p>Optional Parameters</p> <p>Function parameters can be made optional by adding a\u00a0<code>?</code>\u00a0question mark after their name, before any type annotation. TypeScript will understand that they don\u2019t need to be provided when the function is invoked. Additionally, their type is a union that includes\u00a0<code>undefined</code>. This means that if a given function does not use the optional parameter, its value is set to\u00a0<code>undefined</code>.</p> <p>The following\u00a0<code>logFavoriteNumberAndReason()</code>\u00a0function indicates\u00a0<code>favorite</code>\u00a0as a required\u00a0<code>number</code>\u00a0and\u00a0<code>reason</code>\u00a0as an optional\u00a0<code>string</code>, so the function must be called with at least one\u00a0<code>number</code>\u00a0parameter:</p> <pre><code>function logFavoriteNumberAndReason(favorite: number, reason?: string) {\n  console.log(`Favorite: ${favorite}!`);\n\n  if (reason) {\n    console.log(`Because: ${reason}!`);\n  }\n}\n\nlogFavoriteNumberAndReason(7, 'an esoteric video game reference'); // Ok\nlogFavoriteNumberAndReason(9001); // Ok\n\nlogFavoriteNumberAndReason();\n// Error: Expected 1-2 arguments, but got 0.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#return-types","title":"Return Types","text":"<p>Most functions are written in a way that TypeScript can infer what value they return by looking at all the\u00a0<code>return</code>\u00a0statements in the function. Functions that don\u2019t return a value are considered to have a return type of\u00a0<code>void</code>.</p> <p>In this example, the\u00a0<code>getRandomFriend()</code>\u00a0function is inferred to return a\u00a0<code>string</code>\u00a0type because all\u00a0<code>return</code>\u00a0statements have a value of type\u00a0<code>string</code>, including the\u00a0<code>fallback</code>\u00a0parameter:</p> <pre><code>function getRandomFriend(fallback: string) {\n  switch (Math.floor(Math.random() * 5)) {\n    case 0:\n      return 'Josh';\n    case 1:\n      return 'Sara';\n    case 2:\n      return 'Sonny';\n    default:\n      return fallback;\n  }\n}\n\nconst friend = getRandomFriend('Codey'); // Type: string\n</code></pre> <p>The return type of a function can be declared by adding a type annotation after the\u00a0<code>)</code>\u00a0right parenthesis following its list of parameters. Doing so can be useful in two situations:</p> <ul> <li>We can make sure the function returns that type.</li> <li>TypeScript will not attempt to infer the return type of a recursive function.</li> </ul> <p>The following recursive\u00a0<code>fibonacci()</code>\u00a0function needs an explicit\u00a0<code>: number</code>\u00a0return type annotation for TypeScript to understand it. This returns type\u00a0<code>number</code>:</p> <pre><code>function fibonacci(i: number): number {\n  if (i &lt;= 1) {\n    return i;\n  }\n\n  return fibonacci(i - 1) + fibonacci(i - 2);\n}\n</code></pre>"},{"location":"Code/How_to_TypeScript/#function-types","title":"Function Types","text":"<p>Function types may be represented in the type system. They look a lot like an arrow lambda, but with the return type instead of the function body.</p> <p>This\u00a0<code>withIncrementedValue()</code>\u00a0takes in a\u00a0<code>receiveNewValue</code>\u00a0parameter function that itself takes in a\u00a0<code>number</code>\u00a0and returns nothing (<code>void</code>).</p> <pre><code>let value = 0;\n\nfunction withIncrementedValue(receiveNewValue: (newValue: number) =&gt; void) {\n  value += 1;\n  receiveNewValue(value);\n}\n\nwithIncrementedValue((receivedValue) =&gt; {\n  console.log('Got', receivedValue);\n});\n</code></pre> <p>Function parameter types may be inferred if their parent function is in a location with a known function type. In the prior example, the\u00a0<code>receivedValue</code>\u00a0parameter was inferred to be type\u00a0<code>number</code>.</p>"},{"location":"Code/How_to_TypeScript/#generics","title":"Generics","text":"<p>In TypeScript,\u00a0generics\u00a0are used to assign multiple types to a function or variable without the value losing that specific type information upon return. The\u00a0<code>any</code>\u00a0keyword is similar in that it accommodates any and all types. However, it will not retain specific type information.</p>"},{"location":"Code/How_to_TypeScript/#syntax","title":"Syntax","text":"<p>Generics are defined with\u00a0<code>&lt;</code> <code>&gt;</code>\u00a0brackets surrounding name(s) of the generic type(s), like\u00a0<code>Array&lt;T&gt;</code>\u00a0or\u00a0<code>Map&lt;Key, Value&gt;</code>.</p> <pre><code>interface MyType&lt;GenericValue&gt; {\n  value: GenericValue;\n}\n\nlet myVar: MyType&lt;string&gt; = { value: 'Hello, World!' };\n</code></pre> <p>Generic types can be used with the following:</p> <ul> <li>Classes</li> <li>Functions</li> <li>Interfaces</li> <li>Type aliases</li> </ul>"},{"location":"Code/How_to_TypeScript/#example-of-using-generics","title":"Example of Using Generics","text":"<p>In the following snippet,\u00a0<code>Box&lt;Value&gt;</code>\u00a0is a generic\u00a0<code>interface</code>\u00a0that with a generic\u00a0<code>Value</code>\u00a0type within. Next, two variables,\u00a0<code>numberBox</code>\u00a0and\u00a0<code>stringBox</code>, are explicitly declared to be of type\u00a0<code>Box&lt;number&gt;</code>\u00a0and\u00a0<code>Box&lt;string&gt;</code>, respectively:</p> <pre><code>interface Box&lt;Value&gt; {\n  value: Value;\n}\n\nlet numberBox: Box&lt;number&gt; = { value: 7 };\nlet stringBox: Box&lt;string&gt; = { value: 'Marathon' };\n</code></pre>"},{"location":"Code/How_to_TypeScript/#inferring-generic-types","title":"Inferring Generic Types","text":"<p>Generics can be inferred from usage when not explicitly provided.</p> <p>Here,\u00a0<code>logAndReturnValue&lt;Value&gt;</code>\u00a0is inferred first to have a generic\u00a0<code>Value</code>\u00a0of type\u00a0<code>Date</code>:</p> <pre><code>function logAndReturnValue&lt;Value&gt;(value: Value): Value {\n\n  console.log(value);\n  return value;\n}\n\nconst result = logAndReturnValue(new Date('2021-12-21')); // Type: Date\n</code></pre> <p>Here, the\u00a0<code>KeyValueStore</code>\u00a0class instance is inferred to have generic\u00a0<code>&lt;string, number&gt;</code>, and its\u00a0<code>makePair()</code>, therefore, returns type\u00a0<code>[string, number]</code>:</p> <pre><code>class KeyValueStore&lt;Key, Value&gt; {\n  #key: Key;\n  #value: Value;\n\n  constructor(key: Key, value: Value) {\n    this.#key = key;\n    this.#value = value;\n  }\n\n  makePair(): [Key, Value] {\n    return [this.#key, this.#value];\n  }\n}\n\nconst store = new KeyValueStore('year', 2794);\nconst pair = store.makePair(); // Type: [string, number]\n</code></pre>"},{"location":"Code/How_to_TypeScript/#interfaces","title":"Interfaces","text":"<p>Interfaces are used to \u201cshape\u201d an object by describing a certain set of members and/or type annotations.</p>"},{"location":"Code/How_to_TypeScript/#syntax_1","title":"Syntax","text":"<p>Interfaces may be declared by:</p> <ol> <li>Starting with the\u00a0<code>interface</code>\u00a0keyword.</li> <li>Giving the interface a name.</li> <li>Creating an object that contains a set of members and/or type annotations.</li> </ol> <pre><code>interface myType {\n  memberOne: string;\n  memberTwo: number;\n};\n\nlet myVar: myType = {\"My favorite number is \", 42 };\n</code></pre>"},{"location":"Code/How_to_TypeScript/#dog-interface-example","title":"<code>Dog</code>\u00a0Interface Example","text":"<p>In this example, the\u00a0<code>Dog</code>\u00a0interface declares\u00a0<code>fluffy</code>\u00a0and\u00a0<code>woof</code>\u00a0members. Any value declared to be of type\u00a0<code>Dog</code>\u00a0is therefore known to have those members:</p> <pre><code>interface Dog {\n  fluffy: boolean;\n  woof(): string;\n}\n\nfunction interactWithDog(dog: Dog) {\n  dog.woof();\n\n  if (dog.fluffy) {\n    console.log('What a floof!');\n  }\n\n  dog.bark();\n  // Error: Property 'bark' does not exist on type 'Dog'.\n}\n</code></pre> <p>Members that do not exist in the interface, such as\u00a0<code>bark()</code>, cannot be accessed and will throw a type error</p>"},{"location":"Code/How_to_TypeScript/#optional-members","title":"Optional Members","text":"<p>Here, the\u00a0<code>Pet</code>\u00a0interface uses\u00a0<code>?</code>\u00a0to set\u00a0<code>name</code>\u00a0as an optional member. The only member that is required is\u00a0<code>species</code>. Declaring an object of type\u00a0<code>Pet</code>\u00a0doesn\u2019t need a\u00a0<code>name</code>\u00a0but does need a\u00a0<code>species</code>:</p> <pre><code>interface Pet {\n  name?: string;\n  species: string;\n}\n\nlet anonymous: Pet = { // Ok\n  species: \"Dog\";\n};\n\nlet named: Pet = {\n  name: \"Emerald\",\n  species: \"Budgie\",\n};\n\nlet invalid: Pet = {\n  name: \"My Rock\",\n}\n// Error: Property 'species' is missing in type\n// '{ name: string; }' but required in type 'Pet'.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#interface-extensions","title":"Interface Extensions","text":"<p>Interfaces may be marked as\u00a0extending\u00a0another interface. Doing so indicates that the derived child interface (the interface extending others) includes all members from the base parent interfaces (the interface being extended).</p> <p>To mark an interface as extending other(s), add the\u00a0<code>extends</code>\u00a0keyword after its name followed by any number of interfaces to extend, with\u00a0<code>,</code>\u00a0commas between interface names.</p> <p>In this example, the\u00a0<code>Cat</code>\u00a0interface is given a\u00a0<code>.walk()</code>\u00a0method by being an extension of the\u00a0<code>Animal</code>\u00a0interface. However, instance of type\u00a0<code>Animal</code>\u00a0don\u2019t have access to members and methods defined in the\u00a0<code>Cat</code>\u00a0interface:</p> <pre><code>interface Animal {\n  walk(): void;\n}\n\ninterface Cat extends Animal {\n  fluffy: boolean;\n  purr(): string;\n}\n\nfunction workWithAnimals(animal: Animal, cat: Cat) {\n  animal.walk(); // Ok: defined on Animal\n  cat.walk(); // Ok: Cat extends Animal\n\n  if (cat.fluffy) {\n    // Ok: defined on Cat\n    console.log('Floof!!');\n    cat.purr(); // Ok: defined on Cat\n  }\n\n  animal.purr();\n  // Error: Property 'purr' does not exist on type 'Animal'.\n}\n</code></pre>"},{"location":"Code/How_to_TypeScript/#narrowing","title":"Narrowing","text":"<p>Narrowing\u00a0is a TypeScript process that refines a value of multiple types into a single, specific type.</p> <p>Union types\u00a0represent entities that may be one of two or more different types. Because they only allow access to members known to be on all possible types, we need to narrow down a value to a more specific type before using non-shared members.</p>"},{"location":"Code/How_to_TypeScript/#where-narrowing-happens","title":"Where Narrowing Happens","text":"<p>TypeScript recognizes types as being narrowed when it sees branches of JavaScript control-flow logic, including:</p> <ul> <li>Conditional statements like\u00a0<code>if/else</code>, ternaries, and switches.</li> <li>Looping statements, such as\u00a0<code>for</code>- and\u00a0<code>while</code>-loops.</li> <li>Truthiness checks for entities that don\u2019t point to\u00a0<code>false</code>-like values.</li> </ul> <p>If an area of code can only be reached if a value is of a particular type, TypeScript will infer the value to be of that type in that control flow branch.</p>"},{"location":"Code/How_to_TypeScript/#example-narrowing-with-if-statement","title":"Example: Narrowing with\u00a0<code>if</code>\u00a0Statement","text":"<p>In this example, our\u00a0<code>logValueIfExists()</code>\u00a0function accepts a\u00a0<code>value</code>\u00a0parameter with a union-type of\u00a0<code>string | undefined</code>. If we want TypeScript to explicitly narrow our\u00a0<code>value</code>\u00a0down to a\u00a0<code>string</code>\u00a0type, we can use an\u00a0<code>if</code>\u00a0statement to act as a \u201ctype guard\u201d.</p> <pre><code>function logValueIfExists(value: string | undefined) {\n  if (typeof value === 'string') {\n    console.log(`Yay! ${value}!`);\n  }\n}\n\nlogValueIfExists('narrowing');\n// output: Yay! narrowing!\n</code></pre> <p>We invoked\u00a0<code>logValueIfExists()</code>\u00a0with a string variable, \u201cnarrowing\u201d. Since the\u00a0<code>value</code>\u00a0is of type\u00a0<code>string</code>, the code in the\u00a0<code>if</code>\u00a0statement will run and a new string will be logged to the console.</p>"},{"location":"Code/How_to_TypeScript/#example-narrowing-with-truthiness","title":"Example: Narrowing With Truthiness","text":"<p>In the example below, we changed the\u00a0<code>if</code>\u00a0statement slightly to check if\u00a0<code>value</code>\u00a0has any value that is \u201ctruthy\u201d and doesn\u2019t evaluate to a falsey value such as\u00a0<code>0</code>,\u00a0<code>false</code>, or\u00a0<code>undefined</code>.</p> <pre><code>function logValueIfExists(value: string | undefined) {\n  value; // Type: string | undefined\n\n  if (value) {\n    console.log(`Yay! ${value}!`);\n    value; // Type: string\n    value.length; // Type: number\n  }\n\n  value.length;\n  // Error: Object is possibly 'undefined'.\n}\n\nlogValueIfExists('truthiness');\n// output: Yay! truthiness!\n\nlet newValue;\nlogValueIfExists(newValue);\n// newValue is \"undefined\"; nothing is logged.\n</code></pre> <p>Outside of the\u00a0<code>if</code>\u00a0statement,\u00a0<code>value</code>\u00a0is a union type (<code>string | undefined</code>) and is not narrowed, meaning that calling\u00a0<code>value.length</code>\u00a0won\u2019t work. Inside the\u00a0<code>if</code>\u00a0statement, because\u00a0<code>value</code>\u00a0was narrowed to a\u00a0<code>string</code>\u00a0type, it now has a\u00a0<code>length</code>\u00a0property.</p>"},{"location":"Code/How_to_TypeScript/#primitives","title":"Primitives","text":"<p>TypeScript supports primitives, which are the basic types in JavaScript that make up data other than functions and objects. TypeScript recognizes the following seven primitive types in JavaScript:</p> <ul> <li><code>bigint</code></li> <li><code>boolean</code></li> <li><code>null</code></li> <li><code>number</code></li> <li><code>string</code></li> <li><code>symbol</code></li> <li><code>undefined</code></li> </ul> <p>If a value such as a parameter or variable is declared to be one of these, it is allowed to be assigned any of the literal values that are of that primitive type.</p> <p>In this example, the variable\u00a0<code>decoration</code>\u00a0is initially declared to be type\u00a0<code>string</code>. This means that\u00a0<code>decoration</code>\u00a0is allowed to be assigned, and reassigned, a plethora of string values:</p> <pre><code>let decoration: string;\n\ndecoration = 'Cobweb';\ndecoration = \"Jack O'Lantern\";\ndecoration = 'Lights';\n</code></pre> <p>In other words:</p> <ul> <li>A primitive is a basic type of data, such as\u00a0<code>number</code>\u00a0or\u00a0<code>string</code></li> <li>A literal is an example of a primitive with a value, such as\u00a0<code>1337</code>\u00a0or\u00a0<code>\"ghost\"</code></li> </ul>"},{"location":"Code/How_to_TypeScript/#promises","title":"Promises","text":"<p>In TypeScript,\u00a0promises\u00a0handle asynchronous operations, providing better control over the flow of code.</p>"},{"location":"Code/How_to_TypeScript/#creating-promises","title":"Creating Promises","text":"<p>To create a new promise, use the\u00a0<code>new</code>\u00a0keyword followed by\u00a0<code>Promise</code>. The\u00a0<code>Promise</code>\u00a0constructor accepts a function which should take two parameters:</p> <ul> <li>A function to resolve the promise.</li> <li>A function to reject the promise.</li> </ul> <pre><code>const myPromise = new Promise((resolve, reject) =&gt; {\n  // Asynchronous code here\n});\n</code></pre> <p>Return Types</p> <p>In TypeScript, add a type annotation to a\u00a0<code>Promise</code>\u00a0to indicate the type of value it resolves to. If not defined, it defaults to\u00a0<code>any</code>. For example, to indicate a type of\u00a0<code>string</code>:</p> <pre><code>const myPromise: Promise&lt;string&gt; = new Promise((resolve, reject) =&gt; {\n  // This Promise resolves to a string\n});\n</code></pre> <p>Here,\u00a0<code>myPromise</code>\u00a0is a promise that resolves to a string. If a different type is used to resolve the promise, an error will occur.</p> <p>Note: The type annotation for promises is used for the value the promise is resolved to, not the value it is rejected with. All rejected promises should be rejected with an\u00a0<code>Error</code>\u00a0to ensure consistency.</p>"},{"location":"Code/How_to_TypeScript/#handling-promises","title":"Handling Promises","text":"<p>Once a promise is declared, use the\u00a0<code>.then()</code>\u00a0and\u00a0<code>.catch()</code>\u00a0methods to handle the success or failure of the asynchronous operation. The\u00a0<code>.then()</code>\u00a0method is called when the\u00a0<code>Promise</code>\u00a0is resolved, while the\u00a0<code>.catch()</code>\u00a0method is called when it is rejected.</p> <pre><code>myPromise\n  .then((value) =&gt; {\n    console.log('Promise resolved with value: ' + value);\n  })\n  .catch((error) =&gt; {\n    console.error('Promise rejected with error: ' + error);\n  });\n</code></pre>"},{"location":"Code/How_to_TypeScript/#asyncawait","title":"<code>async</code>/<code>await</code>","text":"<p>TypeScript also supports the\u00a0<code>async</code>/<code>await</code>\u00a0syntax, which is a more readable and an alternative way to handle promises.</p> <pre><code>async function myAsyncFunction() {\n  try {\n    const value = await myPromise;\n    console.log('Promise resolved with value: ' + value);\n  } catch (error) {\n    console.error('Promise rejected with error: ' + error);\n  }\n}\n</code></pre> <p>The\u00a0<code>async</code>\u00a0keyword indicates that a function returns a\u00a0<code>Promise</code>, and the\u00a0<code>await</code>\u00a0keyword is used to wait for the promise to be resolved. The\u00a0<code>try</code>/<code>catch</code>\u00a0block is used to handle rejected promises.</p>"},{"location":"Code/How_to_TypeScript/#tuples","title":"Tuples","text":"<p>In TypeScript, tuple types are defined as array-like containers with a fixed sized and the types of each member element already set.</p> <p>They have two distinct features:</p> <ul> <li>They know their size as well as exactly how many elements it contains.</li> <li>They already know the data type of each element.</li> </ul>"},{"location":"Code/How_to_TypeScript/#syntax_2","title":"Syntax","text":"<p>Tuples can have a mix of different data types and look like an array consisting of types as values inside:</p> <pre><code>type myTuple: [string, number, boolean] = [\"1\", 2, true];\n</code></pre> <p>They consist of a left square bracket\u00a0<code>[</code>, comma-separated list of types, and a right square bracket\u00a0<code>]</code>. The literal values, \u201c1\u201d, 2, and\u00a0<code>true</code>, must map to each element\u2019s types,\u00a0<code>string</code>,\u00a0<code>number</code>, and\u00a0<code>boolean</code>, in the correct order.</p>"},{"location":"Code/How_to_TypeScript/#destructuring-a-tuple","title":"Destructuring a Tuple","text":"<p>Like arrays and objects, tuples can be deconstructed into new variables that represents each element and their type. For example, here is a variable,\u00a0<code>popStar</code>, with a given tuple type. One the other line, the\u00a0<code>popStar</code>\u00a0is destructured into four separate variables through its tuple type:</p> <pre><code>const popStar: [string, number, string, boolean] = [\n  'Lil Nas X',\n  22,\n  'Old Town Road',\n  true,\n];\n\nconst [popStarName, age, popSingle, stillActive] = popStar;\n\nconsole.log(`${popStarName} is ${age} years old.`);\n\nconsole.log(\n  `They are ${\n    stillActive\n      ? 'still active in the industry'\n      : 'no longer active in the industry'\n  }.`\n);\n\nconsole.log(`One of their most famous songs is ${popSingle}.`);\n</code></pre> <p>Destructuring tuple types allows to be able to better interpolate their values and the output will be:</p> <pre><code>Lil Nas X is 22 years old.\nThey are still active in the industry.\nOne of their most famous songs is Old Town Road\n</code></pre>"},{"location":"Code/How_to_TypeScript/#storing-returned-values-in-tuples","title":"Storing Returned Values in Tuples","text":"<p>Tuples are particularly useful for representing multiple return values from functions, or groups of values that are meant to be used together.</p> <p>In this example, the\u00a0<code>positiveDifference()</code>\u00a0function is declared as returning an array consisting of a\u00a0<code>string</code>\u00a0and a\u00a0<code>boolean</code>\u00a0function:</p> <pre><code>function positiveDifference(left: number, right: number): [number, boolean] {\n  return left &gt; right ? [left - right, true] : [right - left, false];\n}\n\nconst [difference, isPositive] = positiveDifference(7, 49);\n\ndifference; // Type: number, Value: 42\nisPositive; // Type: boolean, Value: false\n</code></pre>"},{"location":"Code/How_to_TypeScript/#type-aliases","title":"Type Aliases","text":"<p>In TypeScript,\u00a0type aliases\u00a0create type definitions that can be reused throughout the code. This is unlike type unions and intersections, where the explicit type information is used repetitively.</p>"},{"location":"Code/How_to_TypeScript/#syntax_3","title":"Syntax","text":"<p>Type aliases require the\u00a0<code>type</code>\u00a0keyword and a name. They can be created in two ways.</p> <ul> <li>They can be set as an object that describes the members and their respective types.</li> </ul> <pre><code>type myType = {\n\n  memberOne: string;\n\n  memberTwo: number;\n\n}\n\nlet favoriteNum: myType = {\"my favorite number is \", 42}\n\n- They can also refer to other known types, like a union type.\n\ntype myType = string | number;\n\nlet favoriteNum: myType = '42';\n</code></pre> <p>Later on, whenever the name is used, TypeScript will assume this refers to the aliased value. Type aliases are similar to\u00a0<code>interface</code>s in terms of syntax and behavior. However, a key difference is that an\u00a0<code>interface</code>\u00a0can have members added later on whereas type aliases can\u2019t be changed after being defined.</p>"},{"location":"Code/How_to_TypeScript/#type-aliases-with-type-guards","title":"Type Aliases with Type Guards","text":"<p>In this example, the\u00a0<code>StringsIsh</code>\u00a0type alias can be used in place of the type union with several members. When applied to the\u00a0<code>logAllStrings()</code>\u00a0function:</p> <pre><code>type StringsIsh = string | string[] | null | undefined;\n\nfunction logAllStrings(values: StringsIsh) {\n  if (values === null || typeof values === 'undefined') return;\n\n  if (typeof values === 'string') {\n    console.log(values);\n  } else {\n    values.forEach(logAllStrings);\n  }\n}\n\nlogAllStrings('hello'); // Ok\nlogAllStrings(['hello', 'world']); // Also Ok\n</code></pre> <p>The first type guard checks to see if\u00a0<code>values</code>\u00a0matches either\u00a0<code>null</code>\u00a0or\u00a0<code>undefined</code>\u00a0in the\u00a0<code>StringIsh</code>\u00a0type alias. Next, the\u00a0<code>if/else</code>-statement checks for a base case of\u00a0<code>values</code>\u00a0being of type\u00a0<code>string</code>. Otherwise, it recursively invokes\u00a0<code>logAllStrings</code>\u00a0again.</p>"},{"location":"Code/How_to_TypeScript/#type-aliases-as-generics","title":"Type Aliases as Generics","text":"<p>Type aliases may be generic and may contain any type description, including:</p> <ul> <li>Primitives</li> <li>Literals</li> <li>Object types</li> </ul> <p>The following\u00a0<code>Result&lt;T&gt;</code>\u00a0type may contain a value,\u00a0<code>T</code>, or an object containing the value,\u00a0<code>{ value: T }</code>:</p> <pre><code>type Result&lt;T&gt; = T | { value: T };\n\nlet value: Result&lt;string&gt; = 'hello'; // Ok\n\nlet other: Result&lt;string&gt; = { value: 'world' }; // Also Ok\n</code></pre>"},{"location":"Code/How_to_TypeScript/#type-annotations","title":"Type Annotations","text":"<p>TypeScript uses type annotation to explicitly type things such as variables, functions, and classes.</p> <p>For the most part, TypeScript does a good job at inferring types from the codebase at build-time. However, some constructs in TypeScript, such as variables without an initial value or members of interfaces, don\u2019t have an initially inferable type. This is where type annotations can be really useful.</p>"},{"location":"Code/How_to_TypeScript/#syntax_4","title":"Syntax","text":"<p>Type annotations consist of a\u00a0<code>:</code>\u00a0colon followed by the name of a type. They exist after the name of the construct they\u2019re declaring the type for.</p> <pre><code>// Class and interface members\n\nclass myClass {\n  memberOne: string;\n  memberTwo: string;\n}\n\ninterface myInterface {\n  memberOne: string;\n  memberTwo: number;\n  memberThree: boolean;\n}\n\n// Function Parameters\n\nfunction myFunc(memberOne: string, memberTwo: string) {\n  ...\n}\n\n// Function Returns\nfunction myFunc(memberOne, memberTwo): string {\n  return memberOne + memberTwo;\n}\n\n// Variables\nlet myVar: string = \"Hello, World!\";\n</code></pre>"},{"location":"Code/How_to_TypeScript/#type-annotations-and-dates","title":"Type Annotations and\u00a0<code>Date</code>s","text":"<p>In the following code snippet, the\u00a0<code>date</code>\u00a0variable doesn\u2019t have an initial value, but with a\u00a0<code>Date</code>\u00a0type annotation. Later on, when\u00a0<code>date</code>\u00a0is assigned a value, it must receive a value of type\u00a0<code>Date</code>. The first assignment of a new\u00a0<code>Date</code>\u00a0is the right type. However, the second assignment to a number,\u00a0<code>10.31</code>, is not:</p> <pre><code>let date: Date;\n\ndate = new Date('2021-10-31'); // Ok\n\ndate = 10.31;\n// Error: type 'number' is not assignable to type 'Date'.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#after-typescript-is-compiled","title":"After TypeScript is Compiled","text":"<p>TypeScript type annotations don\u2019t get compiled down to the output JavaScript, as they are a TypeScript syntax and not JavaScript. Removing comments from the above code would make it look roughly like this if run through the TypeScript compiler (<code>tsc</code>):</p> <pre><code>let date;\ndate = new Date('2021-10-31');\ndate = 10.31;\n</code></pre>"},{"location":"Code/How_to_TypeScript/#unions","title":"Unions","text":"<p>Some values may be one of multiple possible types. TypeScript refers to these \u201ceither or\u201d types as type unions. This refers to the set theory concept of being a \u201cunion\u201d of multiple possible types.</p>"},{"location":"Code/How_to_TypeScript/#syntax_5","title":"Syntax","text":"<p>A union type is written as a series of other types with a\u00a0<code>|</code>\u00a0vertical pipe between them.</p> <pre><code>let myVar: number | string = '42';\n</code></pre>"},{"location":"Code/How_to_TypeScript/#union-example","title":"Union Example","text":"<p>For example, the following\u00a0<code>logEither()</code>\u00a0function takes in a value that can be either a\u00a0<code>number</code>\u00a0or\u00a0<code>string</code>:</p> <pre><code>function logEither(value: number | string) {\n  console.log(value);\n}\n\nlogEither('Durandal'); // Ok\nlogEither(7777777); // Also Ok\n\nlogEither(false);\n// Error: Type 'boolean' is not assignable to type 'number | string'.\n</code></pre> <p>Optional values, including optional parameters and members, are implicitly type\u00a0<code>| undefined</code>.</p>"},{"location":"Code/How_to_TypeScript/#union-type-members","title":"Union type Members","text":"<p>When a value is a union type, TypeScript will only allow access to members that exist on all possible types.</p> <p>In this example, we use a pair of ternary operators to create a\u00a0<code>value</code>. This set the type of\u00a0<code>value</code>\u00a0to\u00a0<code>boolean | string | string[]</code>\u00a0and the only shared member is the\u00a0<code>toString()</code>\u00a0function. No others, such as\u00a0<code>length</code>, are allowed since it can\u2019t be applied to a\u00a0<code>boolean</code>-type value:</p> <pre><code>// Type: boolean | string | string[]\nconst value =\n  Math.random() &gt; 0.5\n    ? false\n    : Math.random() &gt; 0.5\n    ? 'Leela'\n    : ['Durandal', 'Thoth'];\n\nvalue.toString(); // Ok: exists on all three\n\nvalue.length;\n/*\n * Error: Property 'length' does not exist\n * on type 'false | \"Leela\" | string[]'.\n * Property 'length' does not exist on type 'false'.\n */\n</code></pre> <p>See #Narrowing\u00a0for how to narrow down union types into their more specific types.</p>"},{"location":"Code/How_to_TypeScript/#variables","title":"Variables","text":"<p>In TypeScript, besides being typed, variables are expected to follow the same rules and guidelines that they do with JavaScript.</p>"},{"location":"Code/How_to_TypeScript/#syntax_6","title":"Syntax","text":"<p>TypeScript variables are generally inferred to be whatever basic type of value they are initially assigned with. Later in code, only values that are of that same basic type may be assigned to the variable. The term for whether a type is assignable to another type is assignability.</p> <pre><code>let myVar: string;\n\nmyVar = 'Hello'; // Ok\nmyVar = 'World!'; // Also Ok\nmyVar = 42; // Not Ok: Type 'number' is not assignable to type 'string'.\n</code></pre>"},{"location":"Code/How_to_TypeScript/#examples-with-variables","title":"Examples with Variables","text":"<p>In this snippet of code, TypeScript sees that the\u00a0<code>spooky</code>\u00a0variable is initially assigned a\u00a0<code>boolean</code>\u00a0value, so it believes the\u00a0<code>spooky</code>\u00a0variable should always be of type\u00a0<code>boolean</code>. Assigning a variable of type\u00a0<code>boolean</code>\u00a0later on is allowed, as a type is assignable to itself:</p> <pre><code>let spooky = true;\n\nspooky = false; // Ok\n</code></pre> <p>If a variable is assigned a different type of value, TypeScript will notice and emit a type checking complaint. Those type checking complaints can be surfaced as:</p> <ul> <li>Errors on the command-line.</li> <li>Syntax highlights in the code editor.</li> </ul> <p>In this code snippet, the\u00a0<code>scary</code>\u00a0variable is initially assigned the value\u00a0<code>\"skeletons\"</code>, which is a\u00a0<code>string</code>\u00a0type. Later, assigning the decimal number\u00a0<code>10.31</code>\u00a0is not allowed because a\u00a0<code>number</code>\u00a0type is not assignable to a variable of type\u00a0<code>string</code>:</p> <pre><code>let scary = 'skeletons';\n\nscary = 10.31;\n// Error: Type 'number' is not assignable to type 'string'\n</code></pre>"},{"location":"Code/How_to_Flask/Installation/","title":"Installation","text":""},{"location":"Code/How_to_Flask/Installation/#python-version","title":"Python Version","text":"<p>We recommend using the latest version of Python. Flask supports Python 3.8 and newer.</p>"},{"location":"Code/How_to_Flask/Installation/#dependencies","title":"Dependencies","text":"<p>These distributions will be installed automatically when installing Flask.</p> <ul> <li>Werkzeug\u00a0implements WSGI, the standard Python interface between applications and servers.</li> <li>Jinja\u00a0is a template language that renders the pages your application serves.</li> <li>MarkupSafe\u00a0comes with Jinja. It escapes untrusted input when rendering templates to avoid injection attacks.</li> <li>ItsDangerous\u00a0securely signs data to ensure its integrity. This is used to protect Flask\u2019s session cookie.</li> <li>Click\u00a0is a framework for writing command line applications. It provides the\u00a0<code>flask</code>\u00a0command and allows adding custom management commands.</li> <li>Blinker\u00a0provides support for\u00a0Signals.</li> </ul>"},{"location":"Code/How_to_Flask/Installation/#optional-dependencies","title":"Optional dependencies","text":"<p>These distributions will not be installed automatically. Flask will detect and use them if you install them.</p> <ul> <li>python-dotenv\u00a0enables support for\u00a0Environment Variables From dotenv\u00a0when running\u00a0<code>flask</code>\u00a0commands. </li> <li>Watchdog\u00a0provides a faster, more efficient reloader for the development server.</li> </ul>"},{"location":"Code/How_to_Flask/Installation/#greenlet","title":"Greenlet","text":"<p>You may choose to use gevent or eventlet with your application. In this case, greenlet&gt;=1.0 is required. When using PyPy, PyPy&gt;=7.3.7 is required.</p> <p>These are not minimum supported versions, they only indicate the first versions that added necessary features. You should use the latest versions of each.</p>"},{"location":"Code/How_to_Flask/Installation/#virtual-environments","title":"Virtual environments","text":"<p>Use a virtual environment to manage the dependencies for your project, both in development and in production.</p> <p>What problem does a virtual environment solve? The more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself. Newer versions of libraries for one project can break compatibility in another project.</p> <p>Virtual environments are independent groups of Python libraries, one for each project. Packages installed for one project will not affect other projects or the operating system\u2019s packages.</p> <p>Python comes bundled with the\u00a0<code>venv</code>\u00a0module to create virtual environments.</p>"},{"location":"Code/How_to_Flask/Installation/#create-an-environment","title":"Create an environment","text":"<p>Create a project folder and a\u00a0<code>.venv</code>\u00a0folder within:</p> <pre><code>mkdir myproject\ncd myproject\npy -3 -m venv .venv\n</code></pre>"},{"location":"Code/How_to_Flask/Installation/#activate-the-environment","title":"Activate the environment","text":"<p>Before you work on your project, activate the corresponding environment:</p> <pre><code>.venv\\Scripts\\activate\n</code></pre> <p>Your shell prompt will change to show the name of the activated environment.</p>"},{"location":"Code/How_to_Flask/Installation/#install-flask","title":"Install Flask","text":"<p>Within the activated environment, use the following command to install Flask:</p> <pre><code>pip install Flask\n</code></pre> <p>Flask is now installed. Check out the #Quickstart\u00a0or go to the\u00a0Documentation Overview.</p>"},{"location":"Code/How_to_Flask/Quickstart/","title":"Quickstart","text":""},{"location":"Code/How_to_Flask/Quickstart/#a-minimal-application","title":"A Minimal Application","text":"<p>A minimal Flask application looks something like this:</p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello_world():\n    return \"&lt;p&gt;Hello, World!&lt;/p&gt;\"\n</code></pre> <p>So what did that code do?</p> <ol> <li>First we imported the\u00a0<code>Flask</code>\u00a0class. An instance of this class will be our WSGI application.</li> <li>Next we create an instance of this class. The first argument is the name of the application\u2019s module or package.\u00a0<code>__name__</code>\u00a0is a convenient shortcut for this that is appropriate for most cases. This is needed so that Flask knows where to look for resources such as templates and static files.</li> <li>We then use the\u00a0<code>route()</code>\u00a0decorator to tell Flask what URL should trigger our function.</li> <li>The function returns the message we want to display in the user\u2019s browser. The default content type is HTML, so HTML in the string will be rendered by the browser.</li> </ol> <p>Save it as\u00a0<code>hello.py</code>\u00a0or something similar. Make sure to not call your application\u00a0<code>flask.py</code>\u00a0because this would conflict with Flask itself.</p> <p>To run the application, use the\u00a0<code>flask</code>\u00a0command or\u00a0<code>python\u00a0-m\u00a0flask</code>. You need to tell the Flask where your application is with the\u00a0<code>--app</code>\u00a0option.</p> <pre><code>flask --app hello run\n * Serving Flask app 'hello'\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n</code></pre> <p>Application Discovery Behavior</p> <p>As a shortcut, if the file is named\u00a0<code>app.py</code>\u00a0or\u00a0<code>wsgi.py</code>, you don\u2019t have to use\u00a0<code>--app</code>. See\u00a0Command Line Interface\u00a0for more details.</p> <p>This launches a very simple builtin server, which is good enough for testing but probably not what you want to use in production. For deployment options see\u00a0Deploying to Production.</p> <p>Now head over to\u00a0http://127.0.0.1:5000/, and you should see your hello world greeting.</p> <p>If another program is already using port 5000, you\u2019ll see\u00a0<code>OSError:\u00a0[Errno\u00a098]</code>\u00a0or\u00a0<code>OSError:\u00a0[WinError\u00a010013]</code>\u00a0when the server tries to start. See\u00a0Address already in use\u00a0for how to handle that.</p> <p>Externally Visible Server</p> <p>If you run the server you will notice that the server is only accessible from your own computer, not from any other in the network. This is the default because in debugging mode a user of the application can execute arbitrary Python code on your computer.</p> <p>If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding\u00a0<code>--host=0.0.0.0</code>\u00a0to the command line:</p> <p>$ flask run --host=0.0.0.0</p> <p>This tells your operating system to listen on all public IPs.</p>"},{"location":"Code/How_to_Flask/Quickstart/#debug-mode","title":"Debug Mode","text":"<p>The\u00a0<code>flask\u00a0run</code>\u00a0command can do more than just start the development server. By enabling debug mode, the server will automatically reload if code changes, and will show an interactive debugger in the browser if an error occurs during a request.</p> <p></p> <p>Warning</p> <p>The debugger allows executing arbitrary Python code from the browser. It is protected by a pin, but still represents a major security risk. Do not run the development server or debugger in a production environment.</p> <p>To enable debug mode, use the\u00a0<code>--debug</code>\u00a0option.</p> <pre><code>flask --app hello run --debug\n * Serving Flask app 'hello'\n * Debug mode: on\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: nnn-nnn-nnn\n</code></pre>"},{"location":"Code/How_to_Flask/Quickstart/#html-escaping","title":"HTML Escaping","text":"<p>When returning HTML (the default response type in Flask), any user-provided values rendered in the output must be escaped to protect from injection attacks. HTML templates rendered with Jinja, introduced later, will do this automatically.</p> <p><code>escape()</code>, shown here, can be used manually. It is omitted in most examples for brevity, but you should always be aware of how you\u2019re using untrusted data.</p> <pre><code>from markupsafe import escape\n\n@app.route(\"/&lt;name&gt;\")\ndef hello(name):\n    return f\"Hello, {escape(name)}!\"\n</code></pre> <p>If a user managed to submit the name\u00a0<code>&lt;script&gt;alert(\"bad\")&lt;/script&gt;</code>, escaping causes it to be rendered as text, rather than running the script in the user\u2019s browser.</p> <p><code>&lt;name&gt;</code>\u00a0in the route captures a value from the URL and passes it to the view function. These variable rules are explained below.</p>"},{"location":"Code/How_to_Flask/Quickstart/#routing","title":"Routing","text":"<p>Modern web applications use meaningful URLs to help users. Users are more likely to like a page and come back if the page uses a meaningful URL they can remember and use to directly visit a page.</p> <p>Use the\u00a0<code>route()</code>\u00a0decorator to bind a function to a URL.</p> <pre><code>@app.route('/')\ndef index():\n    return 'Index Page'\n\n@app.route('/hello')\ndef hello():\n    return 'Hello, World'\n</code></pre> <p>You can do more! You can make parts of the URL dynamic and attach multiple rules to a function.</p>"},{"location":"Code/How_to_Flask/Quickstart/#variable-rules","title":"Variable Rules","text":"<p>You can add variable sections to a URL by marking sections with\u00a0<code>&lt;variable_name&gt;</code>. Your function then receives the\u00a0<code>&lt;variable_name&gt;</code>\u00a0as a keyword argument. Optionally, you can use a converter to specify the type of the argument like\u00a0<code>&lt;converter:variable_name&gt;</code>.</p> <pre><code>from markupsafe import escape\n\n@app.route('/user/&lt;username&gt;')\ndef show_user_profile(username):\n    # show the user profile for that user\n    return f'User {escape(username)}'\n\n@app.route('/post/&lt;int:post_id&gt;')\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return f'Post {post_id}'\n\n@app.route('/path/&lt;path:subpath&gt;')\ndef show_subpath(subpath):\n    # show the subpath after /path/\n    return f'Subpath {escape(subpath)}'\n</code></pre> <p>Converter types:</p> <code>string</code> (default) accepts any text without a slash <code>int</code> accepts positive integers <code>float</code> accepts positive floating point values <code>path</code> like\u00a0<code>string</code>\u00a0but also accepts slashes <code>uuid</code> accepts UUID strings"},{"location":"Code/How_to_Flask/Quickstart/#unique-urls-redirection-behavior","title":"Unique URLs / Redirection Behavior","text":"<p>The following two rules differ in their use of a trailing slash.</p> <pre><code>@app.route('/projects/')\ndef projects():\n    return 'The project page'\n\n@app.route('/about')\ndef about():\n    return 'The about page'\n</code></pre> <p>The canonical URL for the\u00a0<code>projects</code>\u00a0endpoint has a trailing slash. It\u2019s similar to a folder in a file system. If you access the URL without a trailing slash (<code>/projects</code>), Flask redirects you to the canonical URL with the trailing slash (<code>/projects/</code>).</p> <p>The canonical URL for the\u00a0<code>about</code>\u00a0endpoint does not have a trailing slash. It\u2019s similar to the pathname of a file. Accessing the URL with a trailing slash (<code>/about/</code>) produces a 404 \u201cNot Found\u201d error. This helps keep URLs unique for these resources, which helps search engines avoid indexing the same page twice.</p>"},{"location":"Code/How_to_Flask/Quickstart/#url-building","title":"URL Building","text":"<p>To build a URL to a specific function, use the\u00a0<code>url_for()</code>\u00a0function. It accepts the name of the function as its first argument and any number of keyword arguments, each corresponding to a variable part of the URL rule. Unknown variable parts are appended to the URL as query parameters.</p> <p>Why would you want to build URLs using the URL reversing function\u00a0<code>url_for()</code>\u00a0instead of hard-coding them into your templates?</p> <ol> <li>Reversing is often more descriptive than hard-coding the URLs.</li> <li>You can change your URLs in one go instead of needing to remember to manually change hard-coded URLs.</li> <li>URL building handles escaping of special characters transparently.</li> <li>The generated paths are always absolute, avoiding unexpected behavior of relative paths in browsers.</li> <li>If your application is placed outside the URL root, for example, in\u00a0<code>/myapplication</code>\u00a0instead of\u00a0<code>/</code>,\u00a0<code>url_for()</code>\u00a0properly handles that for you.</li> </ol> <p>For example, here we use the\u00a0<code>test_request_context()</code>\u00a0method to try out\u00a0<code>url_for()</code>.\u00a0<code>test_request_context()</code>\u00a0tells Flask to behave as though it\u2019s handling a request even while we use a Python shell. See\u00a0Context Locals.</p> <pre><code>from flask import url_for\n\n@app.route('/')\ndef index():\n    return 'index'\n\n@app.route('/login')\ndef login():\n    return 'login'\n\n@app.route('/user/&lt;username&gt;')\ndef profile(username):\n    return f'{username}\\'s profile'\n\nwith app.test_request_context():\n    print(url_for('index'))\n    print(url_for('login'))\n    print(url_for('login', next='/'))\n    print(url_for('profile', username='John Doe'))\n</code></pre> <pre><code>/\n/login\n/login?next=/\n/user/John%20Doe\n</code></pre>"},{"location":"Code/How_to_Flask/Quickstart/#http-methods","title":"HTTP Methods","text":"<p>Web applications use different HTTP methods when accessing URLs. You should familiarize yourself with the HTTP methods as you work with Flask. By default, a route only answers to\u00a0<code>GET</code>\u00a0requests. You can use the\u00a0<code>methods</code>\u00a0argument of the\u00a0<code>route()</code>\u00a0decorator to handle different HTTP methods.</p> <pre><code>from flask import request\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        return do_the_login()\n    else:\n        return show_the_login_form()\n</code></pre> <p>The example above keeps all methods for the route within one function, which can be useful if each part uses some common data.</p> <p>You can also separate views for different methods into different functions. Flask provides a shortcut for decorating such routes with\u00a0<code>get()</code>,\u00a0<code>post()</code>, etc. for each common HTTP method.</p> <pre><code>@app.get('/login')\ndef login_get():\n    return show_the_login_form()\n\n@app.post('/login')\ndef login_post():\n    return do_the_login()\n</code></pre> <p>If\u00a0<code>GET</code>\u00a0is present, Flask automatically adds support for the\u00a0<code>HEAD</code>\u00a0method and handles\u00a0<code>HEAD</code>\u00a0requests according to the\u00a0HTTP RFC. Likewise,\u00a0<code>OPTIONS</code>\u00a0is automatically implemented for you.</p>"},{"location":"Code/How_to_Flask/Quickstart/#static-files","title":"Static Files","text":"<p>Dynamic web applications also need static files. That\u2019s usually where the CSS and JavaScript files are coming from. Ideally your web server is configured to serve them for you, but during development Flask can do that as well. Just create a folder called\u00a0<code>static</code>\u00a0in your package or next to your module and it will be available at\u00a0<code>/static</code>\u00a0on the application.</p> <p>To generate URLs for static files, use the special\u00a0<code>'static'</code>\u00a0endpoint name:</p> <pre><code>url_for('static', filename='style.css')\n</code></pre> <p>The file has to be stored on the filesystem as\u00a0<code>static/style.css</code>.</p>"},{"location":"Code/How_to_Flask/Quickstart/#rendering-templates","title":"Rendering Templates","text":"<p>Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the\u00a0Jinja2\u00a0template engine for you automatically.</p> <p>Templates can be used to generate any type of text file. For web applications, you\u2019ll primarily be generating HTML pages, but you can also generate markdown, plain text for emails, and anything else.</p> <p>For a reference to HTML, CSS, and other web APIs, use the\u00a0MDN Web Docs.</p> <p>To render a template you can use the\u00a0<code>render_template()</code>\u00a0method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as keyword arguments. Here\u2019s a simple example of how to render a template:</p> <pre><code>from flask import render_template\n\n@app.route('/hello/')\n@app.route('/hello/&lt;name&gt;')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n</code></pre> <p>Flask will look for templates in the\u00a0<code>templates</code>\u00a0folder. So if your application is a module, this folder is next to that module, if it\u2019s a package it\u2019s actually inside your package:</p> <p>Case 1: a module:</p> <pre><code>/application.py\n/templates\n    /hello.html\n</code></pre> <p>Case 2: a package:</p> <pre><code>/application\n    /__init__.py\n    /templates\n        /hello.html\n</code></pre> <p>For templates you can use the full power of Jinja2 templates. Head over to the official\u00a0Jinja2 Template Documentation\u00a0for more information.</p> <p>Here is an example template:</p> <pre><code>&lt;!doctype html&gt;\n&lt;title&gt;Hello from Flask&lt;/title&gt;\n{% if name %}\n  &lt;h1&gt;Hello {{ name }}!&lt;/h1&gt;\n{% else %}\n  &lt;h1&gt;Hello, World!&lt;/h1&gt;\n{% endif %}\n</code></pre> <p>Inside templates you also have access to the\u00a0<code>config</code>,\u00a0<code>request</code>,\u00a0<code>session</code>\u00a0and\u00a0<code>g</code> [1]\u00a0objects as well as the\u00a0<code>url_for()</code>\u00a0and\u00a0<code>get_flashed_messages()</code>\u00a0functions.</p> <p>Templates are especially useful if inheritance is used. If you want to know how that works, see\u00a0Template Inheritance. Basically template inheritance makes it possible to keep certain elements on each page (like header, navigation and footer).</p> <p>Automatic escaping is enabled, so if\u00a0<code>name</code>\u00a0contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the\u00a0<code>Markup</code>\u00a0class or by using the\u00a0<code>|safe</code>\u00a0filter in the template. Head over to the Jinja 2 documentation for more examples.</p> <p>Here is a basic introduction to how the\u00a0<code>Markup</code>\u00a0class works:</p> <pre><code>&gt;&gt;&gt; from markupsafe import Markup\n&gt;&gt;&gt; Markup('&lt;strong&gt;Hello %s!&lt;/strong&gt;') % '&lt;blink&gt;hacker&lt;/blink&gt;'\nMarkup('&lt;strong&gt;Hello &amp;lt;blink&amp;gt;hacker&amp;lt;/blink&amp;gt;!&lt;/strong&gt;')\n&gt;&gt;&gt; Markup.escape('&lt;blink&gt;hacker&lt;/blink&gt;')\nMarkup('&amp;lt;blink&amp;gt;hacker&amp;lt;/blink&amp;gt;')\n&gt;&gt;&gt; Markup('&lt;em&gt;Marked up&lt;/em&gt; &amp;raquo; HTML').striptags()\n'Marked up \u00bb HTML'\n</code></pre>"},{"location":"Code/How_to_Flask/Quickstart/#accessing-request-data","title":"Accessing Request Data","text":"<p>For web applications it\u2019s crucial to react to the data a client sends to the server. In Flask this information is provided by the global\u00a0<code>request</code>\u00a0object. If you have some experience with Python you might be wondering how that object can be global and how Flask manages to still be threadsafe. The answer is context locals:</p>"},{"location":"Code/How_to_Flask/Quickstart/#context-locals","title":"Context Locals","text":"<p>Certain objects in Flask are global objects, but not of the usual kind. These objects are actually proxies to objects that are local to a specific context. What a mouthful. But that is actually quite easy to understand.</p> <p>Imagine the context being the handling thread. A request comes in and the web server decides to spawn a new thread (or something else, the underlying object is capable of dealing with concurrency systems other than threads). When Flask starts its internal request handling it figures out that the current thread is the active context and binds the current application and the WSGI environments to that context (thread). It does that in an intelligent way so that one application can invoke another application without breaking.</p> <p>So what does this mean to you? Basically you can completely ignore that this is the case unless you are doing something like unit testing. You will notice that code which depends on a request object will suddenly break because there is no request object. The solution is creating a request object yourself and binding it to the context. The easiest solution for unit testing is to use the\u00a0<code>test_request_context()</code>\u00a0context manager. In combination with the\u00a0<code>with</code>\u00a0statement it will bind a test request so that you can interact with it. Here is an example:</p> <pre><code>from flask import request\n\nwith app.test_request_context('/hello', method='POST'):\n    # now you can do something with the request until the\n    # end of the with block, such as basic assertions:\n    assert request.path == '/hello'\n    assert request.method == 'POST'\n</code></pre> <p>The other possibility is passing a whole WSGI environment to the\u00a0<code>request_context()</code>\u00a0method:</p> <pre><code>with app.request_context(environ):\n    assert request.method == 'POST'\n</code></pre>"},{"location":"Code/How_to_Flask/Quickstart/#the-request-object","title":"The Request Object","text":"<p>The request object is documented in the API section and we will not cover it here in detail (see\u00a0<code>Request</code>). Here is a broad overview of some of the most common operations. First of all you have to import it from the\u00a0<code>flask</code>\u00a0module:</p> <pre><code>from flask import request\n</code></pre> <p>The current request method is available by using the\u00a0<code>method</code>\u00a0attribute. To access form data (data transmitted in a\u00a0<code>POST</code>\u00a0or\u00a0<code>PUT</code>\u00a0request) you can use the\u00a0<code>form</code>\u00a0attribute. Here is a full example of the two attributes mentioned above:</p> <pre><code>@app.route('/login', methods=['POST', 'GET'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if valid_login(request.form['username'],\n                       request.form['password']):\n            return log_the_user_in(request.form['username'])\n        else:\n            error = 'Invalid username/password'\n    # the code below is executed if the request method\n    # was GET or the credentials were invalid\n    return render_template('login.html', error=error)\n</code></pre> <p>What happens if the key does not exist in the\u00a0<code>form</code>\u00a0attribute? In that case a special\u00a0<code>KeyError</code>\u00a0is raised. You can catch it like a standard\u00a0<code>KeyError</code>\u00a0but if you don\u2019t do that, a HTTP 400 Bad Request error page is shown instead. So for many situations you don\u2019t have to deal with that problem.</p> <p>To access parameters submitted in the URL (<code>?key=value</code>) you can use the\u00a0<code>args</code>\u00a0attribute:</p> <pre><code>searchword = request.args.get('key', '')\n</code></pre> <p>We recommend accessing URL parameters with\u00a0<code>get</code>\u00a0or by catching the\u00a0<code>KeyError</code>\u00a0because users might change the URL and presenting them a 400 bad request page in that case is not user friendly.</p> <p>For a full list of methods and attributes of the request object, head over to the\u00a0<code>Request</code>\u00a0documentation.</p>"},{"location":"Code/How_to_Flask/Quickstart/#file-uploads","title":"File Uploads","text":"<p>You can handle uploaded files with Flask easily. Just make sure not to forget to set the\u00a0<code>enctype=\"multipart/form-data\"</code>\u00a0attribute on your HTML form, otherwise the browser will not transmit your files at all.</p> <p>Uploaded files are stored in memory or at a temporary location on the filesystem. You can access those files by looking at the\u00a0<code>files</code>\u00a0attribute on the request object. Each uploaded file is stored in that dictionary. It behaves just like a standard Python\u00a0<code>file</code>\u00a0object, but it also has a\u00a0<code>save()</code>\u00a0method that allows you to store that file on the filesystem of the server. Here is a simple example showing how that works:</p> <pre><code>from flask import request\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        f = request.files['the_file']\n        f.save('/var/www/uploads/uploaded_file.txt')\n    ...\n</code></pre> <p>If you want to know how the file was named on the client before it was uploaded to your application, you can access the\u00a0<code>filename</code>\u00a0attribute. However please keep in mind that this value can be forged so never ever trust that value. If you want to use the filename of the client to store the file on the server, pass it through the\u00a0<code>secure_filename()</code>\u00a0function that Werkzeug provides for you:</p> <pre><code>from werkzeug.utils import secure_filename\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        file = request.files['the_file']\n        file.save(f\"/var/www/uploads/{secure_filename(file.filename)}\")\n    ...\n</code></pre> <p>For some better examples, see\u00a0Uploading Files.</p>"},{"location":"Code/How_to_Flask/Quickstart/#cookies","title":"Cookies","text":"<p>To access cookies you can use the\u00a0<code>cookies</code>\u00a0attribute. To set cookies you can use the\u00a0<code>set_cookie</code>\u00a0method of response objects. The\u00a0<code>cookies</code>\u00a0attribute of request objects is a dictionary with all the cookies the client transmits. If you want to use sessions, do not use the cookies directly but instead use the\u00a0Sessions\u00a0in Flask that add some security on top of cookies for you.</p> <p>Reading cookies:</p> <pre><code>from flask import request\n\n@app.route('/')\ndef index():\n    username = request.cookies.get('username')\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\n</code></pre> <p>Storing cookies:</p> <pre><code>from flask import make_response\n\n@app.route('/')\ndef index():\n    resp = make_response(render_template(...))\n    resp.set_cookie('username', 'the username')\n    return resp\n</code></pre> <p>Note that cookies are set on response objects. Since you normally just return strings from the view functions Flask will convert them into response objects for you. If you explicitly want to do that you can use the\u00a0<code>make_response()</code>\u00a0function and then modify it.</p> <p>Sometimes you might want to set a cookie at a point where the response object does not exist yet. This is possible by utilizing the\u00a0Deferred Request Callbacks\u00a0pattern.</p> <p>For this also see\u00a0About Responses.</p>"},{"location":"Code/How_to_Flask/Quickstart/#redirects-and-errors","title":"Redirects and Errors","text":"<p>To redirect a user to another endpoint, use the\u00a0<code>redirect()</code>\u00a0function; to abort a request early with an error code, use the\u00a0<code>abort()</code>\u00a0function:</p> <pre><code>from flask import abort, redirect, url_for\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n@app.route('/login')\ndef login():\n    abort(401)\n    this_is_never_executed()\n</code></pre> <p>This is a rather pointless example because a user will be redirected from the index to a page they cannot access (401 means access denied) but it shows how that works.</p> <p>By default a black and white error page is shown for each error code. If you want to customize the error page, you can use the\u00a0<code>errorhandler()</code>\u00a0decorator:</p> <pre><code>from flask import render_template\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('page_not_found.html'), 404\n</code></pre> <p>Note the\u00a0<code>404</code>\u00a0after the\u00a0<code>render_template()</code>\u00a0call. This tells Flask that the status code of that page should be 404 which means not found. By default 200 is assumed which translates to: all went well.</p> <p>See\u00a0Handling Application Errors\u00a0for more details.</p>"},{"location":"Code/How_to_Flask/Quickstart/#about-responses","title":"About Responses","text":"<p>The return value from a view function is automatically converted into a response object for you. If the return value is a string it\u2019s converted into a response object with the string as response body, a\u00a0<code>200\u00a0OK</code>\u00a0status code and a\u00a0text/html\u00a0mimetype. If the return value is a dict or list,\u00a0<code>jsonify()</code>\u00a0is called to produce a response. The logic that Flask applies to converting return values into response objects is as follows:</p> <ol> <li>If a response object of the correct type is returned it\u2019s directly returned from the view.</li> <li>If it\u2019s a string, a response object is created with that data and the default parameters.</li> <li>If it\u2019s an iterator or generator returning strings or bytes, it is treated as a streaming response.</li> <li>If it\u2019s a dict or list, a response object is created using\u00a0<code>jsonify()</code>.</li> <li>If a tuple is returned the items in the tuple can provide extra information. Such tuples have to be in the form\u00a0<code>(response,\u00a0status)</code>,\u00a0<code>(response,\u00a0headers)</code>, or\u00a0<code>(response,\u00a0status,\u00a0headers)</code>. The\u00a0<code>status</code>\u00a0value will override the status code and\u00a0<code>headers</code>\u00a0can be a list or dictionary of additional header values.</li> <li>If none of that works, Flask will assume the return value is a valid WSGI application and convert that into a response object.</li> </ol> <p>If you want to get hold of the resulting response object inside the view you can use the\u00a0<code>make_response()</code>\u00a0function.</p> <p>Imagine you have a view like this:</p> <pre><code>from flask import render_template\n\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('error.html'), 404\n</code></pre> <p>You just need to wrap the return expression with\u00a0<code>make_response()</code>\u00a0and get the response object to modify it, then return it:</p> <pre><code>from flask import make_response\n\n@app.errorhandler(404)\ndef not_found(error):\n    resp = make_response(render_template('error.html'), 404)\n    resp.headers['X-Something'] = 'A value'\n    return resp\n</code></pre>"},{"location":"Code/How_to_Flask/Quickstart/#apis-with-json","title":"APIs with JSON","text":"<p>A common response format when writing an API is JSON. It\u2019s easy to get started writing such an API with Flask. If you return a\u00a0<code>dict</code>\u00a0or\u00a0<code>list</code>\u00a0from a view, it will be converted to a JSON response.</p> <pre><code>@app.route(\"/me\")\ndef me_api():\n    user = get_current_user()\n    return {\n        \"username\": user.username,\n        \"theme\": user.theme,\n        \"image\": url_for(\"user_image\", filename=user.image),\n    }\n\n@app.route(\"/users\")\ndef users_api():\n    users = get_all_users()\n    return [user.to_json() for user in users]\n</code></pre> <p>This is a shortcut to passing the data to the\u00a0<code>jsonify()</code>\u00a0function, which will serialize any supported JSON data type. That means that all the data in the dict or list must be JSON serializable.</p> <p>For complex types such as database models, you\u2019ll want to use a serialization library to convert the data to valid JSON types first. There are many serialization libraries and Flask API extensions maintained by the community that support more complex applications.</p>"},{"location":"Code/How_to_Flask/Quickstart/#sessions","title":"Sessions","text":"<p>In addition to the request object there is also a second object called\u00a0<code>session</code>\u00a0which allows you to store information specific to a user from one request to the next. This is implemented on top of cookies for you and signs the cookies cryptographically. What this means is that the user could look at the contents of your cookie but not modify it, unless they know the secret key used for signing.</p> <p>In order to use sessions you have to set a secret key. Here is how sessions work:</p> <pre><code>from flask import session\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n@app.route('/')\ndef index():\n    if 'username' in session:\n        return f'Logged in as {session[\"username\"]}'\n    return 'You are not logged in'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        session['username'] = request.form['username']\n        return redirect(url_for('index'))\n    return '''\n        &lt;form method=\"post\"&gt;\n            &lt;p&gt;&lt;input type=text name=username&gt;\n            &lt;p&gt;&lt;input type=submit value=Login&gt;\n        &lt;/form&gt;\n    '''\n\n@app.route('/logout')\ndef logout():\n    # remove the username from the session if it's there\n    session.pop('username', None)\n    return redirect(url_for('index'))\n</code></pre> <p>A note on cookie-based sessions: Flask will take the values you put into the session object and serialize them into a cookie. If you are finding some values do not persist across requests, cookies are indeed enabled, and you are not getting a clear error message, check the size of the cookie in your page responses compared to the size supported by web browsers.</p> <p>Besides the default client-side based sessions, if you want to handle sessions on the server-side instead, there are several Flask extensions that support this.</p>"},{"location":"Code/How_to_Flask/Quickstart/#message-flashing","title":"Message Flashing","text":"<p>Good applications and user interfaces are all about feedback. If the user does not get enough feedback they will probably end up hating the application. Flask provides a really simple way to give feedback to a user with the flashing system. The flashing system basically makes it possible to record a message at the end of a request and access it on the next (and only the next) request. This is usually combined with a layout template to expose the message.</p> <p>To flash a message use the\u00a0<code>flash()</code>\u00a0method, to get hold of the messages you can use\u00a0<code>get_flashed_messages()</code>\u00a0which is also available in the templates. See\u00a0Message Flashing\u00a0for a full example.</p>"},{"location":"Code/How_to_Flask/Quickstart/#logging","title":"Logging","text":"<p>Sometimes you might be in a situation where you deal with data that should be correct, but actually is not. For example you may have some client-side code that sends an HTTP request to the server but it\u2019s obviously malformed. This might be caused by a user tampering with the data, or the client code failing. Most of the time it\u2019s okay to reply with\u00a0<code>400\u00a0Bad\u00a0Request</code>\u00a0in that situation, but sometimes that won\u2019t do and the code has to continue working.</p> <p>You may still want to log that something fishy happened. This is where loggers come in handy. As of Flask 0.3 a logger is preconfigured for you to use.</p> <p>Here are some example log calls:</p> <pre><code>app.logger.debug('A value for debugging')\napp.logger.warning('A warning occurred (%d apples)', 42)\napp.logger.error('An error occurred')\n</code></pre> <p>The attached\u00a0<code>logger</code>\u00a0is a standard logging\u00a0<code>Logger</code>, so head over to the official\u00a0<code>logging</code>\u00a0docs for more information.</p> <p>See\u00a0Handling Application Errors.</p>"},{"location":"Code/How_to_Flask/Quickstart/#hooking-in-wsgi-middleware","title":"Hooking in WSGI Middleware","text":"<p>To add WSGI middleware to your Flask application, wrap the application\u2019s\u00a0<code>wsgi_app</code>\u00a0attribute. For example, to apply Werkzeug\u2019s\u00a0<code>ProxyFix</code>\u00a0middleware for running behind Nginx:</p> <p><pre><code>from werkzeug.middleware.proxy_fix import ProxyFix\napp.wsgi_app = ProxyFix(app.wsgi_app)\n</code></pre> Wrapping\u00a0<code>app.wsgi_app</code>\u00a0instead of\u00a0<code>app</code>\u00a0means that\u00a0<code>app</code>\u00a0still points at your Flask application, not at the middleware, so you can continue to use and configure\u00a0<code>app</code>\u00a0directly.</p>"},{"location":"Code/How_to_Flask/Quickstart/#using-flask-extensions","title":"Using Flask Extensions","text":"<p>Extensions are packages that help you accomplish common tasks. For example, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple and easy to use with Flask.</p> <p>For more on Flask extensions, see\u00a0Extensions.</p>"},{"location":"Code/How_to_Flask/Quickstart/#deploying-to-a-web-server","title":"# Deploying to a Web Server","text":"<p>Ready to deploy your new Flask app? See\u00a0Deploying to Production. This tutorial will walk you through creating a basic blog application called Flaskr. Users will be able to register, log in, create posts, and edit or delete their own posts. You will be able to package and install the application on other computers.</p> <p></p> <p>It\u2019s assumed that you\u2019re already familiar with Python. The\u00a0official tutorial\u00a0in the Python docs is a great way to learn or review first.</p> <p>While it\u2019s designed to give a good starting point, the tutorial doesn\u2019t cover all of Flask\u2019s features. Check out the\u00a0Quickstart\u00a0for an overview of what Flask can do, then dive into the docs to find out more. The tutorial only uses what\u2019s provided by Flask and Python. In another project, you might decide to use\u00a0Extensions\u00a0or other libraries to make some tasks simpler.</p> <p></p> <p>Flask is flexible. It doesn\u2019t require you to use any particular project or code layout. However, when first starting, it\u2019s helpful to use a more structured approach. This means that the tutorial will require a bit of boilerplate up front, but it\u2019s done to avoid many common pitfalls that new developers encounter, and it creates a project that\u2019s easy to expand on. Once you become more comfortable with Flask, you can step out of this structure and take full advantage of Flask\u2019s flexibility.</p> <p></p> <p>The tutorial project is available as an example in the Flask repository, if you want to compare your project with the final product as you follow the tutorial.</p>"},{"location":"Code/How_to_Flask/Tutorial/","title":"Tutorial","text":""},{"location":"Code/How_to_Flask/Tutorial/#project-layout","title":"Project Layout","text":"<p>Create a project directory and enter it:</p> <pre><code>$ mkdir flask-tutorial\n$ cd flask-tutorial\n</code></pre> <p>Then follow the\u00a0installation instructions\u00a0to set up a Python virtual environment and install Flask for your project.</p> <p>The tutorial will assume you\u2019re working from the\u00a0<code>flask-tutorial</code>\u00a0directory from now on. The file names at the top of each code block are relative to this directory.</p> <p>A Flask application can be as simple as a single file.</p> <p><code>hello.py</code></p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, World!'\n</code></pre> <p>However, as a project gets bigger, it becomes overwhelming to keep all the code in one file. Python projects use\u00a0packages\u00a0to organize code into multiple modules that can be imported where needed, and the tutorial will do this as well.</p> <p>The project directory will contain:</p> <ul> <li><code>flaskr/</code>, a Python package containing your application code and files.</li> <li><code>tests/</code>, a directory containing test modules.</li> <li><code>.venv/</code>, a Python virtual environment where Flask and other dependencies are installed.</li> <li>Installation files telling Python how to install your project.</li> <li>Version control config, such as\u00a0git. You should make a habit of using some type of version control for all your projects, no matter the size.</li> <li>Any other project files you might add in the future.</li> </ul> <p>By the end, your project layout will look like this:</p> <pre><code>/home/user/Projects/flask-tutorial\n\u251c\u2500\u2500 flaskr/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 db.py\n\u2502   \u251c\u2500\u2500 schema.sql\n\u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u251c\u2500\u2500 blog.py\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 base.html\n\u2502   \u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 login.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 register.html\n\u2502   \u2502   \u2514\u2500\u2500 blog/\n\u2502   \u2502       \u251c\u2500\u2500 create.html\n\u2502   \u2502       \u251c\u2500\u2500 index.html\n\u2502   \u2502       \u2514\u2500\u2500 update.html\n\u2502   \u2514\u2500\u2500 static/\n\u2502       \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 conftest.py\n\u2502   \u251c\u2500\u2500 data.sql\n\u2502   \u251c\u2500\u2500 test_factory.py\n\u2502   \u251c\u2500\u2500 test_db.py\n\u2502   \u251c\u2500\u2500 test_auth.py\n\u2502   \u2514\u2500\u2500 test_blog.py\n\u251c\u2500\u2500 .venv/\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 MANIFEST.in\n</code></pre> <p>If you\u2019re using version control, the following files that are generated while running your project should be ignored. There may be other files based on the editor you use. In general, ignore files that you didn\u2019t write. For example, with git:</p> <p><code>.gitignore</code></p> <pre><code>.venv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#application-setup","title":"Application Setup","text":"<p>A Flask application is an instance of the\u00a0<code>Flask</code>\u00a0class. Everything about the application, such as configuration and URLs, will be registered with this class.</p> <p>The most straightforward way to create a Flask application is to create a global\u00a0<code>Flask</code>\u00a0instance directly at the top of your code, like how the \u201cHello, World!\u201d example did on the previous page. While this is simple and useful in some cases, it can cause some tricky issues as the project grows.</p> <p>Instead of creating a\u00a0<code>Flask</code>\u00a0instance globally, you will create it inside a function. This function is known as the\u00a0application factory. Any configuration, registration, and other setup the application needs will happen inside the function, then the application will be returned.</p>"},{"location":"Code/How_to_Flask/Tutorial/#the-application-factory","title":"The Application Factory","text":"<p>It\u2019s time to start coding! Create the\u00a0<code>flaskr</code>\u00a0directory and add the\u00a0<code>__init__.py</code>\u00a0file. The\u00a0<code>__init__.py</code>\u00a0serves double duty: it will contain the application factory, and it tells Python that the\u00a0<code>flaskr</code>\u00a0directory should be treated as a package.</p> <pre><code>$ mkdir flaskr\n</code></pre> <p><code>flaskr/__init__.py</code></p> <pre><code>import os\n\nfrom flask import Flask\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n</code></pre> <p><code>create_app</code>\u00a0is the application factory function. You\u2019ll add to it later in the tutorial, but it already does a lot.</p> <ol> <li> <p><code>app\u00a0=\u00a0Flask(__name__,\u00a0instance_relative_config=True)</code>\u00a0creates the\u00a0<code>Flask</code>\u00a0instance.</p> <ul> <li><code>__name__</code>\u00a0is the name of the current Python module. The app needs to know where it\u2019s located to set up some paths, and\u00a0<code>__name__</code>\u00a0is a convenient way to tell it that.</li> <li><code>instance_relative_config=True</code>\u00a0tells the app that configuration files are relative to the\u00a0instance folder. The instance folder is located outside the\u00a0<code>flaskr</code>\u00a0package and can hold local data that shouldn\u2019t be committed to version control, such as configuration secrets and the database file.</li> </ul> </li> <li> <p><code>app.config.from_mapping()</code>\u00a0sets some default configuration that the app will use:</p> <ul> <li><code>SECRET_KEY</code>\u00a0is used by Flask and extensions to keep data safe. It\u2019s set to\u00a0<code>'dev'</code>\u00a0to provide a convenient value during development, but it should be overridden with a random value when deploying.</li> <li><code>DATABASE</code>\u00a0is the path where the SQLite database file will be saved. It\u2019s under\u00a0<code>app.instance_path</code>, which is the path that Flask has chosen for the instance folder. You\u2019ll learn more about the database in the next section.</li> </ul> </li> <li> <p><code>app.config.from_pyfile()</code>\u00a0overrides the default configuration with values taken from the\u00a0<code>config.py</code>\u00a0file in the instance folder if it exists. For example, when deploying, this can be used to set a real\u00a0<code>SECRET_KEY</code>.</p> <ul> <li><code>test_config</code>\u00a0can also be passed to the factory, and will be used instead of the instance configuration. This is so the tests you\u2019ll write later in the tutorial can be configured independently of any development values you have configured.</li> </ul> </li> <li> <p><code>os.makedirs()</code>\u00a0ensures that\u00a0<code>app.instance_path</code>\u00a0exists. Flask doesn\u2019t create the instance folder automatically, but it needs to be created because your project will create the SQLite database file there.</p> </li> <li> <p><code>@app.route()</code>\u00a0creates a simple route so you can see the application working before getting into the rest of the tutorial. It creates a connection between the URL\u00a0<code>/hello</code>\u00a0and a function that returns a response, the string\u00a0<code>'Hello,\u00a0World!'</code>\u00a0in this case.</p> </li> </ol>"},{"location":"Code/How_to_Flask/Tutorial/#run-the-application","title":"Run The Application","text":"<p>Now you can run your application using the\u00a0<code>flask</code>\u00a0command. From the terminal, tell Flask where to find your application, then run it in debug mode. Remember, you should still be in the top-level\u00a0<code>flask-tutorial</code>\u00a0directory, not the\u00a0<code>flaskr</code>\u00a0package.</p> <p>Debug mode shows an interactive debugger whenever a page raises an exception, and restarts the server whenever you make changes to the code. You can leave it running and just reload the browser page as you follow the tutorial.</p> <p>$ flask --app flaskr run --debug</p> <p>You\u2019ll see output similar to this:</p> <ul> <li>Serving Flask app \"flaskr\"</li> <li>Debug mode: on</li> <li>Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</li> <li>Restarting with stat</li> <li>Debugger is active!</li> <li>Debugger PIN: nnn-nnn-nnn</li> </ul> <p>Visit\u00a0http://127.0.0.1:5000/hello\u00a0in a browser and you should see the \u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask web application!</p> <p>If another program is already using port 5000, you\u2019ll see\u00a0<code>OSError:\u00a0[Errno\u00a098]</code>\u00a0or\u00a0<code>OSError:\u00a0[WinError\u00a010013]</code>\u00a0when the server tries to start. See\u00a0Address already in use\u00a0for how to handle that.</p>"},{"location":"Code/How_to_Flask/Tutorial/#define-and-access-the-database","title":"Define and Access the Database","text":"<p>The application will use a\u00a0SQLite\u00a0database to store users and posts. Python comes with built-in support for SQLite in the\u00a0<code>sqlite3</code>\u00a0module.</p> <p>SQLite is convenient because it doesn\u2019t require setting up a separate database server and is built-in to Python. However, if concurrent requests try to write to the database at the same time, they will slow down as each write happens sequentially. Small applications won\u2019t notice this. Once you become big, you may want to switch to a different database.</p> <p>The tutorial doesn\u2019t go into detail about SQL. If you are not familiar with it, the SQLite docs describe the\u00a0language.</p>"},{"location":"Code/How_to_Flask/Tutorial/#connect-to-the-database","title":"Connect to the Database","text":"<p>The first thing to do when working with a SQLite database (and most other Python database libraries) is to create a connection to it. Any queries and operations are performed using the connection, which is closed after the work is finished.</p> <p>In web applications this connection is typically tied to the request. It is created at some point when handling a request, and closed before the response is sent.</p> <p><code>flaskr/db.py</code></p> <pre><code>import sqlite3\n\nimport click\nfrom flask import current_app, g\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n</code></pre> <p><code>g</code>\u00a0is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if\u00a0<code>get_db</code>\u00a0is called a second time in the same request.</p> <p><code>current_app</code>\u00a0is another special object that points to the Flask application handling the request. Since you used an application factory, there is no application object when writing the rest of your code.\u00a0<code>get_db</code>\u00a0will be called when the application has been created and is handling a request, so\u00a0<code>current_app</code>\u00a0can be used.</p> <p><code>sqlite3.connect()</code>\u00a0establishes a connection to the file pointed at by the\u00a0<code>DATABASE</code>\u00a0configuration key. This file doesn\u2019t have to exist yet, and won\u2019t until you initialize the database later.</p> <p><code>sqlite3.Row</code>\u00a0tells the connection to return rows that behave like dicts. This allows accessing the columns by name.</p> <p><code>close_db</code>\u00a0checks if a connection was created by checking if\u00a0<code>g.db</code>\u00a0was set. If the connection exists, it is closed. Further down you will tell your application about the\u00a0<code>close_db</code>\u00a0function in the application factory so that it is called after each request.</p>"},{"location":"Code/How_to_Flask/Tutorial/#create-the-tables","title":"Create the Tables","text":"<p>In SQLite, data is stored in\u00a0tables\u00a0and\u00a0columns. These need to be created before you can store and retrieve data. Flaskr will store users in the\u00a0<code>user</code>\u00a0table, and posts in the\u00a0<code>post</code>\u00a0table. Create a file with the SQL commands needed to create empty tables:</p> <p><code>flaskr/schema.sql</code></p> <pre><code>DROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT UNIQUE NOT NULL,\n  password TEXT NOT NULL\n);\n\nCREATE TABLE post (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  author_id INTEGER NOT NULL,\n  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  FOREIGN KEY (author_id) REFERENCES user (id)\n);\n</code></pre> <p>Add the Python functions that will run these SQL commands to the\u00a0<code>db.py</code>\u00a0file:</p> <p><code>flaskr/db.py</code></p> <p><pre><code>def init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n@click.command('init-db')\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n</code></pre> <code>open_resource()</code>\u00a0opens a file relative to the\u00a0<code>flaskr</code>\u00a0package, which is useful since you won\u2019t necessarily know where that location is when deploying the application later.\u00a0<code>get_db</code>\u00a0returns a database connection, which is used to execute the commands read from the file.</p> <p><code>click.command()</code>\u00a0defines a command line command called\u00a0<code>init-db</code>\u00a0that calls the\u00a0<code>init_db</code>\u00a0function and shows a success message to the user. You can read\u00a0Command Line Interface\u00a0to learn more about writing commands.</p>"},{"location":"Code/How_to_Flask/Tutorial/#register-with-the-application","title":"Register with the Application","text":"<p>The\u00a0<code>close_db</code>\u00a0and\u00a0<code>init_db_command</code>\u00a0functions need to be registered with the application instance; otherwise, they won\u2019t be used by the application. However, since you\u2019re using a factory function, that instance isn\u2019t available when writing the functions. Instead, write a function that takes an application and does the registration.</p> <p><code>flaskr/db.py</code></p> <pre><code>def init_app(app):\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n</code></pre> <p><code>app.teardown_appcontext()</code>\u00a0tells Flask to call that function when cleaning up after returning the response.</p> <p><code>app.cli.add_command()</code>\u00a0adds a new command that can be called with the\u00a0<code>flask</code>\u00a0command.</p> <p>Import and call this function from the factory. Place the new code at the end of the factory function before returning the app.</p> <p><code>flaskr/__init__.py</code></p> <pre><code>def create_app():\n    app = ...\n    # existing code omitted\n\n    from . import db\n    db.init_app(app)\n\n    return app\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#initialize-the-database-file","title":"Initialize the Database File","text":"<p>Now that\u00a0<code>init-db</code>\u00a0has been registered with the app, it can be called using the\u00a0<code>flask</code>\u00a0command, similar to the\u00a0<code>run</code>\u00a0command from the previous page.</p> <p>Note</p> <p>If you\u2019re still running the server from the previous page, you can either stop the server, or run this command in a new terminal. If you use a new terminal, remember to change to your project directory and activate the env as described in\u00a0Installation.</p> <p>Run the\u00a0<code>init-db</code>\u00a0command:</p> <pre><code>$ flask --app flaskr init-db\nInitialized the database.\n</code></pre> <p>There will now be a\u00a0<code>flaskr.sqlite</code>\u00a0file in the\u00a0<code>instance</code>\u00a0folder in your project.</p>"},{"location":"Code/How_to_Flask/Tutorial/#blueprints-and-views","title":"Blueprints and Views","text":"<p>A view function is the code you write to respond to requests to your application. Flask uses patterns to match the incoming request URL to the view that should handle it. The view returns data that Flask turns into an outgoing response. Flask can also go the other direction and generate a URL to a view based on its name and arguments.</p>"},{"location":"Code/How_to_Flask/Tutorial/#create-a-blueprint","title":"Create a Blueprint","text":"<p>A\u00a0<code>Blueprint</code>\u00a0is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.</p> <p>Flaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you\u2019ll write the authentication one first.</p> <p><code>flaskr/auth.py</code></p> <pre><code>import functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n</code></pre> <p>This creates a\u00a0<code>Blueprint</code>\u00a0named\u00a0<code>'auth'</code>. Like the application object, the blueprint needs to know where it\u2019s defined, so\u00a0<code>__name__</code>\u00a0is passed as the second argument. The\u00a0<code>url_prefix</code>\u00a0will be prepended to all the URLs associated with the blueprint.</p> <p>Import and register the blueprint from the factory using\u00a0<code>app.register_blueprint()</code>. Place the new code at the end of the factory function before returning the app.</p> <p><code>flaskr/__init__.py</code></p> <pre><code>def create_app():\n    app = ...\n    # existing code omitted\n\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n</code></pre> <p>The authentication blueprint will have views to register new users and to log in and log out.</p>"},{"location":"Code/How_to_Flask/Tutorial/#the-first-view-register","title":"The First View: Register","text":"<p>When the user visits the\u00a0<code>/auth/register</code>\u00a0URL, the\u00a0<code>register</code>\u00a0view will return\u00a0HTML\u00a0with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page.</p> <p>For now you will just write the view code. On the next page, you\u2019ll write templates to generate the HTML form.</p> <p><code>flaskr/auth.py</code></p> <pre><code>@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    \"INSERT INTO user (username, password) VALUES (?, ?)\",\n                    (username, generate_password_hash(password)),\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for(\"auth.login\"))\n\n        flash(error)\n\n    return render_template('auth/register.html')\n</code></pre> <p>Here\u2019s what the\u00a0<code>register</code>\u00a0view function is doing:</p> <ol> <li><code>@bp.route</code>\u00a0associates the URL\u00a0<code>/register</code>\u00a0with the\u00a0<code>register</code>\u00a0view function. When Flask receives a request to\u00a0<code>/auth/register</code>, it will call the\u00a0<code>register</code>\u00a0view and use the return value as the response.</li> <li>If the user submitted the form,\u00a0<code>request.method</code>\u00a0will be\u00a0<code>'POST'</code>. In this case, start validating the input.</li> <li><code>request.form</code>\u00a0is a special type of\u00a0<code>dict</code>\u00a0mapping submitted form keys and values. The user will input their\u00a0<code>username</code>\u00a0and\u00a0<code>password</code>.</li> <li>Validate that\u00a0<code>username</code>\u00a0and\u00a0<code>password</code>\u00a0are not empty.</li> <li>If validation succeeds, insert the new user data into the database.<ul> <li><code>db.execute</code>\u00a0takes a SQL query with\u00a0<code>?</code>\u00a0placeholders for any user input, and a tuple of values to replace the placeholders with. The database library will take care of escaping the values so you are not vulnerable to a\u00a0SQL injection attack.</li> <li>For security, passwords should never be stored in the database directly. Instead,\u00a0<code>generate_password_hash()</code>\u00a0is used to securely hash the password, and that hash is stored. Since this query modifies data,\u00a0<code>db.commit()</code>\u00a0needs to be called afterwards to save the changes.</li> <li>An\u00a0<code>sqlite3.IntegrityError</code>\u00a0will occur if the username already exists, which should be shown to the user as another validation error.</li> </ul> </li> <li>After storing the user, they are redirected to the login page.\u00a0<code>url_for()</code>\u00a0generates the URL for the login view based on its name. This is preferable to writing the URL directly as it allows you to change the URL later without changing all code that links to it.\u00a0<code>redirect()</code>\u00a0generates a redirect response to the generated URL.</li> <li>If validation fails, the error is shown to the user.\u00a0<code>flash()</code>\u00a0stores messages that can be retrieved when rendering the template.</li> <li>When the user initially navigates to\u00a0<code>auth/register</code>, or there was a validation error, an HTML page with the registration form should be shown.\u00a0<code>render_template()</code>\u00a0will render a template containing the HTML, which you\u2019ll write in the next step of the tutorial.</li> </ol>"},{"location":"Code/How_to_Flask/Tutorial/#login","title":"Login","text":"<p>This view follows the same pattern as the\u00a0<code>register</code>\u00a0view above.</p> <p><code>flaskr/auth.py</code></p> <pre><code>@bp.route('/login', methods=('GET', 'POST'))\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n        user = db.execute(\n            'SELECT * FROM user WHERE username = ?', (username,)\n        ).fetchone()\n\n        if user is None:\n            error = 'Incorrect username.'\n        elif not check_password_hash(user['password'], password):\n            error = 'Incorrect password.'\n\n        if error is None:\n            session.clear()\n            session['user_id'] = user['id']\n            return redirect(url_for('index'))\n\n        flash(error)\n\n    return render_template('auth/login.html')\n</code></pre> <p>There are a few differences from the\u00a0<code>register</code>\u00a0view:</p> <ol> <li>The user is queried first and stored in a variable for later use.     <code>fetchone()</code>\u00a0returns one row from the query. If the query returned no results, it returns\u00a0<code>None</code>. Later,\u00a0<code>fetchall()</code>\u00a0will be used, which returns a list of all results.</li> <li><code>check_password_hash()</code>\u00a0hashes the submitted password in the same way as the stored hash and securely compares them. If they match, the password is valid.</li> <li><code>session</code>\u00a0is a\u00a0<code>dict</code>\u00a0that stores data across requests. When validation succeeds, the user\u2019s\u00a0<code>id</code>\u00a0is stored in a new session. The data is stored in a\u00a0cookie\u00a0that is sent to the browser, and the browser then sends it back with subsequent requests. Flask securely\u00a0signs\u00a0the data so that it can\u2019t be tampered with.</li> </ol> <p>Now that the user\u2019s\u00a0<code>id</code>\u00a0is stored in the\u00a0<code>session</code>, it will be available on subsequent requests. At the beginning of each request, if a user is logged in their information should be loaded and made available to other views.</p> <p><code>flaskr/auth.py</code></p> <pre><code>@bp.before_app_request\ndef load_logged_in_user():\n    user_id = session.get('user_id')\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = get_db().execute(\n            'SELECT * FROM user WHERE id = ?', (user_id,)\n        ).fetchone()\n</code></pre> <p><code>bp.before_app_request()</code>\u00a0registers a function that runs before the view function, no matter what URL is requested.\u00a0<code>load_logged_in_user</code>\u00a0checks if a user id is stored in the\u00a0<code>session</code>\u00a0and gets that user\u2019s data from the database, storing it on\u00a0<code>g.user</code>, which lasts for the length of the request. If there is no user id, or if the id doesn\u2019t exist,\u00a0<code>g.user</code>\u00a0will be\u00a0<code>None</code>.</p>"},{"location":"Code/How_to_Flask/Tutorial/#logout","title":"Logout","text":"<p>To log out, you need to remove the user id from the\u00a0<code>session</code>. Then\u00a0<code>load_logged_in_user</code>\u00a0won\u2019t load a user on subsequent requests.</p> <p><code>flaskr/auth.py</code></p> <pre><code>@bp.route('/logout')\ndef logout():\n    session.clear()\n    return redirect(url_for('index'))\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#require-authentication-in-other-views","title":"Require Authentication in Other Views","text":"<p>Creating, editing, and deleting blog posts will require a user to be logged in. A\u00a0decorator\u00a0can be used to check this for each view it\u2019s applied to.</p> <p><code>flaskr/auth.py</code></p> <pre><code>def login_required(view):\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for('auth.login'))\n\n        return view(**kwargs)\n\n    return wrapped_view\n</code></pre> <p>This decorator returns a new view function that wraps the original view it\u2019s applied to. The new function checks if a user is loaded and redirects to the login page otherwise. If a user is loaded the original view is called and continues normally. You\u2019ll use this decorator when writing the blog views.</p>"},{"location":"Code/How_to_Flask/Tutorial/#endpoints-and-urls","title":"Endpoints and URLs","text":"<p>The\u00a0<code>url_for()</code>\u00a0function generates the URL to a view based on a name and arguments. The name associated with a view is also called the\u00a0endpoint, and by default it\u2019s the same as the name of the view function.</p> <p>For example, the\u00a0<code>hello()</code>\u00a0view that was added to the app factory earlier in the tutorial has the name\u00a0<code>'hello'</code>\u00a0and can be linked to with\u00a0<code>url_for('hello')</code>. If it took an argument, which you\u2019ll see later, it would be linked to using\u00a0<code>url_for('hello',\u00a0who='World')</code>.</p> <p>When using a blueprint, the name of the blueprint is prepended to the name of the function, so the endpoint for the\u00a0<code>login</code>\u00a0function you wrote above is\u00a0<code>'auth.login'</code>\u00a0because you added it to the\u00a0<code>'auth'</code>\u00a0blueprint.</p>"},{"location":"Code/How_to_Flask/Tutorial/#template","title":"Template","text":"<p>You\u2019ve written the authentication views for your application, but if you\u2019re running the server and try to go to any of the URLs, you\u2019ll see a\u00a0<code>TemplateNotFound</code>\u00a0error. That\u2019s because the views are calling\u00a0<code>render_template()</code>, but you haven\u2019t written the templates yet. The template files will be stored in the\u00a0<code>templates</code>\u00a0directory inside the\u00a0<code>flaskr</code>\u00a0package.</p> <p>Templates are files that contain static data as well as placeholders for dynamic data. A template is rendered with specific data to produce a final document. Flask uses the\u00a0Jinja\u00a0template library to render templates.</p> <p>In your application, you will use templates to render\u00a0HTML\u00a0which will display in the user\u2019s browser. In Flask, Jinja is configured to\u00a0autoescape\u00a0any data that is rendered in HTML templates. This means that it\u2019s safe to render user input; any characters they\u2019ve entered that could mess with the HTML, such as\u00a0<code>&lt;</code>\u00a0and\u00a0<code>&gt;</code>\u00a0will be\u00a0escaped\u00a0with\u00a0safe\u00a0values that look the same in the browser but don\u2019t cause unwanted effects.</p> <p>Jinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static data in the template. Anything between\u00a0<code>{{</code>\u00a0and\u00a0<code>}}</code>\u00a0is an expression that will be output to the final document.\u00a0<code>{%</code>\u00a0and\u00a0<code>%}</code>\u00a0denotes a control flow statement like\u00a0<code>if</code>\u00a0and\u00a0<code>for</code>. Unlike Python, blocks are denoted by start and end tags rather than indentation since static text within a block could change indentation.</p>"},{"location":"Code/How_to_Flask/Tutorial/#the-base-layout","title":"The Base Layout","text":"<p>Each page in the application will have the same basic layout around a different body. Instead of writing the entire HTML structure in each template, each template will\u00a0extend\u00a0a base template and override specific sections.</p> <p><code>flaskr/templates/base.html</code></p> <pre><code>&lt;!doctype html&gt;\n&lt;title&gt;{% block title %}{% endblock %} - Flaskr&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"&gt;\n&lt;nav&gt;\n  &lt;h1&gt;Flaskr&lt;/h1&gt;\n  &lt;ul&gt;\n    {% if g.user %}\n      &lt;li&gt;&lt;span&gt;{{ g.user['username'] }}&lt;/span&gt;\n      &lt;li&gt;&lt;a href=\"{{ url_for('auth.logout') }}\"&gt;Log Out&lt;/a&gt;\n    {% else %}\n      &lt;li&gt;&lt;a href=\"{{ url_for('auth.register') }}\"&gt;Register&lt;/a&gt;\n      &lt;li&gt;&lt;a href=\"{{ url_for('auth.login') }}\"&gt;Log In&lt;/a&gt;\n    {% endif %}\n  &lt;/ul&gt;\n&lt;/nav&gt;\n&lt;section class=\"content\"&gt;\n  &lt;header&gt;\n    {% block header %}{% endblock %}\n  &lt;/header&gt;\n  {% for message in get_flashed_messages() %}\n    &lt;div class=\"flash\"&gt;{{ message }}&lt;/div&gt;\n  {% endfor %}\n  {% block content %}{% endblock %}\n&lt;/section&gt;\n</code></pre> <p><code>g</code>\u00a0is automatically available in templates. Based on if\u00a0<code>g.user</code>\u00a0is set (from\u00a0<code>load_logged_in_user</code>), either the username and a log out link are displayed, or links to register and log in are displayed.\u00a0<code>url_for()</code>\u00a0is also automatically available, and is used to generate URLs to views instead of writing them out manually.</p> <p>After the page title, and before the content, the template loops over each message returned by\u00a0<code>get_flashed_messages()</code>. You used\u00a0<code>flash()</code>\u00a0in the views to show error messages, and this is the code that will display them.</p> <p>There are three blocks defined here that will be overridden in the other templates:</p> <ol> <li><code>{%\u00a0block\u00a0title\u00a0%}</code>\u00a0will change the title displayed in the browser\u2019s tab and window title.</li> <li><code>{%\u00a0block\u00a0header\u00a0%}</code>\u00a0is similar to\u00a0<code>title</code>\u00a0but will change the title displayed on the page.</li> <li><code>{%\u00a0block\u00a0content\u00a0%}</code>\u00a0is where the content of each page goes, such as the login form or a blog post.</li> </ol> <p>The base template is directly in the\u00a0<code>templates</code>\u00a0directory. To keep the others organized, the templates for a blueprint will be placed in a directory with the same name as the blueprint.</p>"},{"location":"Code/How_to_Flask/Tutorial/#register","title":"Register","text":"<p><code>flaskr/templates/auth/register.html</code></p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Register{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n    &lt;input name=\"username\" id=\"username\" required&gt;\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input type=\"password\" name=\"password\" id=\"password\" required&gt;\n    &lt;input type=\"submit\" value=\"Register\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre> <p><code>{%\u00a0extends\u00a0'base.html'\u00a0%}</code>\u00a0tells Jinja that this template should replace the blocks from the base template. All the rendered content must appear inside\u00a0<code>{%\u00a0block\u00a0%}</code>\u00a0tags that override blocks from the base template.</p> <p>A useful pattern used here is to place\u00a0<code>{%\u00a0block\u00a0title\u00a0%}</code>\u00a0inside\u00a0<code>{%\u00a0block\u00a0header\u00a0%}</code>. This will set the title block and then output the value of it into the header block, so that both the window and page share the same title without writing it twice.</p> <p>The\u00a0<code>input</code>\u00a0tags are using the\u00a0<code>required</code>\u00a0attribute here. This tells the browser not to submit the form until those fields are filled in. If the user is using an older browser that doesn\u2019t support that attribute, or if they are using something besides a browser to make requests, you still want to validate the data in the Flask view. It\u2019s important to always fully validate the data on the server, even if the client does some validation as well.</p>"},{"location":"Code/How_to_Flask/Tutorial/#log-in","title":"Log In","text":"<p>This is identical to the register template except for the title and submit button.</p> <p><code>flaskr/templates/auth/login.html</code></p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Log In{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"username\"&gt;Username&lt;/label&gt;\n    &lt;input name=\"username\" id=\"username\" required&gt;\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input type=\"password\" name=\"password\" id=\"password\" required&gt;\n    &lt;input type=\"submit\" value=\"Log In\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#register-a-user","title":"Register A User","text":"<p>Now that the authentication templates are written, you can register a user. Make sure the server is still running (<code>flask\u00a0run</code>\u00a0if it\u2019s not), then go to\u00a0http://127.0.0.1:5000/auth/register.</p> <p>Try clicking the \u201cRegister\u201d button without filling out the form and see that the browser shows an error message. Try removing the\u00a0<code>required</code>\u00a0attributes from the\u00a0<code>register.html</code>\u00a0template and click \u201cRegister\u201d again. Instead of the browser showing an error, the page will reload and the error from\u00a0<code>flash()</code>\u00a0in the view will be shown.</p> <p>Fill out a username and password and you\u2019ll be redirected to the login page. Try entering an incorrect username, or the correct username and incorrect password. If you log in you\u2019ll get an error because there\u2019s no\u00a0<code>index</code>\u00a0view to redirect to yet.</p>"},{"location":"Code/How_to_Flask/Tutorial/#static-files","title":"Static Files","text":"<p>The authentication views and templates work, but they look very plain right now. Some\u00a0CSS\u00a0can be added to add style to the HTML layout you constructed. The style won\u2019t change, so it\u2019s a\u00a0static\u00a0file rather than a template.</p> <p>Flask automatically adds a\u00a0<code>static</code>\u00a0view that takes a path relative to the\u00a0<code>flaskr/static</code>\u00a0directory and serves it. The\u00a0<code>base.html</code>\u00a0template already has a link to the\u00a0<code>style.css</code>\u00a0file:</p> <pre><code>{{ url_for('static', filename='style.css') }}\n</code></pre> <p>Besides CSS, other types of static files might be files with JavaScript functions, or a logo image. They are all placed under the\u00a0<code>flaskr/static</code>\u00a0directory and referenced with\u00a0<code>url_for('static',\u00a0filename='...')</code>.</p> <p>This tutorial isn\u2019t focused on how to write CSS, so you can just copy the following into the\u00a0<code>flaskr/static/style.css</code>\u00a0file:</p> <p><code>flaskr/static/style.css</code></p> <pre><code>html { font-family: sans-serif; background: #eee; padding: 1rem; }\nbody { max-width: 960px; margin: 0 auto; background: white; }\nh1 { font-family: serif; color: #377ba8; margin: 1rem 0; }\na { color: #377ba8; }\nhr { border: none; border-top: 1px solid lightgray; }\nnav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }\nnav h1 { flex: auto; margin: 0; }\nnav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }\nnav ul  { display: flex; list-style: none; margin: 0; padding: 0; }\nnav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }\n.content { padding: 0 1rem 1rem; }\n.content &gt; header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }\n.content &gt; header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }\n.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }\n.post &gt; header { display: flex; align-items: flex-end; font-size: 0.85em; }\n.post &gt; header &gt; div:first-of-type { flex: auto; }\n.post &gt; header h1 { font-size: 1.5em; margin-bottom: 0; }\n.post .about { color: slategray; font-style: italic; }\n.post .body { white-space: pre-line; }\n.content:last-child { margin-bottom: 0; }\n.content form { margin: 1em 0; display: flex; flex-direction: column; }\n.content label { font-weight: bold; margin-bottom: 0.5em; }\n.content input, .content textarea { margin-bottom: 1em; }\n.content textarea { min-height: 12em; resize: vertical; }\ninput.danger { color: #cc2f2e; }\ninput[type=submit] { align-self: start; min-width: 10em; }\n</code></pre> <p>You can find a less compact version of\u00a0<code>style.css</code>\u00a0in the\u00a0example code.</p> <p>Go to\u00a0http://127.0.0.1:5000/auth/login\u00a0and the page should look like the screenshot below.</p> <p></p> <p>You can read more about CSS from\u00a0Mozilla\u2019s documentation. If you change a static file, refresh the browser page. If the change doesn\u2019t show up, try clearing your browser\u2019s cache.</p>"},{"location":"Code/How_to_Flask/Tutorial/#blog-blueprint","title":"Blog Blueprint","text":"<p>You\u2019ll use the same techniques you learned about when writing the authentication blueprint to write the blog blueprint. The blog should list all posts, allow logged in users to create posts, and allow the author of a post to edit or delete it.</p> <p>As you implement each view, keep the development server running. As you save your changes, try going to the URL in your browser and testing them out.</p>"},{"location":"Code/How_to_Flask/Tutorial/#the-blueprint","title":"The Blueprint","text":"<p>Define the blueprint and register it in the application factory.</p> <p><code>flaskr/blog.py</code></p> <pre><code>from flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n</code></pre> <p>Import and register the blueprint from the factory using\u00a0<code>app.register_blueprint()</code>. Place the new code at the end of the factory function before returning the app.</p> <p><code>flaskr/__init__.py</code></p> <p><pre><code>def create_app():\n    app = ...\n    # existing code omitted\n\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n</code></pre> Unlike the auth blueprint, the blog blueprint does not have a\u00a0<code>url_prefix</code>. So the\u00a0<code>index</code>\u00a0view will be at\u00a0<code>/</code>, the\u00a0<code>create</code>\u00a0view at\u00a0<code>/create</code>, and so on. The blog is the main feature of Flaskr, so it makes sense that the blog index will be the main index.</p> <p>However, the endpoint for the\u00a0<code>index</code>\u00a0view defined below will be\u00a0<code>blog.index</code>. Some of the authentication views referred to a plain\u00a0<code>index</code>\u00a0endpoint.\u00a0<code>app.add_url_rule()</code>\u00a0associates the endpoint name\u00a0<code>'index'</code>\u00a0with the\u00a0<code>/</code>\u00a0url so that\u00a0<code>url_for('index')</code>\u00a0or\u00a0<code>url_for('blog.index')</code>\u00a0will both work, generating the same\u00a0<code>/</code>\u00a0URL either way.</p> <p>In another application you might give the blog blueprint a\u00a0<code>url_prefix</code>\u00a0and define a separate\u00a0<code>index</code>\u00a0view in the application factory, similar to the\u00a0<code>hello</code>\u00a0view. Then the\u00a0<code>index</code>\u00a0and\u00a0<code>blog.index</code>\u00a0endpoints and URLs would be different.</p>"},{"location":"Code/How_to_Flask/Tutorial/#index","title":"Index","text":"<p>The index will show all of the posts, most recent first. A\u00a0<code>JOIN</code>\u00a0is used so that the author information from the\u00a0<code>user</code>\u00a0table is available in the result.</p> <p><code>flaskr/blog.py</code></p> <pre><code>@bp.route('/')\ndef index():\n    db = get_db()\n    posts = db.execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' ORDER BY created DESC'\n    ).fetchall()\n    return render_template('blog/index.html', posts=posts)\n</code></pre> <p><code>flaskr/templates/blog/index.html</code></p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Posts{% endblock %}&lt;/h1&gt;\n  {% if g.user %}\n    &lt;a class=\"action\" href=\"{{ url_for('blog.create') }}\"&gt;New&lt;/a&gt;\n  {% endif %}\n{% endblock %}\n\n{% block content %}\n  {% for post in posts %}\n    &lt;article class=\"post\"&gt;\n      &lt;header&gt;\n        &lt;div&gt;\n          &lt;h1&gt;{{ post['title'] }}&lt;/h1&gt;\n          &lt;div class=\"about\"&gt;by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}&lt;/div&gt;\n        &lt;/div&gt;\n        {% if g.user['id'] == post['author_id'] %}\n          &lt;a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\"&gt;Edit&lt;/a&gt;\n        {% endif %}\n      &lt;/header&gt;\n      &lt;p class=\"body\"&gt;{{ post['body'] }}&lt;/p&gt;\n    &lt;/article&gt;\n    {% if not loop.last %}\n      &lt;hr&gt;\n    {% endif %}\n  {% endfor %}\n{% endblock %}\n</code></pre> <p>When a user is logged in, the\u00a0<code>header</code>\u00a0block adds a link to the\u00a0<code>create</code>\u00a0view. When the user is the author of a post, they\u2019ll see an \u201cEdit\u201d link to the\u00a0<code>update</code>\u00a0view for that post.\u00a0<code>loop.last</code>\u00a0is a special variable available inside\u00a0Jinja for loops. It\u2019s used to display a line after each post except the last one, to visually separate them.</p>"},{"location":"Code/How_to_Flask/Tutorial/#create","title":"Create","text":"<p>The\u00a0<code>create</code>\u00a0view works the same as the auth\u00a0<code>register</code>\u00a0view. Either the form is displayed, or the posted data is validated and the post is added to the database or an error is shown.</p> <p>The\u00a0<code>login_required</code>\u00a0decorator you wrote earlier is used on the blog views. A user must be logged in to visit these views, otherwise they will be redirected to the login page.</p> <p><code>flaskr/blog.py</code></p> <pre><code>@bp.route('/create', methods=('GET', 'POST'))\n@login_required\ndef create():\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'INSERT INTO post (title, body, author_id)'\n                ' VALUES (?, ?, ?)',\n                (title, body, g.user['id'])\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/create.html')\n</code></pre> <p><code>flaskr/templates/blog/create.html</code></p> <pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}New Post{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"title\"&gt;Title&lt;/label&gt;\n    &lt;input name=\"title\" id=\"title\" value=\"{{ request.form['title'] }}\" required&gt;\n    &lt;label for=\"body\"&gt;Body&lt;/label&gt;\n    &lt;textarea name=\"body\" id=\"body\"&gt;{{ request.form['body'] }}&lt;/textarea&gt;\n    &lt;input type=\"submit\" value=\"Save\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#update","title":"Update","text":"<p>Both the\u00a0<code>update</code>\u00a0and\u00a0<code>delete</code>\u00a0views will need to fetch a\u00a0<code>post</code>\u00a0by\u00a0<code>id</code>\u00a0and check if the author matches the logged in user. To avoid duplicating code, you can write a function to get the\u00a0<code>post</code>\u00a0and call it from each view.</p> <p><code>flaskr/blog.py</code></p> <pre><code>def get_post(id, check_author=True):\n    post = get_db().execute(\n        'SELECT p.id, title, body, created, author_id, username'\n        ' FROM post p JOIN user u ON p.author_id = u.id'\n        ' WHERE p.id = ?',\n        (id,)\n    ).fetchone()\n\n    if post is None:\n        abort(404, f\"Post id {id} doesn't exist.\")\n\n    if check_author and post['author_id'] != g.user['id']:\n        abort(403)\n\n    return post\n</code></pre> <p><code>abort()</code>\u00a0will raise a special exception that returns an HTTP status code. It takes an optional message to show with the error, otherwise a default message is used.\u00a0<code>404</code>\u00a0means \u201cNot Found\u201d, and\u00a0<code>403</code>\u00a0means \u201cForbidden\u201d. (<code>401</code>\u00a0means \u201cUnauthorized\u201d, but you redirect to the login page instead of returning that status.)</p> <p>The\u00a0<code>check_author</code>\u00a0argument is defined so that the function can be used to get a\u00a0<code>post</code>\u00a0without checking the author. This would be useful if you wrote a view to show an individual post on a page, where the user doesn\u2019t matter because they\u2019re not modifying the post.</p> <p><code>flaskr/blog.py</code></p> <pre><code>@bp.route('/&lt;int:id&gt;/update', methods=('GET', 'POST'))\n@login_required\ndef update(id):\n    post = get_post(id)\n\n    if request.method == 'POST':\n        title = request.form['title']\n        body = request.form['body']\n        error = None\n\n        if not title:\n            error = 'Title is required.'\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                'UPDATE post SET title = ?, body = ?'\n                ' WHERE id = ?',\n                (title, body, id)\n            )\n            db.commit()\n            return redirect(url_for('blog.index'))\n\n    return render_template('blog/update.html', post=post)\n</code></pre> <p>Unlike the views you\u2019ve written so far, the\u00a0<code>update</code>\u00a0function takes an argument,\u00a0<code>id</code>. That corresponds to the\u00a0<code>&lt;int:id&gt;</code>\u00a0in the route. A real URL will look like\u00a0<code>/1/update</code>. Flask will capture the\u00a0<code>1</code>, ensure it\u2019s an\u00a0<code>int</code>, and pass it as the\u00a0<code>id</code>\u00a0argument. If you don\u2019t specify\u00a0<code>int:</code>\u00a0and instead do\u00a0<code>&lt;id&gt;</code>, it will be a string. To generate a URL to the update page,\u00a0<code>url_for()</code>\u00a0needs to be passed the\u00a0<code>id</code>\u00a0so it knows what to fill in:\u00a0<code>url_for('blog.update',\u00a0id=post['id'])</code>. This is also in the\u00a0<code>index.html</code>\u00a0file above.</p> <p>The\u00a0<code>create</code>\u00a0and\u00a0<code>update</code>\u00a0views look very similar. The main difference is that the\u00a0<code>update</code>\u00a0view uses a\u00a0<code>post</code>\u00a0object and an\u00a0<code>UPDATE</code>\u00a0query instead of an\u00a0<code>INSERT</code>. With some clever refactoring, you could use one view and template for both actions, but for the tutorial it\u2019s clearer to keep them separate.</p> <p><code>flaskr/templates/blog/update.html</code></p> <p><pre><code>{% extends 'base.html' %}\n\n{% block header %}\n  &lt;h1&gt;{% block title %}Edit \"{{ post['title'] }}\"{% endblock %}&lt;/h1&gt;\n{% endblock %}\n\n{% block content %}\n  &lt;form method=\"post\"&gt;\n    &lt;label for=\"title\"&gt;Title&lt;/label&gt;\n    &lt;input name=\"title\" id=\"title\"\n      value=\"{{ request.form['title'] or post['title'] }}\" required&gt;\n    &lt;label for=\"body\"&gt;Body&lt;/label&gt;\n    &lt;textarea name=\"body\" id=\"body\"&gt;{{ request.form['body'] or post['body'] }}&lt;/textarea&gt;\n    &lt;input type=\"submit\" value=\"Save\"&gt;\n  &lt;/form&gt;\n  &lt;hr&gt;\n  &lt;form action=\"{{ url_for('blog.delete', id=post['id']) }}\" method=\"post\"&gt;\n    &lt;input class=\"danger\" type=\"submit\" value=\"Delete\" onclick=\"return confirm('Are you sure?');\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre> This template has two forms. The first posts the edited data to the current page (<code>/&lt;id&gt;/update</code>). The other form contains only a button and specifies an\u00a0<code>action</code>\u00a0attribute that posts to the delete view instead. The button uses some JavaScript to show a confirmation dialog before submitting.</p> <p>The pattern\u00a0<code>{{\u00a0request.form['title']\u00a0or\u00a0post['title']\u00a0}}</code>\u00a0is used to choose what data appears in the form. When the form hasn\u2019t been submitted, the original\u00a0<code>post</code>\u00a0data appears, but if invalid form data was posted you want to display that so the user can fix the error, so\u00a0<code>request.form</code>\u00a0is used instead.\u00a0<code>request</code>\u00a0is another variable that\u2019s automatically available in templates.</p>"},{"location":"Code/How_to_Flask/Tutorial/#delete","title":"Delete","text":"<p>The delete view doesn\u2019t have its own template, the delete button is part of\u00a0<code>update.html</code>\u00a0and posts to the\u00a0<code>/&lt;id&gt;/delete</code>\u00a0URL. Since there is no template, it will only handle the\u00a0<code>POST</code>\u00a0method and then redirect to the\u00a0<code>index</code>\u00a0view.</p> <p><code>flaskr/blog.py</code></p> <pre><code>@bp.route('/&lt;int:id&gt;/delete', methods=('POST',))\n@login_required\ndef delete(id):\n    get_post(id)\n    db = get_db()\n    db.execute('DELETE FROM post WHERE id = ?', (id,))\n    db.commit()\n    return redirect(url_for('blog.index'))\n</code></pre> <p>Congratulations, you\u2019ve now finished writing your application! Take some time to try out everything in the browser. However, there\u2019s still more to do before the project is complete.</p>"},{"location":"Code/How_to_Flask/Tutorial/#make-the-project-installable","title":"Make the Project Installable","text":"<p>Making your project installable means that you can build a\u00a0wheel\u00a0file and install that in another environment, just like you installed Flask in your project\u2019s environment. This makes deploying your project the same as installing any other library, so you\u2019re using all the standard Python tools to manage everything.</p> <p>Installing also comes with other benefits that might not be obvious from the tutorial or as a new Python user, including:</p> <ul> <li>Currently, Python and Flask understand how to use the\u00a0<code>flaskr</code>\u00a0package only because you\u2019re running from your project\u2019s directory. Installing means you can import it no matter where you run from.</li> <li>You can manage your project\u2019s dependencies just like other packages do, so\u00a0<code>pip\u00a0install\u00a0yourproject.whl</code>\u00a0installs them.</li> <li>Test tools can isolate your test environment from your development environment.</li> </ul> <p>Note</p> <p>This is being introduced late in the tutorial, but in your future projects you should always start with this.</p>"},{"location":"Code/How_to_Flask/Tutorial/#describe-the-project","title":"Describe the Project","text":"<p>The\u00a0<code>pyproject.toml</code>\u00a0file describes your project and how to build it.</p> <p><code>pyproject.toml</code></p> <pre><code>[project]\nname = \"flaskr\"\nversion = \"1.0.0\"\ndescription = \"The basic blog app built in the Flask tutorial.\"\ndependencies = [\n    \"flask\",\n]\n\n[build-system]\nrequires = [\"flit_core&lt;4\"]\nbuild-backend = \"flit_core.buildapi\"\n</code></pre> <p>See the official\u00a0Packaging tutorial\u00a0for more explanation of the files and options used.</p>"},{"location":"Code/How_to_Flask/Tutorial/#install-the-project","title":"Install the Project","text":"<p>Use\u00a0<code>pip</code>\u00a0to install your project in the virtual environment.</p> <pre><code>$ pip install -e .\n</code></pre> <p>This tells pip to find\u00a0<code>pyproject.toml</code>\u00a0in the current directory and install the project in\u00a0editable\u00a0or\u00a0development\u00a0mode. Editable mode means that as you make changes to your local code, you\u2019ll only need to re-install if you change the metadata about the project, such as its dependencies.</p> <p>You can observe that the project is now installed with\u00a0<code>pip\u00a0list</code>.</p> <pre><code>$ pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nWerkzeug       0.14.1\n</code></pre> <p>Nothing changes from how you\u2019ve been running your project so far.\u00a0<code>--app</code>\u00a0is still set to\u00a0<code>flaskr</code>\u00a0and\u00a0<code>flask\u00a0run</code>\u00a0still runs the application, but you can call it from anywhere, not just the\u00a0<code>flask-tutorial</code>\u00a0directory.</p>"},{"location":"Code/How_to_Flask/Tutorial/#test-coverage","title":"Test Coverage","text":"<p>Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.</p> <p>You should test as much of your code as possible. Code in functions only runs when the function is called, and code in branches, such as\u00a0<code>if</code>\u00a0blocks, only runs when the condition is met. You want to make sure that each function is tested with data that covers each branch.</p> <p>The closer you get to 100% coverage, the more comfortable you can be that making a change won\u2019t unexpectedly change other behavior. However, 100% coverage doesn\u2019t guarantee that your application doesn\u2019t have bugs. In particular, it doesn\u2019t test how the user interacts with the application in the browser. Despite this, test coverage is an important tool to use during development.</p> <p>Note</p> <p>This is being introduced late in the tutorial, but in your future projects you should test as you develop.</p> <p>You\u2019ll use\u00a0pytest\u00a0and\u00a0coverage\u00a0to test and measure your code. Install them both:</p> <pre><code>$ pip install pytest coverage\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#setup-and-fixtures","title":"Setup and Fixtures","text":"<p>The test code is located in the\u00a0<code>tests</code>\u00a0directory. This directory is\u00a0next to\u00a0the\u00a0<code>flaskr</code>\u00a0package, not inside it. The\u00a0<code>tests/conftest.py</code>\u00a0file contains setup functions called\u00a0fixtures\u00a0that each test will use. Tests are in Python modules that start with\u00a0<code>test_</code>, and each test function in those modules also starts with\u00a0<code>test_</code>.</p> <p>Each test will create a new temporary database file and populate some data that will be used in the tests. Write a SQL file to insert that data.</p> <p><code>tests/data.sql</code></p> <pre><code>INSERT INTO user (username, password)\nVALUES\n  ('test', 'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),\n  ('other', 'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');\n\nINSERT INTO post (title, body, author_id, created)\nVALUES\n  ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');\n</code></pre> <p>The\u00a0<code>app</code>\u00a0fixture will call the factory and pass\u00a0<code>test_config</code>\u00a0to configure the application and database for testing instead of using your local development configuration.</p> <p><code>tests/conftest.py</code></p> <pre><code>import os\nimport tempfile\n\nimport pytest\nfrom flaskr import create_app\nfrom flaskr.db import get_db, init_db\n\nwith open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:\n    _data_sql = f.read().decode('utf8')\n\n@pytest.fixture\ndef app():\n    db_fd, db_path = tempfile.mkstemp()\n\n    app = create_app({\n        'TESTING': True,\n        'DATABASE': db_path,\n    })\n\n    with app.app_context():\n        init_db()\n        get_db().executescript(_data_sql)\n\n    yield app\n\n    os.close(db_fd)\n    os.unlink(db_path)\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n\n@pytest.fixture\ndef runner(app):\n    return app.test_cli_runner()\n</code></pre> <p><code>tempfile.mkstemp()</code>\u00a0creates and opens a temporary file, returning the file descriptor and the path to it. The\u00a0<code>DATABASE</code>\u00a0path is overridden so it points to this temporary path instead of the instance folder. After setting the path, the database tables are created and the test data is inserted. After the test is over, the temporary file is closed and removed.</p> <p><code>TESTING</code>\u00a0tells Flask that the app is in test mode. Flask changes some internal behavior so it\u2019s easier to test, and other extensions can also use the flag to make testing them easier.</p> <p>The\u00a0<code>client</code>\u00a0fixture calls\u00a0<code>app.test_client()</code>\u00a0with the application object created by the\u00a0<code>app</code>\u00a0fixture. Tests will use the client to make requests to the application without running the server.</p> <p>The\u00a0<code>runner</code>\u00a0fixture is similar to\u00a0<code>client</code>.\u00a0<code>app.test_cli_runner()</code>\u00a0creates a runner that can call the Click commands registered with the application.</p> <p>Pytest uses fixtures by matching their function names with the names of arguments in the test functions. For example, the\u00a0<code>test_hello</code>\u00a0function you\u2019ll write next takes a\u00a0<code>client</code>\u00a0argument. Pytest matches that with the\u00a0<code>client</code>\u00a0fixture function, calls it, and passes the returned value to the test function.</p>"},{"location":"Code/How_to_Flask/Tutorial/#factory","title":"Factory","text":"<p>There\u2019s not much to test about the factory itself. Most of the code will be executed for each test already, so if something fails the other tests will notice.</p> <p>The only behavior that can change is passing test config. If config is not passed, there should be some default configuration, otherwise the configuration should be overridden.</p> <p><code>tests/test_factory.py</code></p> <pre><code>from flaskr import create_app\n\ndef test_config():\n    assert not create_app().testing\n    assert create_app({'TESTING': True}).testing\n\ndef test_hello(client):\n    response = client.get('/hello')\n    assert response.data == b'Hello, World!'\n</code></pre> <p>You added the\u00a0<code>hello</code>\u00a0route as an example when writing the factory at the beginning of the tutorial. It returns \u201cHello, World!\u201d, so the test checks that the response data matches.</p>"},{"location":"Code/How_to_Flask/Tutorial/#database","title":"Database","text":"<p>Within an application context,\u00a0<code>get_db</code>\u00a0should return the same connection each time it\u2019s called. After the context, the connection should be closed.</p> <p><code>tests/test_db.py</code></p> <pre><code>import sqlite3\n\nimport pytest\nfrom flaskr.db import get_db\n\ndef test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute('SELECT 1')\n\n    assert 'closed' in str(e.value)\n</code></pre> <p>The\u00a0<code>init-db</code>\u00a0command should call the\u00a0<code>init_db</code>\u00a0function and output a message.</p> <p><code>tests/test_db.py</code></p> <pre><code>def test_init_db_command(runner, monkeypatch):\n    class Recorder(object):\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)\n    result = runner.invoke(args=['init-db'])\n    assert 'Initialized' in result.output\n    assert Recorder.called\n</code></pre> <p>This test uses Pytest\u2019s\u00a0<code>monkeypatch</code>\u00a0fixture to replace the\u00a0<code>init_db</code>\u00a0function with one that records that it\u2019s been called. The\u00a0<code>runner</code>\u00a0fixture you wrote above is used to call the\u00a0<code>init-db</code>\u00a0command by name.</p>"},{"location":"Code/How_to_Flask/Tutorial/#authentication","title":"Authentication","text":"<p>For most of the views, a user needs to be logged in. The easiest way to do this in tests is to make a\u00a0<code>POST</code>\u00a0request to the\u00a0<code>login</code>\u00a0view with the client. Rather than writing that out every time, you can write a class with methods to do that, and use a fixture to pass it the client for each test.</p> <p><code>tests/conftest.py</code></p> <pre><code>class AuthActions(object):\n    def __init__(self, client):\n        self._client = client\n\n    def login(self, username='test', password='test'):\n        return self._client.post(\n            '/auth/login',\n            data={'username': username, 'password': password}\n        )\n\n    def logout(self):\n        return self._client.get('/auth/logout')\n\n@pytest.fixture\ndef auth(client):\n    return AuthActions(client)\n</code></pre> <p>With the\u00a0<code>auth</code>\u00a0fixture, you can call\u00a0<code>auth.login()</code>\u00a0in a test to log in as the\u00a0<code>test</code>\u00a0user, which was inserted as part of the test data in the\u00a0<code>app</code>\u00a0fixture.</p> <p>The\u00a0<code>register</code>\u00a0view should render successfully on\u00a0<code>GET</code>. On\u00a0<code>POST</code>\u00a0with valid form data, it should redirect to the login URL and the user\u2019s data should be in the database. Invalid data should display error messages.</p> <p><code>tests/test_auth.py</code></p> <p><pre><code>import pytest\nfrom flask import g, session\nfrom flaskr.db import get_db\n\ndef test_register(client, app):\n    assert client.get('/auth/register').status_code == 200\n    response = client.post(\n        '/auth/register', data={'username': 'a', 'password': 'a'}\n    )\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n    with app.app_context():\n        assert get_db().execute(\n            \"SELECT * FROM user WHERE username = 'a'\",\n        ).fetchone() is not None\n\n@pytest.mark.parametrize(('username', 'password', 'message'), (\n    ('', '', b'Username is required.'),\n    ('a', '', b'Password is required.'),\n    ('test', 'test', b'already registered'),\n))\ndef test_register_validate_input(client, username, password, message):\n    response = client.post(\n        '/auth/register',\n        data={'username': username, 'password': password}\n    )\n    assert message in response.data\n</code></pre> <code>client.get()</code>\u00a0makes a\u00a0<code>GET</code>\u00a0request and returns the\u00a0<code>Response</code>\u00a0object returned by Flask. Similarly,\u00a0<code>client.post()</code>\u00a0makes a\u00a0<code>POST</code>\u00a0request, converting the\u00a0<code>data</code>\u00a0dict into form data.</p> <p>To test that the page renders successfully, a simple request is made and checked for a\u00a0<code>200\u00a0OK</code> <code>status_code</code>. If rendering failed, Flask would return a\u00a0<code>500\u00a0Internal\u00a0Server\u00a0Error</code>\u00a0code.</p> <p><code>headers</code>\u00a0will have a\u00a0<code>Location</code>\u00a0header with the login URL when the register view redirects to the login view.</p> <p><code>data</code>\u00a0contains the body of the response as bytes. If you expect a certain value to render on the page, check that it\u2019s in\u00a0<code>data</code>. Bytes must be compared to bytes. If you want to compare text, use\u00a0<code>get_data(as_text=True)</code>\u00a0instead.</p> <p><code>pytest.mark.parametrize</code>\u00a0tells Pytest to run the same test function with different arguments. You use it here to test different invalid input and error messages without writing the same code three times.</p> <p>The tests for the\u00a0<code>login</code>\u00a0view are very similar to those for\u00a0<code>register</code>. Rather than testing the data in the database,\u00a0<code>session</code>\u00a0should have\u00a0<code>user_id</code>\u00a0set after logging in.</p> <p><code>tests/test_auth.py</code></p> <pre><code>def test_login(client, auth):\n    assert client.get('/auth/login').status_code == 200\n    response = auth.login()\n    assert response.headers[\"Location\"] == \"/\"\n\n    with client:\n        client.get('/')\n        assert session['user_id'] == 1\n        assert g.user['username'] == 'test'\n\n@pytest.mark.parametrize(('username', 'password', 'message'), (\n    ('a', 'test', b'Incorrect username.'),\n    ('test', 'a', b'Incorrect password.'),\n))\ndef test_login_validate_input(auth, username, password, message):\n    response = auth.login(username, password)\n    assert message in response.data\n</code></pre> <p>Using\u00a0<code>client</code>\u00a0in a\u00a0<code>with</code>\u00a0block allows accessing context variables such as\u00a0<code>session</code>\u00a0after the response is returned. Normally, accessing\u00a0<code>session</code>\u00a0outside of a request would raise an error.</p> <p>Testing\u00a0<code>logout</code>\u00a0is the opposite of\u00a0<code>login</code>.\u00a0<code>session</code>\u00a0should not contain\u00a0<code>user_id</code>\u00a0after logging out.</p> <p><code>tests/test_auth.py</code></p> <pre><code>def test_logout(client, auth):\n    auth.login()\n\n    with client:\n        auth.logout()\n        assert 'user_id' not in session\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#blog","title":"Blog","text":"<p>All the blog views use the\u00a0<code>auth</code>\u00a0fixture you wrote earlier. Call\u00a0<code>auth.login()</code>\u00a0and subsequent requests from the client will be logged in as the\u00a0<code>test</code>\u00a0user.</p> <p>The\u00a0<code>index</code>\u00a0view should display information about the post that was added with the test data. When logged in as the author, there should be a link to edit the post.</p> <p>You can also test some more authentication behavior while testing the\u00a0<code>index</code>\u00a0view. When not logged in, each page shows links to log in or register. When logged in, there\u2019s a link to log out.</p> <p><code>tests/test_blog.py</code></p> <pre><code>import pytest\nfrom flaskr.db import get_db\n\ndef test_index(client, auth):\n    response = client.get('/')\n    assert b\"Log In\" in response.data\n    assert b\"Register\" in response.data\n\n    auth.login()\n    response = client.get('/')\n    assert b'Log Out' in response.data\n    assert b'test title' in response.data\n    assert b'by test on 2018-01-01' in response.data\n    assert b'test\\nbody' in response.data\n    assert b'href=\"/1/update\"' in response.data\n</code></pre> <p>A user must be logged in to access the\u00a0<code>create</code>,\u00a0<code>update</code>, and\u00a0<code>delete</code>\u00a0views. The logged in user must be the author of the post to access\u00a0<code>update</code>\u00a0and\u00a0<code>delete</code>, otherwise a\u00a0<code>403\u00a0Forbidden</code>\u00a0status is returned. If a\u00a0<code>post</code>\u00a0with the given\u00a0<code>id</code>\u00a0doesn\u2019t exist,\u00a0<code>update</code>\u00a0and\u00a0<code>delete</code>\u00a0should return\u00a0<code>404\u00a0Not\u00a0Found</code>.</p> <p><code>tests/test_blog.py</code></p> <pre><code>@pytest.mark.parametrize('path', (\n    '/create',\n    '/1/update',\n    '/1/delete',\n))\ndef test_login_required(client, path):\n    response = client.post(path)\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\ndef test_author_required(app, client, auth):\n    # change the post author to another user\n    with app.app_context():\n        db = get_db()\n        db.execute('UPDATE post SET author_id = 2 WHERE id = 1')\n        db.commit()\n\n    auth.login()\n    # current user can't modify other user's post\n    assert client.post('/1/update').status_code == 403\n    assert client.post('/1/delete').status_code == 403\n    # current user doesn't see edit link\n    assert b'href=\"/1/update\"' not in client.get('/').data\n\n@pytest.mark.parametrize('path', (\n    '/2/update',\n    '/2/delete',\n))\ndef test_exists_required(client, auth, path):\n    auth.login()\n    assert client.post(path).status_code == 404\n</code></pre> <p>The\u00a0<code>create</code>\u00a0and\u00a0<code>update</code>\u00a0views should render and return a\u00a0<code>200\u00a0OK</code>\u00a0status for a\u00a0<code>GET</code>\u00a0request. When valid data is sent in a\u00a0<code>POST</code>\u00a0request,\u00a0<code>create</code>\u00a0should insert the new post data into the database, and\u00a0<code>update</code>\u00a0should modify the existing data. Both pages should show an error message on invalid data.</p> <p><code>tests/test_blog.py</code></p> <pre><code>def test_create(client, auth, app):\n    auth.login()\n    assert client.get('/create').status_code == 200\n    client.post('/create', data={'title': 'created', 'body': ''})\n\n    with app.app_context():\n        db = get_db()\n        count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]\n        assert count == 2\n\ndef test_update(client, auth, app):\n    auth.login()\n    assert client.get('/1/update').status_code == 200\n    client.post('/1/update', data={'title': 'updated', 'body': ''})\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n        assert post['title'] == 'updated'\n\n@pytest.mark.parametrize('path', (\n    '/create',\n    '/1/update',\n))\ndef test_create_update_validate(client, auth, path):\n    auth.login()\n    response = client.post(path, data={'title': '', 'body': ''})\n    assert b'Title is required.' in response.data\n</code></pre> <p>The\u00a0<code>delete</code>\u00a0view should redirect to the index URL and the post should no longer exist in the database.</p> <p><code>tests/test_blog.py</code></p> <pre><code>def test_delete(client, auth, app):\n    auth.login()\n    response = client.post('/1/delete')\n    assert response.headers[\"Location\"] == \"/\"\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n        assert post is None\n</code></pre>"},{"location":"Code/How_to_Flask/Tutorial/#running-the-tests","title":"Running the Tests","text":"<p>Some extra configuration, which is not required but makes running tests with coverage less verbose, can be added to the project\u2019s\u00a0<code>pyproject.toml</code>\u00a0file.</p> <p><code>pyproject.toml</code></p> <pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"flaskr\"]\n</code></pre> <p>To run the tests, use the\u00a0<code>pytest</code>\u00a0command. It will find and run all the test functions you\u2019ve written.</p> <pre><code>$ pytest\n\n========================= test session starts ==========================\nplatform linux -- Python 3.6.4, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: /home/user/Projects/flask-tutorial\ncollected 23 items\n\ntests/test_auth.py ........                                      [ 34%]\ntests/test_blog.py ............                                  [ 86%]\ntests/test_db.py ..                                              [ 95%]\ntests/test_factory.py ..                                         [100%]\n\n====================== 24 passed in 0.64 seconds =======================\n</code></pre> <p>If any tests fail, pytest will show the error that was raised. You can run\u00a0<code>pytest\u00a0-v</code>\u00a0to get a list of each test function rather than dots.</p> <p>To measure the code coverage of your tests, use the\u00a0<code>coverage</code>\u00a0command to run pytest instead of running it directly.</p> <pre><code>$ coverage run -m pytest\n</code></pre> <p>You can either view a simple coverage report in the terminal:</p> <pre><code>$ coverage report\n</code></pre> <pre><code>Name                 Stmts   Miss Branch BrPart  Cover\n------------------------------------------------------\nflaskr/__init__.py      21      0      2      0   100%\nflaskr/auth.py          54      0     22      0   100%\nflaskr/blog.py          54      0     16      0   100%\nflaskr/db.py            24      0      4      0   100%\n------------------------------------------------------\nTOTAL                  153      0     44      0   100%\n\nAn HTML report allows you to see which lines were covered in each file:\n\n$ coverage html\n</code></pre> <p>This generates files in the\u00a0<code>htmlcov</code>\u00a0directory. Open\u00a0<code>htmlcov/index.html</code>\u00a0in your browser to see the report.</p>"},{"location":"Code/How_to_Flask/Tutorial/#deploy-to-production","title":"Deploy to Production","text":"<p>This part of the tutorial assumes you have a server that you want to deploy your application to. It gives an overview of how to create the distribution file and install it, but won\u2019t go into specifics about what server or software to use. You can set up a new environment on your development computer to try out the instructions below, but probably shouldn\u2019t use it for hosting a real public application. See\u00a0Deploying to Production\u00a0for a list of many different ways to host your application.</p>"},{"location":"Code/How_to_Flask/Tutorial/#build-and-install","title":"Build and Install","text":"<p>When you want to deploy your application elsewhere, you build a\u00a0wheel\u00a0(<code>.whl</code>) file. Install and use the\u00a0<code>build</code>\u00a0tool to do this.</p> <p><pre><code>$ pip install build\n$ python -m build --wheel\n</code></pre> You can find the file in\u00a0<code>dist/flaskr-1.0.0-py3-none-any.whl</code>. The file name is in the format of {project name}-{version}-{python tag} -{abi tag}-{platform tag}.</p> <p>Copy this file to another machine,\u00a0set up a new virtualenv, then install the file with\u00a0<code>pip</code>.</p> <pre><code>$ pip install flaskr-1.0.0-py3-none-any.whl\n</code></pre> <p>Pip will install your project along with its dependencies.</p> <p>Since this is a different machine, you need to run\u00a0<code>init-db</code>\u00a0again to create the database in the instance folder.</p> <pre><code>$ flask --app flaskr init-db\n</code></pre> <p>When Flask detects that it\u2019s installed (not in editable mode), it uses a different directory for the instance folder. You can find it at\u00a0<code>.venv/var/flaskr-instance</code>\u00a0instead.</p>"},{"location":"Code/How_to_Flask/Tutorial/#configure-the-secret-key","title":"Configure the Secret Key","text":"<p>In the beginning of the tutorial that you gave a default value for\u00a0<code>SECRET_KEY</code>. This should be changed to some random bytes in production. Otherwise, attackers could use the public\u00a0<code>'dev'</code>\u00a0key to modify the session cookie, or anything else that uses the secret key.</p> <p>You can use the following command to output a random secret key:</p> <pre><code>$ python -c 'import secrets; print(secrets.token_hex())'\n\n'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n</code></pre> <p>Create the\u00a0<code>config.py</code>\u00a0file in the instance folder, which the factory will read from if it exists. Copy the generated value into it.</p> <p><code>.venv/var/flaskr-instance/config.py</code></p> <pre><code>SECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n</code></pre> <p>You can also set any other necessary configuration here, although\u00a0<code>SECRET_KEY</code>\u00a0is the only one needed for Flaskr.</p>"},{"location":"Code/How_to_Flask/Tutorial/#run-with-a-production-server","title":"Run with a Production Server","text":"<p>When running publicly rather than in development, you should not use the built-in development server (<code>flask\u00a0run</code>). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure.</p> <p>Instead, use a production WSGI server. For example, to use\u00a0Waitress, first install it in the virtual environment:</p> <pre><code>$ pip install waitress\n</code></pre> <p>You need to tell Waitress about your application, but it doesn\u2019t use\u00a0<code>--app</code>\u00a0like\u00a0<code>flask\u00a0run</code>\u00a0does. You need to tell it to import and call the application factory to get an application object.</p> <pre><code>$ waitress-serve --call 'flaskr:create_app'\n</code></pre> <p>Serving on http://0.0.0.0:8080</p> <p>See\u00a0Deploying to Production\u00a0for a list of many different ways to host your application. Waitress is just an example, chosen for the tutorial because it supports both Windows and Linux. There are many more WSGI servers and deployment options that you may choose for your project.</p>"},{"location":"Code/How_to_Flask/Tutorial/#keep-developing","title":"Keep Developing!","text":"<p>You\u2019ve learned about quite a few Flask and Python concepts throughout the tutorial. Go back and review the tutorial and compare your code with the steps you took to get there. Compare your project to the\u00a0example project, which might look a bit different due to the step-by-step nature of the tutorial.</p> <p>There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so, you\u2019re now equipped to start developing your own web applications. Check out the\u00a0Quickstart\u00a0for an overview of what Flask can do, then dive into the docs to keep learning. Flask uses\u00a0Jinja,\u00a0Click,\u00a0Werkzeug, and\u00a0ItsDangerous\u00a0behind the scenes, and they all have their own documentation too. You\u2019ll also be interested in\u00a0Extensions\u00a0which make tasks like working with the database or validating form data easier and more powerful.</p> <p>If you want to keep developing your Flaskr project, here are some ideas for what to try next:</p> <ul> <li>A detail view to show a single post. Click a post\u2019s title to go to its page.</li> <li>Like / unlike a post.</li> <li>Comments.</li> <li>Tags. Clicking a tag shows all the posts with that tag.</li> <li>A search box that filters the index page by name.</li> <li>Paged display. Only show 5 posts per page.</li> <li>Upload an image to go along with a post.</li> <li>Format posts using Markdown.</li> <li>An RSS feed of new posts.</li> </ul> <p>Have fun and make awesome applications!</p>"},{"location":"Code/How_to_Git_Branch/1_Branches_in_a_Nutshell/","title":"1 Branches in a Nutshell","text":"<p>Nearly every VCS has some form of branching support. Branching means you diverge from the main line of development and continue to do work without messing with that main line. In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.</p> <p>Some people refer to Git\u2019s branching model as its \u201ckiller feature,\u201d and it certainly sets Git apart in the VCS community. Why is it so special? The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast. Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day. Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop.</p>"},{"location":"Code/How_to_Git_Branch/1_Branches_in_a_Nutshell/#branches-in-a-nutshell","title":"Branches in a Nutshell","text":"<p>To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.</p> <p>As you may remember from\u00a0What is Git?, Git doesn\u2019t store data as a series of changesets or differences, but instead as a series of\u00a0snapshots.</p> <p>When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author\u2019s name and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.</p> <p>To visualize this, let\u2019s assume that you have a directory containing three files, and you stage them all and commit. Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in\u00a0What is Git?), stores that version of the file in the Git repository (Git refers to them as\u00a0blobs), and adds that checksum to the staging area:</p> <pre><code>$ git add README test.rb LICENSE\n$ git commit -m 'Initial commit'\n</code></pre> <p>When you create the commit by running\u00a0<code>git commit</code>, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a tree object in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.</p> <p>Your Git repository now contains five objects: three\u00a0blobs\u00a0(each representing the contents of one of the three files), one\u00a0tree\u00a0that lists the contents of the directory and specifies which file names are stored as which blobs, and one\u00a0commit\u00a0with the pointer to that root tree and all the commit metadata.</p> <p></p> <p>Figure 9. A commit and its tree</p> <p>If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.</p> <p></p> <p>Figure 10. Commits and their parents</p> <p>A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is\u00a0<code>master</code>. As you start making commits, you\u2019re given a\u00a0<code>master</code>\u00a0branch that points to the last commit you made. Every time you commit, the\u00a0<code>master</code>\u00a0branch pointer moves forward automatically.</p> Note The \u201cmaster\u201d branch in Git is not a special branch. It is exactly like any other branch. The only reason nearly every repository has one is that the\u00a0<code>git init</code>\u00a0command creates it by default and most people don\u2019t bother to change it. <p></p> <p>Figure 11. A branch and its commit history</p>"},{"location":"Code/How_to_Git_Branch/1_Branches_in_a_Nutshell/#creating-a-new-branch","title":"Creating a New Branch","text":"<p>What happens when you create a new branch? Well, doing so creates a new pointer for you to move around. Let\u2019s say you want to create a new branch called\u00a0<code>testing</code>. You do this with the\u00a0<code>git branch</code>\u00a0command:</p> <pre><code>$ git branch testing\n</code></pre> <p>This creates a new pointer to the same commit you\u2019re currently on.</p> <p></p> <p>Figure 12. Two branches pointing into the same series of commits</p> <p>How does Git know what branch you\u2019re currently on? It keeps a special pointer called\u00a0<code>HEAD</code>. Note that this is a lot different than the concept of\u00a0<code>HEAD</code>\u00a0in other VCSs you may be used to, such as Subversion or CVS. In Git, this is a pointer to the local branch you\u2019re currently on. In this case, you\u2019re still on\u00a0<code>master</code>. The\u00a0<code>git branch</code>\u00a0command only\u00a0created\u00a0a new branch\u2009\u2014\u2009it didn\u2019t switch to that branch.</p> <p></p> <p>Figure 13. HEAD pointing to a branch</p> <p>You can easily see this by running a simple\u00a0<code>git log</code>\u00a0command that shows you where the branch pointers are pointing. This option is called\u00a0<code>--decorate</code>.</p> <pre><code>$ git log --oneline --decorate\nf30ab (HEAD -&gt; master, testing) Add feature #32 - ability to add new formats to the central interface\n34ac2 Fix bug #1328 - stack overflow under certain conditions\n98ca9 Initial commit\n</code></pre> <p>You can see the\u00a0<code>master</code>\u00a0and\u00a0<code>testing</code>\u00a0branches that are right there next to the\u00a0<code>f30ab</code>\u00a0commit.</p>"},{"location":"Code/How_to_Git_Branch/1_Branches_in_a_Nutshell/#switching-branches","title":"Switching Branches","text":"<p>To switch to an existing branch, you run the\u00a0<code>git checkout</code>\u00a0command. Let\u2019s switch to the new\u00a0<code>testing</code>\u00a0branch:</p> <pre><code>$ git checkout testing\n</code></pre> <p>This moves\u00a0<code>HEAD</code>\u00a0to point to the\u00a0<code>testing</code>\u00a0branch.</p> <p></p> <p>Figure 14. HEAD points to the current branch</p> <p>What is the significance of that? Well, let\u2019s do another commit:</p> <pre><code>$ vim test.rb\n$ git commit -a -m 'Make a change'\n</code></pre> <p></p> <p>Figure 15. The HEAD branch moves forward when a commit is made</p> <p>This is interesting, because now your\u00a0<code>testing</code>\u00a0branch has moved forward, but your\u00a0<code>master</code>\u00a0branch still points to the commit you were on when you ran\u00a0<code>git checkout</code>\u00a0to switch branches. Let\u2019s switch back to the\u00a0<code>master</code>\u00a0branch:</p> <pre><code>$ git checkout master\n</code></pre> Note <code>git log</code>\u00a0doesn\u2019t show\u00a0all\u00a0the branches\u00a0all\u00a0the timeIf you were to run\u00a0<code>git log</code>\u00a0right now, you might wonder where the \"testing\" branch you just created went, as it would not appear in the output.The branch hasn\u2019t disappeared; Git just doesn\u2019t know that you\u2019re interested in that branch and it is trying to show you what it thinks you\u2019re interested in. In other words, by default,\u00a0<code>git log</code>\u00a0will only show commit history below the branch you\u2019ve checked out.To show commit history for the desired branch you have to explicitly specify it:\u00a0<code>git log testing</code>. To show all of the branches, add\u00a0<code>--all</code>\u00a0to your\u00a0<code>git log</code>\u00a0command. <p></p> <p>Figure 16. HEAD moves when you checkout</p> <p>That command did two things. It moved the HEAD pointer back to point to the\u00a0<code>master</code>\u00a0branch, and it reverted the files in your working directory back to the snapshot that\u00a0<code>master</code>\u00a0points to. This also means the changes you make from this point forward will diverge from an older version of the project. It essentially rewinds the work you\u2019ve done in your\u00a0<code>testing</code>\u00a0branch so you can go in a different direction.</p> Note Switching branches changes files in your working directoryIt\u2019s important to note that when you switch branches in Git, files in your working directory will change. If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. If Git cannot do it cleanly, it will not let you switch at all. <p>Let\u2019s make a few changes and commit again:</p> <pre><code>$ vim test.rb\n$ git commit -a -m 'Make other changes'\n</code></pre> <p>Now your project history has diverged (see\u00a0Divergent history). You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work. Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you\u2019re ready. And you did all that with simple\u00a0<code>branch</code>,\u00a0<code>checkout</code>, and\u00a0<code>commit</code>\u00a0commands.</p> <p></p> <p>Figure 17. Divergent history</p> <p>You can also see this easily with the\u00a0<code>git log</code>\u00a0command. If you run\u00a0<code>git log --oneline --decorate --graph --all</code>\u00a0it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.</p> <pre><code>$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) Make other changes\n| * 87ab2 (testing) Make a change\n|/\n* f30ab Add feature #32 - ability to add new formats to the central interface\n* 34ac2 Fix bug #1328 - stack overflow under certain conditions\n* 98ca9 Initial commit of my project\n</code></pre> <p>Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy. Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).</p> <p>This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project\u2019s files into a second directory. This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous. Also, because we\u2019re recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do. These features help encourage developers to create and use branches often.</p> <p>Let\u2019s see why you should do so.</p> Note Creating a new branch and switching to it at the same timeIt\u2019s typical to create a new branch and want to switch to that new branch at the same time\u2009\u2014\u2009this can be done in one operation with\u00a0<code>git checkout -b &lt;newbranchname&gt;</code>. Note From Git version 2.23 onwards you can use\u00a0<code>git switch</code>\u00a0instead of\u00a0<code>git checkout</code>\u00a0to:- Switch to an existing branch:\u00a0<code>git switch testing-branch</code>. - Create a new branch and switch to it:\u00a0<code>git switch -c new-branch</code>. The\u00a0<code>-c</code>\u00a0flag stands for create, you can also use the full flag:\u00a0<code>--create</code>. - Return to your previously checked out branch:\u00a0<code>git switch -</code>."},{"location":"Code/How_to_Git_Branch/2_Basic_Branching_and_Merging/","title":"2 Basic Branching and Merging","text":"<p>Let\u2019s go through a simple example of branching and merging with a workflow that you might use in the real world. You\u2019ll follow these steps:</p> <ol> <li>Do some work on a website.</li> <li>Create a branch for a new user story you\u2019re working on.</li> <li>Do some work in that branch.</li> </ol> <p>At this stage, you\u2019ll receive a call that another issue is critical and you need a hotfix. You\u2019ll do the following:</p> <ol> <li>Switch to your production branch.</li> <li>Create a branch to add the hotfix.</li> <li>After it\u2019s tested, merge the hotfix branch, and push to production.</li> <li>Switch back to your original user story and continue working.</li> </ol>"},{"location":"Code/How_to_Git_Branch/2_Basic_Branching_and_Merging/#basic-branching","title":"Basic Branching","text":"<p>First, let\u2019s say you\u2019re working on your project and have a couple of commits already on the\u00a0<code>master</code>\u00a0branch.</p> <p></p> <p>Figure 18. A simple commit history</p> <p>You\u2019ve decided that you\u2019re going to work on issue #53 in whatever issue-tracking system your company uses. To create a new branch and switch to it at the same time, you can run the\u00a0<code>git checkout</code>\u00a0command with the\u00a0<code>-b</code>\u00a0switch:</p> <pre><code>$ git checkout -b iss53\nSwitched to a new branch \"iss53\"\n</code></pre> <p>This is shorthand for:</p> <pre><code>$ git branch iss53\n$ git checkout iss53\n</code></pre> <p></p> <p>Figure 19. Creating a new branch pointer</p> <p>You work on your website and do some commits. Doing so moves the\u00a0<code>iss53</code>\u00a0branch forward, because you have it checked out (that is, your\u00a0<code>HEAD</code>\u00a0is pointing to it):</p> <pre><code>$ vim index.html\n$ git commit -a -m 'Create new footer [issue 53]'\n</code></pre> <p></p> <p>Figure 20. The\u00a0<code>iss53</code>\u00a0branch has moved forward with your work</p> <p>Now you get the call that there is an issue with the website, and you need to fix it immediately. With Git, you don\u2019t have to deploy your fix along with the\u00a0<code>iss53</code>\u00a0changes you\u2019ve made, and you don\u2019t have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production. All you have to do is switch back to your\u00a0<code>master</code>\u00a0branch.</p> <p>However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you\u2019re checking out, Git won\u2019t let you switch branches. It\u2019s best to have a clean working state when you switch branches. There are ways to get around this (namely, stashing and commit amending) that we\u2019ll cover later on, in\u00a0Stashing and Cleaning. For now, let\u2019s assume you\u2019ve committed all your changes, so you can switch back to your\u00a0<code>master</code>\u00a0branch:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n</code></pre> <p>At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix. This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch. It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.</p> <p>Next, you have a hotfix to make. Let\u2019s create a\u00a0<code>hotfix</code>\u00a0branch on which to work until it\u2019s completed:</p> <pre><code>$ git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n$ vim index.html\n$ git commit -a -m 'Fix broken email address'\n[hotfix 1fb7853] Fix broken email address\n 1 file changed, 2 insertions(+)\n</code></pre> <p></p> <p>Figure 21. Hotfix branch based on\u00a0<code>master</code></p> <p>You can run your tests, make sure the hotfix is what you want, and finally merge the\u00a0<code>hotfix</code>\u00a0branch back into your\u00a0<code>master</code>\u00a0branch to deploy to production. You do this with the\u00a0<code>git merge</code>\u00a0command:</p> <pre><code>$ git checkout master\n$ git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n index.html | 2 ++\n 1 file changed, 2 insertions(+)\n</code></pre> <p>You\u2019ll notice the phrase \u201cfast-forward\u201d in that merge. Because the commit\u00a0<code>C4</code>\u00a0pointed to by the branch\u00a0<code>hotfix</code>\u00a0you merged in was directly ahead of the commit\u00a0<code>C2</code>\u00a0you\u2019re on, Git simply moves the pointer forward. To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit\u2019s history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together\u2009\u2014\u2009this is called a \u201cfast-forward.\u201d</p> <p>Your change is now in the snapshot of the commit pointed to by the\u00a0<code>master</code>\u00a0branch, and you can deploy the fix.</p> <p></p> <p>Figure 22.\u00a0<code>master</code>\u00a0is fast-forwarded to\u00a0<code>hotfix</code></p> <p>After your super-important fix is deployed, you\u2019re ready to switch back to the work you were doing before you were interrupted. However, first you\u2019ll delete the\u00a0<code>hotfix</code>\u00a0branch, because you no longer need it\u2009\u2014\u2009the\u00a0<code>master</code>\u00a0branch points at the same place. You can delete it with the\u00a0<code>-d</code>\u00a0option to\u00a0<code>git branch</code>:</p> <pre><code>$ git branch -d hotfix\nDeleted branch hotfix (3a0874c).\n</code></pre> <p>Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.</p> <pre><code>$ git checkout iss53\nSwitched to branch \"iss53\"\n$ vim index.html\n$ git commit -a -m 'Finish the new footer [issue 53]'\n[iss53 ad82d7a] Finish the new footer [issue 53]\n1 file changed, 1 insertion(+)\n</code></pre> <p></p> <p>Figure 23. Work continues on\u00a0<code>iss53</code></p> <p>It\u2019s worth noting here that the work you did in your\u00a0<code>hotfix</code>\u00a0branch is not contained in the files in your\u00a0<code>iss53</code>\u00a0branch. If you need to pull it in, you can merge your\u00a0<code>master</code>\u00a0branch into your\u00a0<code>iss53</code>\u00a0branch by running\u00a0<code>git merge master</code>, or you can wait to integrate those changes until you decide to pull the\u00a0<code>iss53</code>\u00a0branch back into\u00a0<code>master</code>\u00a0later.</p>"},{"location":"Code/How_to_Git_Branch/2_Basic_Branching_and_Merging/#basic-merging","title":"Basic Merging","text":"<p>Suppose you\u2019ve decided that your issue #53 work is complete and ready to be merged into your\u00a0<code>master</code>\u00a0branch. In order to do that, you\u2019ll merge your\u00a0<code>iss53</code>\u00a0branch into\u00a0<code>master</code>, much like you merged your\u00a0<code>hotfix</code>\u00a0branch earlier. All you have to do is check out the branch you wish to merge into and then run the\u00a0<code>git merge</code>\u00a0command:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n$ git merge iss53\nMerge made by the 'recursive' strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)\n</code></pre> <p>This looks a bit different than the\u00a0<code>hotfix</code>\u00a0merge you did earlier. In this case, your development history has diverged from some older point. Because the commit on the branch you\u2019re on isn\u2019t a direct ancestor of the branch you\u2019re merging in, Git has to do some work. In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.</p> <p></p> <p>Figure 24. Three snapshots used in a typical merge</p> <p>Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it. This is referred to as a merge commit, and is special in that it has more than one parent.</p> <p></p> <p>Figure 25. A merge commit</p> <p>Now that your work is merged in, you have no further need for the\u00a0<code>iss53</code>\u00a0branch. You can close the issue in your issue-tracking system, and delete the branch:</p> <pre><code>$ git branch -d iss53\n</code></pre>"},{"location":"Code/How_to_Git_Branch/2_Basic_Branching_and_Merging/#basic-merge-conflicts","title":"Basic Merge Conflicts","text":"<p>Occasionally, this process doesn\u2019t go smoothly. If you changed the same part of the same file differently in the two branches you\u2019re merging, Git won\u2019t be able to merge them cleanly. If your fix for issue #53 modified the same part of a file as the\u00a0<code>hotfix</code>\u00a0branch, you\u2019ll get a merge conflict that looks something like this:</p> <pre><code>$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> <p>Git hasn\u2019t automatically created a new merge commit. It has paused the process while you resolve the conflict. If you want to see which files are unmerged at any point after a merge conflict, you can run\u00a0<code>git status</code>:</p> <pre><code>$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n\n    both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Anything that has merge conflicts and hasn\u2019t been resolved is listed as unmerged. Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts. Your file contains a section that looks something like this:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=\"footer\"&gt;contact : email.support@github.com&lt;/div&gt;\n=======\n&lt;div id=\"footer\"&gt;\n please contact us at support@github.com\n&lt;/div&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html\n</code></pre> <p>This means the version in\u00a0<code>HEAD</code>\u00a0(your\u00a0<code>master</code>\u00a0branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the\u00a0<code>=======</code>), while the version in your\u00a0<code>iss53</code>\u00a0branch looks like everything in the bottom part. In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself. For instance, you might resolve this conflict by replacing the entire block with this:</p> <pre><code>&lt;div id=\"footer\"&gt;\nplease contact us at email.support@github.com\n&lt;/div&gt;\n</code></pre> <p>This resolution has a little of each section, and the\u00a0<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>,\u00a0<code>=======</code>, and\u00a0<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>\u00a0lines have been completely removed. After you\u2019ve resolved each of these sections in each conflicted file, run\u00a0<code>git add</code>\u00a0on each file to mark it as resolved. Staging the file marks it as resolved in Git.</p> <p>If you want to use a graphical tool to resolve these issues, you can run\u00a0<code>git mergetool</code>, which fires up an appropriate visual merge tool and walks you through the conflicts:</p> <pre><code>$ git mergetool\n\nThis message is displayed because 'merge.tool' is not configured.\nSee 'git mergetool --tool-help' or 'git help config' for more details.\n'git mergetool' will now attempt to use one of the following tools:\nopendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge\nMerging:\nindex.html\n\nNormal merge conflict for 'index.html':\n  {local}: modified file\n  {remote}: modified file\nHit return to start merge resolution tool (opendiff):\n</code></pre> <p>If you want to use a merge tool other than the default (Git chose\u00a0<code>opendiff</code>\u00a0in this case because the command was run on macOS), you can see all the supported tools listed at the top after \u201cone of the following tools.\u201d Just type the name of the tool you\u2019d rather use.</p> Note If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in\u00a0Advanced Merging. <p>After you exit the merge tool, Git asks you if the merge was successful. If you tell the script that it was, it stages the file to mark it as resolved for you. You can run\u00a0<code>git status</code>\u00a0again to verify that all conflicts have been resolved:</p> <pre><code>$ git status\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   index.html\n</code></pre> <p>If you\u2019re happy with that, and you verify that everything that had conflicts has been staged, you can type\u00a0<code>git commit</code>\u00a0to finalize the merge commit. The commit message by default looks something like this:</p> <pre><code>Merge branch 'iss53'\n\nConflicts:\n    index.html\n#\n# It looks like you may be committing a merge.\n# If this is not correct, please remove the file\n#   .git/MERGE_HEAD\n# and try again.\n\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# All conflicts fixed but you are still merging.\n#\n# Changes to be committed:\n#   modified:   index.html\n#\n</code></pre> <p>If you think it would be helpful to others looking at this merge in the future, you can modify this commit message with details about how you resolved the merge and explain why you did the changes you made if these are not obvious.</p>"},{"location":"Code/How_to_Git_Branch/3_Branch%20Management/","title":"3 Branch Management","text":"<p>Now that you\u2019ve created, merged, and deleted some branches, let\u2019s look at some branch-management tools that will come in handy when you begin using branches all the time.</p> <p>The\u00a0<code>git branch</code>\u00a0command does more than just create and delete branches. If you run it with no arguments, you get a simple listing of your current branches:</p> <pre><code>$ git branch\n  iss53\n* master\n  testing\n</code></pre> <p>Notice the\u00a0<code>*</code>\u00a0character that prefixes the\u00a0<code>master</code>\u00a0branch: it indicates the branch that you currently have checked out (i.e., the branch that\u00a0<code>HEAD</code>\u00a0points to). This means that if you commit at this point, the\u00a0<code>master</code>\u00a0branch will be moved forward with your new work. To see the last commit on each branch, you can run\u00a0<code>git branch -v</code>:</p> <pre><code>$ git branch -v\n  iss53   93b412c Fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 Add scott to the author list in the readme\n</code></pre> <p>The useful\u00a0<code>--merged</code>\u00a0and\u00a0<code>--no-merged</code>\u00a0options can filter this list to branches that you have or have not yet merged into the branch you\u2019re currently on. To see which branches are already merged into the branch you\u2019re on, you can run\u00a0<code>git branch --merged</code>:</p> <pre><code>$ git branch --merged\n  iss53\n* master\n</code></pre> <p>Because you already merged in\u00a0<code>iss53</code>\u00a0earlier, you see it in your list. Branches on this list without the\u00a0<code>*</code>\u00a0in front of them are generally fine to delete with\u00a0<code>git branch -d</code>; you\u2019ve already incorporated their work into another branch, so you\u2019re not going to lose anything.</p> <p>To see all the branches that contain work you haven\u2019t yet merged in, you can run\u00a0<code>git branch --no-merged</code>:</p> <pre><code>$ git branch --no-merged\n  testing\n</code></pre> <p>This shows your other branch. Because it contains work that isn\u2019t merged in yet, trying to delete it with\u00a0<code>git branch -d</code>\u00a0will fail:</p> <pre><code>$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n</code></pre> <p>If you really do want to delete the branch and lose that work, you can force it with\u00a0<code>-D</code>, as the helpful message points out.</p> Tip The options described above,\u00a0<code>--merged</code>\u00a0and\u00a0<code>--no-merged</code>\u00a0will, if not given a commit or branch name as an argument, show you what is, respectively, merged or not merged into your\u00a0current\u00a0branch.You can always provide an additional argument to ask about the merge state with respect to some other branch without checking that other branch out first, as in, what is not merged into the\u00a0<code>master</code>\u00a0branch?<code>console&lt;br&gt;$ git checkout testing&lt;br&gt;$ git branch --no-merged master&lt;br&gt;  topicA&lt;br&gt;  featureB&lt;br&gt;</code>"},{"location":"Code/How_to_Git_Branch/3_Branch%20Management/#changing-a-branch-name","title":"Changing a branch name","text":"Caution Do not rename branches that are still in use by other collaborators. Do not rename a branch like master/main/mainline without having read the section\u00a0Changing the master branch name. <p>Suppose you have a branch that is called\u00a0<code>bad-branch-name</code>\u00a0and you want to change it to\u00a0<code>corrected-branch-name</code>, while keeping all history. You also want to change the branch name on the remote (GitHub, GitLab, other server). How do you do this?</p> <p>Rename the branch locally with the\u00a0<code>git branch --move</code>\u00a0command:</p> <pre><code>$ git branch --move bad-branch-name corrected-branch-name\n</code></pre> <p>This replaces your\u00a0<code>bad-branch-name</code>\u00a0with\u00a0<code>corrected-branch-name</code>, but this change is only local for now. To let others see the corrected branch on the remote, push it:</p> <pre><code>$ git push --set-upstream origin corrected-branch-name\n</code></pre> <p>Now we\u2019ll take a brief look at where we are now:</p> <pre><code>$ git branch --all\n* corrected-branch-name\n  main\n  remotes/origin/bad-branch-name\n  remotes/origin/corrected-branch-name\n  remotes/origin/main\n</code></pre> <p>Notice that you\u2019re on the branch\u00a0<code>corrected-branch-name</code>\u00a0and it\u2019s available on the remote. However, the branch with the bad name is also still present there but you can delete it by executing the following command:</p> <pre><code>$ git push origin --delete bad-branch-name\n</code></pre> <p>Now the bad branch name is fully replaced with the corrected branch name.</p>"},{"location":"Code/How_to_Git_Branch/3_Branch%20Management/#changing-the-master-branch-name","title":"Changing the master branch name","text":"Warning Changing the name of a branch like master/main/mainline/default will break the integrations, services, helper utilities and build/release scripts that your repository uses. Before you do this, make sure you consult with your collaborators. Also, make sure you do a thorough search through your repo and update any references to the old branch name in your code and scripts. <p>Rename your local\u00a0<code>master</code>\u00a0branch into\u00a0<code>main</code>\u00a0with the following command:</p> <pre><code>$ git branch --move master main\n</code></pre> <p>There\u2019s no local\u00a0<code>master</code>\u00a0branch anymore, because it\u2019s renamed to the\u00a0<code>main</code>\u00a0branch.</p> <p>To let others see the new\u00a0<code>main</code>\u00a0branch, you need to push it to the remote. This makes the renamed branch available on the remote.</p> <pre><code>$ git push --set-upstream origin main\n</code></pre> <p>Now we end up with the following state:</p> <pre><code>$ git branch --all\n* main\n  remotes/origin/HEAD -&gt; origin/master\n  remotes/origin/main\n  remotes/origin/master\n</code></pre> <p>Your local\u00a0<code>master</code>\u00a0branch is gone, as it\u2019s replaced with the\u00a0<code>main</code>\u00a0branch. The\u00a0<code>main</code>\u00a0branch is present on the remote. However, the old\u00a0<code>master</code>\u00a0branch is still present on the remote. Other collaborators will continue to use the\u00a0<code>master</code>\u00a0branch as the base of their work, until you make some further changes.</p> <p>Now you have a few more tasks in front of you to complete the transition:</p> <ul> <li>Any projects that depend on this one will need to update their code and/or configuration.</li> <li>Update any test-runner configuration files.</li> <li>Adjust build and release scripts.</li> <li>Redirect settings on your repo host for things like the repo\u2019s default branch, merge rules, and other things that match branch names.</li> <li>Update references to the old branch in documentation.</li> <li>Close or merge any pull requests that target the old branch.</li> </ul> <p>After you\u2019ve done all these tasks, and are certain the\u00a0<code>main</code>\u00a0branch performs just as the\u00a0<code>master</code>\u00a0branch, you can delete the\u00a0<code>master</code>\u00a0branch:</p> <pre><code>$ git push origin --delete master\n</code></pre>"},{"location":"Code/How_to_Git_Branch/4_Branching_Workflows/","title":"4 Branching Workflows","text":"<p>Now that you have the basics of branching and merging down, what can or should you do with them? In this section, we\u2019ll cover some common workflows that this lightweight branching makes possible, so you can decide if you would like to incorporate them into your own development cycle.</p>"},{"location":"Code/How_to_Git_Branch/4_Branching_Workflows/#long-running-branches","title":"Long-Running Branches","text":"<p>Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do. This means you can have several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others.</p> <p>Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their\u00a0<code>master</code>\u00a0branch\u2009\u2014\u2009possibly only code that has been or will be released. They have another parallel branch named\u00a0<code>develop</code>\u00a0or\u00a0<code>next</code>\u00a0that they work from or use to test stability\u2009\u2014\u2009it isn\u2019t necessarily always stable, but whenever it gets to a stable state, it can be merged into\u00a0<code>master</code>. It\u2019s used to pull in topic branches (short-lived branches, like your earlier\u00a0<code>iss53</code>\u00a0branch) when they\u2019re ready, to make sure they pass all the tests and don\u2019t introduce bugs.</p> <p>In reality, we\u2019re talking about pointers moving up the line of commits you\u2019re making. The stable branches are farther down the line in your commit history, and the bleeding-edge branches are farther up the history.</p> <p></p> <p>Figure 26. A linear view of progressive-stability branching</p> <p>It\u2019s generally easier to think about them as work silos, where sets of commits graduate to a more stable silo when they\u2019re fully tested.</p> <p></p> <p>Figure 27. A \u201csilo\u201d view of progressive-stability branching</p> <p>You can keep doing this for several levels of stability. Some larger projects also have a\u00a0<code>proposed</code>\u00a0or\u00a0<code>pu</code>\u00a0(proposed updates) branch that has integrated branches that may not be ready to go into the\u00a0<code>next</code>\u00a0or\u00a0<code>master</code>\u00a0branch. The idea is that your branches are at various levels of stability; when they reach a more stable level, they\u2019re merged into the branch above them. Again, having multiple long-running branches isn\u2019t necessary, but it\u2019s often helpful, especially when you\u2019re dealing with very large or complex projects.</p>"},{"location":"Code/How_to_Git_Branch/4_Branching_Workflows/#topic-branches","title":"Topic Branches","text":"<p>Topic branches, however, are useful in projects of any size. A topic branch is a short-lived branch that you create and use for a single particular feature or related work. This is something you\u2019ve likely never done with a VCS before because it\u2019s generally too expensive to create and merge branches. But in Git it\u2019s common to create, work on, merge, and delete branches several times a day.</p> <p>You saw this in the last section with the\u00a0<code>iss53</code>\u00a0and\u00a0<code>hotfix</code>\u00a0branches you created. You did a few commits on them and deleted them directly after merging them into your main branch. This technique allows you to context-switch quickly and completely\u2009\u2014\u2009because your work is separated into silos where all the changes in that branch have to do with that topic, it\u2019s easier to see what has happened during code review and such. You can keep the changes there for minutes, days, or months, and merge them in when they\u2019re ready, regardless of the order in which they were created or worked on.</p> <p>Consider an example of doing some work (on\u00a0<code>master</code>), branching off for an issue (<code>iss91</code>), working on it for a bit, branching off the second branch to try another way of handling the same thing (<code>iss91v2</code>), going back to your\u00a0<code>master</code>\u00a0branch and working there for a while, and then branching off there to do some work that you\u2019re not sure is a good idea (<code>dumbidea</code>\u00a0branch). Your commit history will look something like this:</p> <p></p> <p>Figure 28. Multiple topic branches</p> <p>Now, let\u2019s say you decide you like the second solution to your issue best (<code>iss91v2</code>); and you showed the\u00a0<code>dumbidea</code>\u00a0branch to your coworkers, and it turns out to be genius. You can throw away the original\u00a0<code>iss91</code>\u00a0branch (losing commits\u00a0<code>C5</code>\u00a0and\u00a0<code>C6</code>) and merge in the other two. Your history then looks like this:</p> <p></p> <p>Figure 29. History after merging\u00a0<code>dumbidea</code>\u00a0and\u00a0<code>iss91v2</code></p> <p>We will go into more detail about the various possible workflows for your Git project in\u00a0Distributed Git, so before you decide which branching scheme your next project will use, be sure to read that chapter.</p> <p>It\u2019s important to remember when you\u2019re doing all this that these branches are completely local. When you\u2019re branching and merging, everything is being done only in your Git repository\u2009\u2014\u2009there is no communication with the server.</p>"},{"location":"Code/How_to_Git_Branch/5_Remote_Branches/","title":"5 Remote Branches","text":"<p>Remote references are references (pointers) in your remote repositories, including branches, tags, and so on. You can get a full list of remote references explicitly with\u00a0<code>git ls-remote &lt;remote&gt;</code>, or\u00a0<code>git remote show &lt;remote&gt;</code>\u00a0for remote branches as well as more information. Nevertheless, a more common way is to take advantage of remote-tracking branches.</p> <p>Remote-tracking branches are references to the state of remote branches. They\u2019re local references that you can\u2019t move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository. Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them.</p> <p>Remote-tracking branch names take the form\u00a0<code>&lt;remote&gt;/&lt;branch&gt;</code>. For instance, if you wanted to see what the\u00a0<code>master</code>\u00a0branch on your\u00a0<code>origin</code>\u00a0remote looked like as of the last time you communicated with it, you would check the\u00a0<code>origin/master</code>\u00a0branch. If you were working on an issue with a partner and they pushed up an\u00a0<code>iss53</code>\u00a0branch, you might have your own local\u00a0<code>iss53</code>\u00a0branch, but the branch on the server would be represented by the remote-tracking branch\u00a0<code>origin/iss53</code>.</p> <p>This may be a bit confusing, so let\u2019s look at an example. Let\u2019s say you have a Git server on your network at\u00a0<code>git.ourcompany.com</code>. If you clone from this, Git\u2019s\u00a0<code>clone</code>\u00a0command automatically names it\u00a0<code>origin</code>\u00a0for you, pulls down all its data, creates a pointer to where its\u00a0<code>master</code>\u00a0branch is, and names it\u00a0<code>origin/master</code>\u00a0locally. Git also gives you your own local\u00a0<code>master</code>\u00a0branch starting at the same place as origin\u2019s\u00a0<code>master</code>\u00a0branch, so you have something to work from.</p> Note \u201corigin\u201d is not specialJust like the branch name \u201cmaster\u201d does not have any special meaning in Git, neither does \u201corigin\u201d. While \u201cmaster\u201d is the default name for a starting branch when you run\u00a0<code>git init</code>\u00a0which is the only reason it\u2019s widely used, \u201corigin\u201d is the default name for a remote when you run\u00a0<code>git clone</code>. If you run\u00a0<code>git clone -o booyah</code>\u00a0instead, then you will have\u00a0<code>booyah/master</code>\u00a0as your default remote branch. <p></p> <p>Figure 30. Server and local repositories after cloning</p> <p>If you do some work on your local\u00a0<code>master</code>\u00a0branch, and, in the meantime, someone else pushes to\u00a0<code>git.ourcompany.com</code>\u00a0and updates its\u00a0<code>master</code>\u00a0branch, then your histories move forward differently. Also, as long as you stay out of contact with your\u00a0<code>origin</code>\u00a0server, your\u00a0<code>origin/master</code>\u00a0pointer doesn\u2019t move.</p> <p></p> <p>Figure 31. Local and remote work can diverge</p> <p>To synchronize your work with a given remote, you run a\u00a0<code>git fetch &lt;remote&gt;</code>\u00a0command (in our case,\u00a0<code>git fetch origin</code>). This command looks up which server \u201corigin\u201d is (in this case, it\u2019s\u00a0<code>git.ourcompany.com</code>), fetches any data from it that you don\u2019t yet have, and updates your local database, moving your\u00a0<code>origin/master</code>\u00a0pointer to its new, more up-to-date position.</p> <p></p> <p>Figure 32.\u00a0<code>git fetch</code>\u00a0updates your remote-tracking branches</p> <p>To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let\u2019s assume you have another internal Git server that is used only for development by one of your sprint teams. This server is at\u00a0<code>git.team1.ourcompany.com</code>. You can add it as a new remote reference to the project you\u2019re currently working on by running the\u00a0<code>git remote add</code>\u00a0command as we covered in\u00a0Git Basics. Name this remote\u00a0<code>teamone</code>, which will be your shortname for that whole URL.</p> <p></p> <p>Figure 33. Adding another server as a remote</p> <p>Now, you can run\u00a0<code>git fetch teamone</code>\u00a0to fetch everything the remote\u00a0<code>teamone</code>\u00a0server has that you don\u2019t have yet. Because that server has a subset of the data your\u00a0<code>origin</code>\u00a0server has right now, Git fetches no data but sets a remote-tracking branch called\u00a0<code>teamone/master</code>\u00a0to point to the commit that\u00a0<code>teamone</code>\u00a0has as its\u00a0<code>master</code>\u00a0branch.</p> <p></p> <p>Figure 34. Remote-tracking branch for\u00a0<code>teamone/master</code></p>"},{"location":"Code/How_to_Git_Branch/5_Remote_Branches/#pushing","title":"Pushing","text":"<p>When you want to share a branch with the world, you need to push it up to a remote to which you have write access. Your local branches aren\u2019t automatically synchronized to the remotes you write to\u2009\u2014\u2009you have to explicitly push the branches you want to share. That way, you can use private branches for work you don\u2019t want to share, and push up only the topic branches you want to collaborate on.</p> <p>If you have a branch named\u00a0<code>serverfix</code>\u00a0that you want to work on with others, you can push it up the same way you pushed your first branch. Run\u00a0<code>git push &lt;remote&gt; &lt;branch&gt;</code>:</p> <pre><code>$ git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -&gt; serverfix\n</code></pre> <p>This is a bit of a shortcut. Git automatically expands the\u00a0<code>serverfix</code>\u00a0branchname out to\u00a0<code>refs/heads/serverfix:refs/heads/serverfix</code>, which means, \u201cTake my\u00a0<code>serverfix</code>\u00a0local branch and push it to update the remote\u2019s\u00a0<code>serverfix</code>\u00a0branch.\u201d We\u2019ll go over the\u00a0<code>refs/heads/</code>\u00a0part in detail in\u00a0Git Internals, but you can generally leave it off. You can also do\u00a0<code>git push origin serverfix:serverfix</code>, which does the same thing\u2009\u2014\u2009it says, \u201cTake my serverfix and make it the remote\u2019s serverfix.\u201d You can use this format to push a local branch into a remote branch that is named differently. If you didn\u2019t want it to be called\u00a0<code>serverfix</code>\u00a0on the remote, you could instead run\u00a0<code>git push origin serverfix:awesomebranch</code>\u00a0to push your local\u00a0<code>serverfix</code>\u00a0branch to the\u00a0<code>awesomebranch</code>\u00a0branch on the remote project.</p> Note Don\u2019t type your password every timeIf you\u2019re using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication. By default it will prompt you on the terminal for this information so the server can tell if you\u2019re allowed to push.If you don\u2019t want to type it every single time you push, you can set up a \u201ccredential cache\u201d. The simplest is just to keep it in memory for a few minutes, which you can easily set up by running\u00a0<code>git config --global credential.helper cache</code>.For more information on the various credential caching options available, see\u00a0Credential Storage. <p>The next time one of your collaborators fetches from the server, they will get a reference to where the server\u2019s version of\u00a0<code>serverfix</code>\u00a0is under the remote branch\u00a0<code>origin/serverfix</code>:</p> <pre><code>$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -&gt; origin/serverfix\n</code></pre> <p>It\u2019s important to note that when you do a fetch that brings down new remote-tracking branches, you don\u2019t automatically have local, editable copies of them. In other words, in this case, you don\u2019t have a new\u00a0<code>serverfix</code>\u00a0branch\u2009\u2014\u2009you have only an\u00a0<code>origin/serverfix</code>\u00a0pointer that you can\u2019t modify.</p> <p>To merge this work into your current working branch, you can run\u00a0<code>git merge origin/serverfix</code>. If you want your own\u00a0<code>serverfix</code>\u00a0branch that you can work on, you can base it off your remote-tracking branch:</p> <pre><code>$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n</code></pre> <p>This gives you a local branch that you can work on that starts where\u00a0<code>origin/serverfix</code>\u00a0is.</p>"},{"location":"Code/How_to_Git_Branch/5_Remote_Branches/#tracking-branches","title":"Tracking Branches","text":"<p>Checking out a local branch from a remote-tracking branch automatically creates what is called a \u201ctracking branch\u201d (and the branch it tracks is called an \u201cupstream branch\u201d). Tracking branches are local branches that have a direct relationship to a remote branch. If you\u2019re on a tracking branch and type\u00a0<code>git pull</code>, Git automatically knows which server to fetch from and which branch to merge in.</p> <p>When you clone a repository, it generally automatically creates a\u00a0<code>master</code>\u00a0branch that tracks\u00a0<code>origin/master</code>. However, you can set up other tracking branches if you wish\u2009\u2014\u2009ones that track branches on other remotes, or don\u2019t track the\u00a0<code>master</code>\u00a0branch. The simple case is the example you just saw, running\u00a0<code>git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</code>. This is a common enough operation that Git provides the\u00a0<code>--track</code>\u00a0shorthand:</p> <pre><code>$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n</code></pre> <p>In fact, this is so common that there\u2019s even a shortcut for that shortcut. If the branch name you\u2019re trying to checkout (a) doesn\u2019t exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you:</p> <pre><code>$ git checkout serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n</code></pre> <p>To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:</p> <pre><code>$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'\n</code></pre> <p>Now, your local branch\u00a0<code>sf</code>\u00a0will automatically pull from\u00a0<code>origin/serverfix</code>.</p> <p>If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you\u2019re tracking, you can use the\u00a0<code>-u</code>\u00a0or\u00a0<code>--set-upstream-to</code>\u00a0option to\u00a0<code>git branch</code>\u00a0to explicitly set it at any time.</p> <pre><code>$ git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\n</code></pre> Note Upstream shorthandWhen you have a tracking branch set up, you can reference its upstream branch with the\u00a0<code>@{upstream}</code>\u00a0or\u00a0<code>@{u}</code>\u00a0shorthand. So if you\u2019re on the\u00a0<code>master</code>\u00a0branch and it\u2019s tracking\u00a0<code>origin/master</code>, you can say something like\u00a0<code>git merge @{u}</code>\u00a0instead of\u00a0<code>git merge origin/master</code>\u00a0if you wish. <p>If you want to see what tracking branches you have set up, you can use the\u00a0<code>-vv</code>\u00a0option to\u00a0<code>git branch</code>. This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both.</p> <pre><code>$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets\n  master    1ae2a45 [origin/master] Deploy index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it\n  testing   5ea463a Try something new\n</code></pre> <p>So here we can see that our\u00a0<code>iss53</code>\u00a0branch is tracking\u00a0<code>origin/iss53</code>\u00a0and is \u201cahead\u201d by two, meaning that we have two commits locally that are not pushed to the server. We can also see that our\u00a0<code>master</code>\u00a0branch is tracking\u00a0<code>origin/master</code>\u00a0and is up to date. Next we can see that our\u00a0<code>serverfix</code>\u00a0branch is tracking the\u00a0<code>server-fix-good</code>\u00a0branch on our\u00a0<code>teamone</code>\u00a0server and is ahead by three and behind by one, meaning that there is one commit on the server we haven\u2019t merged in yet and three commits locally that we haven\u2019t pushed. Finally we can see that our\u00a0<code>testing</code>\u00a0branch is not tracking any remote branch.</p> <p>It\u2019s important to note that these numbers are only since the last time you fetched from each server. This command does not reach out to the servers, it\u2019s telling you about what it has cached from these servers locally. If you want totally up to date ahead and behind numbers, you\u2019ll need to fetch from all your remotes right before running this. You could do that like this:</p> <pre><code>$ git fetch --all; git branch -vv\n</code></pre>"},{"location":"Code/How_to_Git_Branch/5_Remote_Branches/#pulling","title":"Pulling","text":"<p>While the\u00a0<code>git fetch</code>\u00a0command will fetch all the changes on the server that you don\u2019t have yet, it will not modify your working directory at all. It will simply get the data for you and let you merge it yourself. However, there is a command called\u00a0<code>git pull</code>\u00a0which is essentially a\u00a0<code>git fetch</code>\u00a0immediately followed by a\u00a0<code>git merge</code>\u00a0in most cases. If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the\u00a0<code>clone</code>\u00a0or\u00a0<code>checkout</code>\u00a0commands,\u00a0<code>git pull</code>\u00a0will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch.</p> <p>Generally it\u2019s better to simply use the\u00a0<code>fetch</code>\u00a0and\u00a0<code>merge</code>\u00a0commands explicitly as the magic of\u00a0<code>git pull</code>\u00a0can often be confusing.</p>"},{"location":"Code/How_to_Git_Branch/5_Remote_Branches/#deleting-remote-branches","title":"Deleting Remote Branches","text":"<p>Suppose you\u2019re done with a remote branch\u2009\u2014\u2009say you and your collaborators are finished with a feature and have merged it into your remote\u2019s\u00a0<code>master</code>\u00a0branch (or whatever branch your stable codeline is in). You can delete a remote branch using the\u00a0<code>--delete</code>\u00a0option to\u00a0<code>git push</code>. If you want to delete your\u00a0<code>serverfix</code>\u00a0branch from the server, you run the following:</p> <pre><code>$ git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix\n</code></pre> <p>Basically all this does is to remove the pointer from the server. The Git server will generally keep the data there for a while until a garbage collection runs, so if it was accidentally deleted, it\u2019s often easy to recover.</p>"},{"location":"Code/How_to_Git_Branch/6_Rebasing/","title":"6 Rebasing","text":"<p>In Git, there are two main ways to integrate changes from one branch into another: the\u00a0<code>merge</code>\u00a0and the\u00a0<code>rebase</code>. In this section you\u2019ll learn what rebasing is, how to do it, why it\u2019s a pretty amazing tool, and in what cases you won\u2019t want to use it.</p>"},{"location":"Code/How_to_Git_Branch/6_Rebasing/#the-basic-rebase","title":"The Basic Rebase","text":"<p>If you go back to an earlier example from\u00a0Basic Merging, you can see that you diverged your work and made commits on two different branches.</p> <p></p> <p>Figure 35. Simple divergent history</p> <p>The easiest way to integrate the branches, as we\u2019ve already covered, is the\u00a0<code>merge</code>\u00a0command. It performs a three-way merge between the two latest branch snapshots (<code>C3</code>\u00a0and\u00a0<code>C4</code>) and the most recent common ancestor of the two (<code>C2</code>), creating a new snapshot (and commit).</p> <p></p> <p>Figure 36. Merging to integrate diverged work history</p> <p>However, there is another way: you can take the patch of the change that was introduced in\u00a0<code>C4</code>\u00a0and reapply it on top of\u00a0<code>C3</code>. In Git, this is called\u00a0rebasing. With the\u00a0<code>rebase</code>\u00a0command, you can take all the changes that were committed on one branch and replay them on a different branch.</p> <p>For this example, you would check out the\u00a0<code>experiment</code>\u00a0branch, and then rebase it onto the\u00a0<code>master</code>\u00a0branch as follows:</p> <pre><code>$ git checkout experiment\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n</code></pre> <p>This operation works by going to the common ancestor of the two branches (the one you\u2019re on and the one you\u2019re rebasing onto), getting the diff introduced by each commit of the branch you\u2019re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</p> <p></p> <p>Figure 37. Rebasing the change introduced in\u00a0<code>C4</code>\u00a0onto\u00a0<code>C3</code></p> <p>At this point, you can go back to the\u00a0<code>master</code>\u00a0branch and do a fast-forward merge.</p> <pre><code>$ git checkout master\n$ git merge experiment\n</code></pre> <p></p> <p>Figure 38. Fast-forwarding the\u00a0<code>master</code>\u00a0branch</p> <p>Now, the snapshot pointed to by\u00a0<code>C4'</code>\u00a0is exactly the same as the one that was pointed to by\u00a0<code>C5</code>\u00a0in\u00a0the merge example. There is no difference in the end product of the integration, but rebasing makes for a cleaner history. If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.</p> <p>Often, you\u2019ll do this to make sure your commits apply cleanly on a remote branch\u2009\u2014\u2009perhaps in a project to which you\u2019re trying to contribute but that you don\u2019t maintain. In this case, you\u2019d do your work in a branch and then rebase your work onto\u00a0<code>origin/master</code>\u00a0when you were ready to submit your patches to the main project. That way, the maintainer doesn\u2019t have to do any integration work\u2009\u2014\u2009just a fast-forward or a clean apply.</p> <p>Note that the snapshot pointed to by the final commit you end up with, whether it\u2019s the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot\u2009\u2014\u2009it\u2019s only the history that is different. Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</p>"},{"location":"Code/How_to_Git_Branch/6_Rebasing/#more-interesting-rebases","title":"More Interesting Rebases","text":"<p>You can also have your rebase replay on something other than the rebase target branch. Take a history like\u00a0A history with a topic branch off another topic branch, for example. You branched a topic branch (<code>server</code>) to add some server-side functionality to your project, and made a commit. Then, you branched off that to make the client-side changes (<code>client</code>) and committed a few times. Finally, you went back to your\u00a0<code>server</code>\u00a0branch and did a few more commits.</p> <p></p> <p>Figure 39. A history with a topic branch off another topic branch</p> <p>Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it\u2019s tested further. You can take the changes on\u00a0<code>client</code>\u00a0that aren\u2019t on\u00a0<code>server</code>\u00a0(<code>C8</code>\u00a0and\u00a0<code>C9</code>) and replay them on your\u00a0<code>master</code>\u00a0branch by using the\u00a0<code>--onto</code>\u00a0option of\u00a0<code>git rebase</code>:</p> <pre><code>$ git rebase --onto master server client\n</code></pre> <p>This basically says, \u201cTake the\u00a0<code>client</code>\u00a0branch, figure out the patches since it diverged from the\u00a0<code>server</code>\u00a0branch, and replay these patches in the\u00a0<code>client</code>\u00a0branch as if it was based directly off the\u00a0<code>master</code>\u00a0branch instead.\u201d It\u2019s a bit complex, but the result is pretty cool.</p> <p></p> <p>Figure 40. Rebasing a topic branch off another topic branch</p> <p>Now you can fast-forward your\u00a0<code>master</code>\u00a0branch (see\u00a0Fast-forwarding your\u00a0<code>master</code>\u00a0branch to include the\u00a0<code>client</code>\u00a0branch changes):</p> <pre><code>$ git checkout master\n$ git merge client\n</code></pre> <p></p> <p>Figure 41. Fast-forwarding your\u00a0<code>master</code>\u00a0branch to include the\u00a0<code>client</code>\u00a0branch changes</p> <p>Let\u2019s say you decide to pull in your\u00a0<code>server</code>\u00a0branch as well. You can rebase the\u00a0<code>server</code>\u00a0branch onto the\u00a0<code>master</code>\u00a0branch without having to check it out first by running\u00a0<code>git rebase &lt;basebranch&gt; &lt;topicbranch&gt;</code>\u2009\u2014\u2009which checks out the topic branch (in this case,\u00a0<code>server</code>) for you and replays it onto the base branch (<code>master</code>):</p> <pre><code>$ git rebase master server\n</code></pre> <p>This replays your\u00a0<code>server</code>\u00a0work on top of your\u00a0<code>master</code>\u00a0work, as shown in\u00a0Rebasing your\u00a0<code>server</code>\u00a0branch on top of your\u00a0<code>master</code>\u00a0branch.</p> <p></p> <p>Figure 42. Rebasing your\u00a0<code>server</code>\u00a0branch on top of your\u00a0<code>master</code>\u00a0branch</p> <p>Then, you can fast-forward the base branch (<code>master</code>):</p> <pre><code>$ git checkout master\n$ git merge server\n</code></pre> <p>You can remove the\u00a0<code>client</code>\u00a0and\u00a0<code>server</code>\u00a0branches because all the work is integrated and you don\u2019t need them anymore, leaving your history for this entire process looking like\u00a0Final commit history:</p> <pre><code>$ git branch -d client\n$ git branch -d server\n</code></pre> <p></p> <p>Figure 43. Final commit history</p>"},{"location":"Code/How_to_Git_Branch/6_Rebasing/#the-perils-of-rebasing","title":"The Perils of Rebasing","text":"<p>Ahh, but the bliss of rebasing isn\u2019t without its drawbacks, which can be summed up in a single line:</p> <p>Do not rebase commits that exist outside your repository and that people may have based work on.</p> <p>If you follow that guideline, you\u2019ll be fine. If you don\u2019t, people will hate you, and you\u2019ll be scorned by friends and family.</p> <p>When you rebase stuff, you\u2019re abandoning existing commits and creating new ones that are similar but different. If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with\u00a0<code>git rebase</code>\u00a0and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.</p> <p>Let\u2019s look at an example of how rebasing work that you\u2019ve made public can cause problems. Suppose you clone from a central server and then do some work off that. Your commit history looks like this:</p> <p></p> <p>Figure 44. Clone a repository, and base some work on it</p> <p>Now, someone else does more work that includes a merge, and pushes that work to the central server. You fetch it and merge the new remote branch into your work, making your history look something like this:</p> <p></p> <p>Figure 45. Fetch more commits, and merge them into your work</p> <p>Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a\u00a0<code>git push --force</code>\u00a0to overwrite the history on the server. You then fetch from that server, bringing down the new commits.</p> <p></p> <p>Figure 46. Someone pushes rebased commits, abandoning commits you\u2019ve based your work on</p> <p>Now you\u2019re both in a pickle. If you do a\u00a0<code>git pull</code>, you\u2019ll create a merge commit which includes both lines of history, and your repository will look like this:</p> <p></p> <p>Figure 47. You merge in the same work again into a new merge commit</p> <p>If you run a\u00a0<code>git log</code>\u00a0when your history looks like this, you\u2019ll see two commits that have the same author, date, and message, which will be confusing. Furthermore, if you push this history back up to the server, you\u2019ll reintroduce all those rebased commits to the central server, which can further confuse people. It\u2019s pretty safe to assume that the other developer doesn\u2019t want\u00a0<code>C4</code>\u00a0and\u00a0<code>C6</code>\u00a0to be in the history; that\u2019s why they rebased in the first place.</p>"},{"location":"Code/How_to_Git_Branch/6_Rebasing/#rebase-when-you-rebase","title":"Rebase When You Rebase","text":"<p>If you\u00a0do\u00a0find yourself in a situation like this, Git has some further magic that might help you out. If someone on your team force pushes changes that overwrite work that you\u2019ve based work on, your challenge is to figure out what is yours and what they\u2019ve rewritten.</p> <p>It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit. This is called a \u201cpatch-id\u201d.</p> <p>If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.</p> <p>For instance, in the previous scenario, if instead of doing a merge when we\u2019re at\u00a0Someone pushes rebased commits, abandoning commits you\u2019ve based your work on\u00a0we run\u00a0<code>git rebase teamone/master</code>, Git will:</p> <ul> <li>Determine what work is unique to our branch (<code>C2</code>,\u00a0<code>C3</code>,\u00a0<code>C4</code>,\u00a0<code>C6</code>,\u00a0<code>C7</code>)</li> <li>Determine which are not merge commits (<code>C2</code>,\u00a0<code>C3</code>,\u00a0<code>C4</code>)</li> <li>Determine which have not been rewritten into the target branch (just\u00a0<code>C2</code>\u00a0and\u00a0<code>C3</code>, since\u00a0<code>C4</code>\u00a0is the same patch as\u00a0<code>C4'</code>)</li> <li>Apply those commits to the top of\u00a0<code>teamone/master</code></li> </ul> <p>So instead of the result we see in\u00a0You merge in the same work again into a new merge commit, we would end up with something more like\u00a0Rebase on top of force-pushed rebase work.</p> <p></p> <p>Figure 48. Rebase on top of force-pushed rebase work</p> <p>This only works if\u00a0<code>C4</code>\u00a0and\u00a0<code>C4'</code>\u00a0that your partner made are almost exactly the same patch. Otherwise the rebase won\u2019t be able to tell that it\u2019s a duplicate and will add another\u00a0<code>C4</code>-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).</p> <p>You can also simplify this by running a\u00a0<code>git pull --rebase</code>\u00a0instead of a normal\u00a0<code>git pull</code>. Or you could do it manually with a\u00a0<code>git fetch</code>\u00a0followed by a\u00a0<code>git rebase teamone/master</code>\u00a0in this case.</p> <p>If you are using\u00a0<code>git pull</code>\u00a0and want to make\u00a0<code>--rebase</code>\u00a0the default, you can set the\u00a0<code>pull.rebase</code>\u00a0config value with something like\u00a0<code>git config --global pull.rebase true</code>.</p> <p>If you only ever rebase commits that have never left your own computer, you\u2019ll be just fine. If you rebase commits that have been pushed, but that no one else has based commits from, you\u2019ll also be fine. If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.</p> <p>If you or a partner does find it necessary at some point, make sure everyone knows to run\u00a0<code>git pull --rebase</code>\u00a0to try to make the pain after it happens a little bit simpler.</p>"},{"location":"Code/How_to_Git_Branch/6_Rebasing/#rebase-vs-merge","title":"Rebase vs. Merge","text":"<p>Now that you\u2019ve seen rebasing and merging in action, you may be wondering which one is better. Before we can answer this, let\u2019s step back a bit and talk about what history means.</p> <p>One point of view on this is that your repository\u2019s commit history is a\u00a0record of what actually happened.\u00a0It\u2019s a historical document, valuable in its own right, and shouldn\u2019t be tampered with. From this angle, changing the commit history is almost blasphemous; you\u2019re\u00a0lying\u00a0about what actually transpired. So what if there was a messy series of merge commits? That\u2019s how it happened, and the repository should preserve that for posterity.</p> <p>The opposing point of view is that the commit history is the\u00a0story of how your project was made.\u00a0You wouldn\u2019t publish the first draft of a book, so why show your messy work? When you\u2019re working on a project, you may need a record of all your missteps and dead-end paths, but when it\u2019s time to show your work to the world, you may want to tell a more coherent story of how to get from A to B. People in this camp use tools like\u00a0<code>rebase</code>\u00a0and\u00a0<code>filter-branch</code>\u00a0to rewrite their commits before they\u2019re merged into the mainline branch. They use tools like\u00a0<code>rebase</code>\u00a0and\u00a0<code>filter-branch</code>, to tell the story in the way that\u2019s best for future readers.</p> <p>Now, to the question of whether merging or rebasing is better: hopefully you\u2019ll see that it\u2019s not that simple. Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different. Now that you know how both of these things work, it\u2019s up to you to decide which one is best for your particular situation.</p> <p>You can get the best of both worlds: rebase local changes before pushing to clean up your work, but never rebase anything that you\u2019ve pushed somewhere.</p>"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/","title":"7 Distributed Workflows","text":"<p>Now that you have a remote Git repository set up as a focal point for all the developers to share their code, and you\u2019re familiar with basic Git commands in a local workflow, you\u2019ll look at how to utilize some of the distributed workflows that Git affords you.</p> <p>In this chapter, you\u2019ll see how to work with Git in a distributed environment as a contributor and an integrator. That is, you\u2019ll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing.</p>"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/#distributed-workflows","title":"Distributed Workflows","text":"<p>In contrast with Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects. In centralized systems, every developer is a node working more or less equally with a central hub. In Git, however, every developer is potentially both a node and a hub; that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to. This presents a vast range of workflow possibilities for your project and/or your team, so we\u2019ll cover a few common paradigms that take advantage of this flexibility. We\u2019ll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.</p>"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/#centralized-workflow","title":"Centralized Workflow","text":"<p>In centralized systems, there is generally a single collaboration model\u2009\u2014\u2009the centralized workflow. One central hub, or\u00a0repository, can accept code, and everyone synchronizes their work with it. A number of developers are nodes\u2009\u2014\u2009consumers of that hub\u2009\u2014\u2009and synchronize with that centralized location.</p> <p></p> <p>Figure 53. Centralized workflow</p> <p>This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems. The second developer must merge in the first one\u2019s work before pushing changes up, so as not to overwrite the first developer\u2019s changes. This concept is as true in Git as it is in Subversion (or any CVCS), and this model works perfectly well in Git.</p> <p>If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git. Simply set up a single repository, and give everyone on your team push access; Git won\u2019t let users overwrite each other.</p> <p>Say John and Jessica both start working at the same time. John finishes his change and pushes it to the server. Then Jessica tries to push her changes, but the server rejects them. She is told that she\u2019s trying to push non-fast-forward changes and that she won\u2019t be able to do so until she fetches and merges. This workflow is attractive to a lot of people because it\u2019s a paradigm that many are familiar and comfortable with.</p> <p>This is also not limited to small teams. With Git\u2019s branching model, it\u2019s possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.</p>"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/#integration-manager-workflow","title":"Integration-Manager Workflow","text":"<p>Because Git allows you to have multiple remote repositories, it\u2019s possible to have a workflow where each developer has write access to their own public repository and read access to everyone else\u2019s. This scenario often includes a canonical repository that represents the \u201cofficial\u201d project. To contribute to that project, you create your own public clone of the project and push your changes to it. Then, you can send a request to the maintainer of the main project to pull in your changes. The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository. The process works as follows (see\u00a0Integration-manager workflow):</p> <ol> <li>The project maintainer pushes to their public repository.</li> <li>A contributor clones that repository and makes changes.</li> <li>The contributor pushes to their own public copy.</li> <li>The contributor sends the maintainer an email asking them to pull changes.</li> <li>The maintainer adds the contributor\u2019s repository as a remote and merges locally.</li> <li>The maintainer pushes merged changes to the main repository.</li> </ol> <p></p> <p>Figure 54. Integration-manager workflow</p> <p>This is a very common workflow with hub-based tools like GitHub or GitLab, where it\u2019s easy to fork a project and push your changes into your fork for everyone to see. One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time. Contributors don\u2019t have to wait for the project to incorporate their changes\u2009\u2014\u2009each party can work at their own pace.</p>"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/#dictator-and-lieutenants-workflow","title":"Dictator and Lieutenants Workflow","text":"<p>This is a variant of a multiple-repository workflow. It\u2019s generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel. Various integration managers are in charge of certain parts of the repository; they\u2019re called\u00a0lieutenants. All the lieutenants have one integration manager known as the benevolent dictator. The benevolent dictator pushes from their directory to a reference repository from which all the collaborators need to pull. The process works like this (see\u00a0Benevolent dictator workflow):</p> <ol> <li>Regular developers work on their topic branch and rebase their work on top of\u00a0<code>master</code>. The\u00a0<code>master</code>\u00a0branch is that of the reference repository to which the dictator pushes.</li> <li>Lieutenants merge the developers' topic branches into their\u00a0<code>master</code>\u00a0branch.</li> <li>The dictator merges the lieutenants'\u00a0<code>master</code>\u00a0branches into the dictator\u2019s\u00a0<code>master</code>\u00a0branch.</li> <li>Finally, the dictator pushes that\u00a0<code>master</code>\u00a0branch to the reference repository so the other developers can rebase on it.</li> </ol> <p></p> <p>Figure 55. Benevolent dictator workflow</p> <p>This kind of workflow isn\u2019t common, but can be useful in very big projects, or in highly hierarchical environments. It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.</p>"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/#patterns-for-managing-source-code-branches","title":"Patterns for Managing Source Code Branches","text":"Note Martin Fowler has made a guide \"Patterns for Managing Source Code Branches\". This guide covers all the common Git workflows, and explains how/when to use them. There\u2019s also a section comparing high and low integration frequencies.https://martinfowler.com/articles/branching-patterns.html"},{"location":"Code/How_to_Git_Branch/7_Distributed_Workflows/#workflows-summary","title":"Workflows Summary","text":"<p>These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow. Now that you can (hopefully) determine which workflow combination may work for you, we\u2019ll cover some more specific examples of how to accomplish the main roles that make up the different flows. In the next section, you\u2019ll learn about a few common patterns for contributing to a project.</p>"},{"location":"Code/How_to_Git_Branch/8_Stashing_and_Cleaning/","title":"8 Stashing and Cleaning","text":"<p>Often, when you\u2019ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else. The problem is, you don\u2019t want to do a commit of half-done work just so you can get back to this point later. The answer to this issue is the\u00a0<code>git stash</code>\u00a0command.</p> <p>Stashing takes the dirty state of your working directory\u2009\u2014\u2009that is, your modified tracked files and staged changes\u2009\u2014\u2009and saves it on a stack of unfinished changes that you can reapply at any time (even on a different branch).</p> Note Migrating to\u00a0<code>git stash push</code>As of late October 2017, there has been extensive discussion on the Git mailing list, wherein the command\u00a0<code>git stash save</code>\u00a0is being deprecated in favour of the existing alternative\u00a0<code>git stash push</code>. The main reason for this is that\u00a0<code>git stash push</code>\u00a0introduces the option of stashing selected\u00a0pathspecs, something\u00a0<code>git stash save</code>\u00a0does not support.<code>git stash save</code>\u00a0is not going away any time soon, so don\u2019t worry about it suddenly disappearing. But you might want to start migrating over to the\u00a0<code>push</code>\u00a0alternative for the new functionality."},{"location":"Code/How_to_Git_Branch/8_Stashing_and_Cleaning/#stashing-your-work","title":"Stashing Your Work","text":"<p>To demonstrate stashing, you\u2019ll go into your project and start working on a couple of files and possibly stage one of the changes. If you run\u00a0<code>git status</code>, you can see your dirty state:</p> <pre><code>$ git status\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   index.html\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   lib/simplegit.rb\n</code></pre> <p>Now you want to switch branches, but you don\u2019t want to commit what you\u2019ve been working on yet, so you\u2019ll stash the changes. To push a new stash onto your stack, run\u00a0<code>git stash</code>\u00a0or\u00a0<code>git stash push</code>:</p> <pre><code>$ git stash\nSaved working directory and index state \\\n  \"WIP on master: 049d078 Create index file\"\nHEAD is now at 049d078 Create index file\n(To restore them type \"git stash apply\")\n</code></pre> <p>You can now see that your working directory is clean:</p> <pre><code>$ git status\n# On branch master\nnothing to commit, working directory clean\n</code></pre> <p>At this point, you can switch branches and do work elsewhere; your changes are stored on your stack. To see which stashes you\u2019ve stored, you can use\u00a0<code>git stash list</code>:</p> <pre><code>$ git stash list\nstash@{0}: WIP on master: 049d078 Create index file\nstash@{1}: WIP on master: c264051 Revert \"Add file_size\"\nstash@{2}: WIP on master: 21d80a5 Add number to log\n</code></pre> <p>In this case, two stashes were saved previously, so you have access to three different stashed works. You can reapply the one you just stashed by using the command shown in the help output of the original stash command:\u00a0<code>git stash apply</code>. If you want to apply one of the older stashes, you can specify it by naming it, like this:\u00a0<code>git stash apply stash@{2}</code>. If you don\u2019t specify a stash, Git assumes the most recent stash and tries to apply it:</p> <pre><code>$ git stash apply\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   index.html\n    modified:   lib/simplegit.rb\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>You can see that Git re-modifies the files you reverted when you saved the stash. In this case, you had a clean working directory when you tried to apply the stash, and you tried to apply it on the same branch you saved it from. Having a clean working directory and applying it on the same branch aren\u2019t necessary to successfully apply a stash. You can save a stash on one branch, switch to another branch later, and try to reapply the changes. You can also have modified and uncommitted files in your working directory when you apply a stash\u2009\u2014\u2009Git gives you merge conflicts if anything no longer applies cleanly.</p> <p>The changes to your files were reapplied, but the file you staged before wasn\u2019t restaged. To do that, you must run the\u00a0<code>git stash apply</code>\u00a0command with a\u00a0<code>--index</code>\u00a0option to tell the command to try to reapply the staged changes. If you had run that instead, you\u2019d have gotten back to your original position:</p> <pre><code>$ git stash apply --index\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   index.html\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   lib/simplegit.rb\n</code></pre> <p>The\u00a0<code>apply</code>\u00a0option only tries to apply the stashed work\u2009\u2014\u2009you continue to have it on your stack. To remove it, you can run\u00a0<code>git stash drop</code>\u00a0with the name of the stash to remove:</p> <pre><code>$ git stash list\nstash@{0}: WIP on master: 049d078 Create index file\nstash@{1}: WIP on master: c264051 Revert \"Add file_size\"\nstash@{2}: WIP on master: 21d80a5 Add number to log\n$ git stash drop stash@{0}\nDropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)\n</code></pre> <p>You can also run\u00a0<code>git stash pop</code>\u00a0to apply the stash and then immediately drop it from your stack.</p>"},{"location":"Code/How_to_Git_Branch/8_Stashing_and_Cleaning/#creative-stashing","title":"Creative Stashing","text":"<p>There are a few stash variants that may also be helpful. The first option that is quite popular is the\u00a0<code>--keep-index</code>\u00a0option to the\u00a0<code>git stash</code>\u00a0command. This tells Git to not only include all staged content in the stash being created, but simultaneously leave it in the index.</p> <pre><code>$ git status -s\nM  index.html\n M lib/simplegit.rb\n\n$ git stash --keep-index\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n$ git status -s\nM  index.html\n</code></pre> <p>Another common thing you may want to do with stash is to stash the untracked files as well as the tracked ones. By default,\u00a0<code>git stash</code>\u00a0will stash only modified and staged\u00a0tracked\u00a0files. If you specify\u00a0<code>--include-untracked</code>\u00a0or\u00a0<code>-u</code>, Git will include untracked files in the stash being created. However, including untracked files in the stash will still not include explicitly\u00a0ignored\u00a0files; to additionally include ignored files, use\u00a0<code>--all</code>\u00a0(or just\u00a0<code>-a</code>).</p> <pre><code>$ git status -s\nM  index.html\n M lib/simplegit.rb\n?? new-file.txt\n\n$ git stash -u\nSaved working directory and index state WIP on master: 1b65b17 added the index file\nHEAD is now at 1b65b17 added the index file\n\n$ git status -s\n$\n</code></pre> <p>Finally, if you specify the\u00a0<code>--patch</code>\u00a0flag, Git will not stash everything that is modified but will instead prompt you interactively which of the changes you would like to stash and which you would like to keep in your working directory.</p> <pre><code>$ git stash --patch\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex 66d332e..8bb5674 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -16,6 +16,10 @@ class SimpleGit\n         return `#{git_cmd} 2&gt;&amp;1`.chomp\n       end\n     end\n+\n+    def show(treeish = 'master')\n+      command(\"git show #{treeish}\")\n+    end\n\n end\n test\nStash this hunk [y,n,q,a,d,/,e,?]? y\n\nSaved working directory and index state WIP on master: 1b65b17 added the index file\n</code></pre>"},{"location":"Code/How_to_Git_Branch/8_Stashing_and_Cleaning/#creating-a-branch-from-a-stash","title":"Creating a Branch from a Stash","text":"<p>If you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work. If the apply tries to modify a file that you\u2019ve since modified, you\u2019ll get a merge conflict and will have to try to resolve it. If you want an easier way to test the stashed changes again, you can run\u00a0<code>git stash branch &lt;new branchname&gt;</code>, which creates a new branch for you with your selected branch name, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully:</p> <pre><code>$ git stash branch testchanges\nM   index.html\nM   lib/simplegit.rb\nSwitched to a new branch 'testchanges'\nOn branch testchanges\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   index.html\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   lib/simplegit.rb\n\nDropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)\n</code></pre> <p>This is a nice shortcut to recover stashed work easily and work on it in a new branch.</p>"},{"location":"Code/How_to_Git_Branch/8_Stashing_and_Cleaning/#cleaning-your-working-directory","title":"Cleaning your Working Directory","text":"<p>Finally, you may not want to stash some work or files in your working directory, but simply get rid of them; that\u2019s what the\u00a0<code>git clean</code>\u00a0command is for.</p> <p>Some common reasons for cleaning your working directory might be to remove cruft that has been generated by merges or external tools or to remove build artifacts in order to run a clean build.</p> <p>You\u2019ll want to be pretty careful with this command, since it\u2019s designed to remove files from your working directory that are not tracked. If you change your mind, there is often no retrieving the content of those files. A safer option is to run\u00a0<code>git stash --all</code>\u00a0to remove everything but save it in a stash.</p> <p>Assuming you do want to remove cruft files or clean your working directory, you can do so with\u00a0<code>git clean</code>. To remove all the untracked files in your working directory, you can run\u00a0<code>git clean -f -d</code>, which removes any files and also any subdirectories that become empty as a result. The\u00a0<code>-f</code>\u00a0means 'force' or \u201creally do this,\u201d and is required if the Git configuration variable\u00a0<code>clean.requireForce</code>\u00a0is not explicitly set to false.</p> <p>If you ever want to see what it would do, you can run the command with the\u00a0<code>--dry-run</code>\u00a0(or\u00a0<code>-n</code>) option, which means \u201cdo a dry run and tell me what you\u00a0would\u00a0have removed\u201d.</p> <pre><code>$ git clean -d -n\nWould remove test.o\nWould remove tmp/\n</code></pre> <p>By default, the\u00a0<code>git clean</code>\u00a0command will only remove untracked files that are not ignored. Any file that matches a pattern in your\u00a0<code>.gitignore</code>\u00a0or other ignore files will not be removed. If you want to remove those files too, such as to remove all\u00a0<code>.o</code>\u00a0files generated from a build so you can do a fully clean build, you can add a\u00a0<code>-x</code>\u00a0to the\u00a0<code>clean</code>\u00a0command.</p> <pre><code>$ git status -s\n M lib/simplegit.rb\n?? build.TMP\n?? tmp/\n\n$ git clean -n -d\nWould remove build.TMP\nWould remove tmp/\n\n$ git clean -n -d -x\nWould remove build.TMP\nWould remove test.o\nWould remove tmp/\n</code></pre> <p>If you don\u2019t know what the\u00a0<code>git clean</code>\u00a0command is going to do, always run it with a\u00a0<code>-n</code>\u00a0first to double check before changing the\u00a0<code>-n</code>\u00a0to a\u00a0<code>-f</code>\u00a0and doing it for real. The other way you can be careful about the process is to run it with the\u00a0<code>-i</code>\u00a0or \u201cinteractive\u201d flag.</p> <p>This will run the\u00a0<code>clean</code>\u00a0command in an interactive mode.</p> <pre><code>$ git clean -x -i\nWould remove the following items:\n  build.TMP  test.o\n*** Commands ***\n    1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit\n    6: help\nWhat now&gt;\n</code></pre> <p>This way you can step through each file individually or specify patterns for deletion interactively.</p> Note There is a quirky situation where you might need to be extra forceful in asking Git to clean your working directory. If you happen to be in a working directory under which you\u2019ve copied or cloned other Git repositories (perhaps as submodules), even\u00a0<code>git clean -fd</code>\u00a0will refuse to delete those directories. In cases like that, you need to add a second\u00a0<code>-f</code>\u00a0option for emphasis."},{"location":"Code/How_to_Git_Branch/Cheatsheet/","title":"Cheatsheet","text":""},{"location":"Code/How_to_Git_Branch/Cheatsheet/#cloning-pulling-and-pushing","title":"Cloning, pulling, and pushing\u200b","text":"Git Clone <code>git clone http://github.com/foo my_repo</code> Pull <code>git fetch</code> Pull a branch <code>git fetch origin REFSPEC</code> Pull and rebase <code>git pull --rebase</code> Push to a branch <code>git push HEAD:BRANCH</code> Add a remote <code>git remote add REMOTE URL</code> Pull from a remote <code>git fetch REMOTE</code> <p>Sapling\u00a0only\u00a0clones and pulls a subset of remote branches.</p>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#understanding-the-repository","title":"Understanding the repository\u200b","text":"Git Your commits N/A Current history <code>git log</code> Edited files <code>git status</code> Current hash <code>git rev-parse HEAD</code> Pending changes <code>git diff</code> Current commit <code>git show</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#referring-to-commits","title":"Referring to commits\u200b","text":"Git Current commit <code>HEAD</code> Parent commit <code>HEAD^</code> All local commits <code>N/A</code> Commits in branch X but not Y <code>Y..X</code> <p>See\u00a0<code>sl help revset</code>\u00a0for more ways of referencing commits.</p>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#working-with-files","title":"Working with files\u200b","text":"Git Add new file <code>git add FILE</code> Un-add new File <code>git rm --cached FILE</code> Remove file <code>git rm FILE</code> Rename file <code>git mv OLD NEW</code> Copy file <code>cp OLD NEW</code> Add/remove all files <code>git add -A .</code> Undo changes <code>git checkout -- FILE</code> Undo all changes <code>git reset --hard</code> Delete untracked files <code>git clean -f</code> Output file content <code>git cat-file -p COMMIT:FILE</code> Show blame <code>git blame FILE</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#working-with-commits","title":"Working with commits\u200b","text":"Git Commit changes <code>git commit -a</code> Modify commit <code>git commit -a --amend</code> Move to commit <code>git checkout COMMIT</code> Remove current commit <code>git reset --hard HEAD</code>^ Edit message <code>git commit --amend</code> Rebase commits <code>git rebase main</code> Complex rebase <code>git rebase --onto DEST BOTTOM^ TOP</code> Rebase all N/A Interactive rebase <code>git rebase -i</code> Interactive commit <code>git add -p</code> Cherry-pick <code>git cherry-pick COMMIT</code> Stash changes <code>git stash</code> Unstash changes <code>git stash pop</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#undo-redo-and-reverting","title":"Undo, redo, and reverting\u200b","text":"Git Undo commit <code>git reset --soft HEAD^</code> Undo partial commit <code>git reset --soft HEAD^ FILE</code> Undo amend <code>git reset HEAD@{1}</code> Undo rebase/etc <code>git reset --hard HEAD@{1}</code> Revert already landed commit <code>git revert COMMIT</code> View recent commits <code>git reflog</code> Recover commit <code>git reset COMMIT</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#working-with-stacks","title":"Working with stacks\u200b","text":"Git Modify middle commit <code>git rebase -i</code> Move up/down the stack <code>git rebase -i</code> Squash last two commits <code>git reset --soft HEAD^ &amp;&amp; git commit --amend</code> Split a commit into two <code>N/A</code> Reorder commits <code>git rebase -i</code> Amend down into stack <code>N/A</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#giving-commits-names","title":"Giving commits names\u200b","text":"Git Listing branches <code>git branch</code> Create branch/bookmark <code>git branch NAME</code> Switch to branch <code>git checkout NAME</code> Delete a branch <code>git branch -d NAME</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet/#resolving-conflicts","title":"Resolving conflicts\u200b","text":"Git List unresolved conflicts <code>git diff --name-only --diff-filter=U</code> Mark a file resolved <code>git add FILE</code>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/","title":"Cheatsheet 2","text":""},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#creating-repositories","title":"Creating Repositories","text":"<pre><code># create new repository in current directory\ngit init\n\n# clone a remote repository\ngit clone [url]\n# for example cloning the entire jquery repo locally\ngit clone https://github.com/jquery/jquery\n</code></pre>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#branches-and-tags","title":"Branches and Tags","text":"<pre><code># List all existing branches with the latest commit comment \ngit branch \u2013av\n\n# Switch your HEAD to branch\ngit checkout [branch]\n\n# Create a new branch based on your current HEAD\ngit branch [new-branch]\n\n# Create a new tracking branch based on a remote branch\ngit checkout --track [remote/branch]\n# for example track the remote branch named feature-branch-foo\ngit checkout --track origin/feature-branch-foo\n\n# Delete a local branch\ngit branch -d [branch]\n\n# Tag the current commit\ngit tag [tag-name]\n</code></pre>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#local-changes","title":"Local Changes","text":"<pre><code># List all new or modified files - showing which are to staged to be commited and which are not \ngit status\n\n# View changes between staged files and unstaged changes in files\ngit diff\n\n# View changes between staged files and the latest committed version\ngit diff --cached\n# only one file add the file name\ngit diff --cached [file]\n\n# Add all current changes to the next commit\ngit add [file]\n\n# Remove a file from the next commit\ngit rm [file]\n\n# Add some changes in &lt; file&gt; to the next commit\n# Watch these video's for a demo of the power of git add -p - http://johnkary.net/blog/git-add-p-the-most-powerful-git-feature-youre-not-using-yet/\ngit add -p [file]\n\n# Commit all local changes in tracked  files\ngit commit \u2013a\ngit commit -am \"An inline  commit message\"\n\n# Commit previously staged changes\ngit commit\ngit commit -m \"An inline commit message\"\n\n# Unstages the file, but preserve its contents\n\ngit reset [file]\n</code></pre>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#commit-history","title":"Commit History","text":"<pre><code># Show all commits, starting from the latest \ngit log \n\n# Show changes over time for a specific file \ngit log -p [file]\n\n# Show who changed each line in a file, when it was changed and the commit id\ngit blame -c [file]\n</code></pre>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#update-and-publish","title":"Update and Publish","text":"<pre><code># List all remotes \ngit remote -v\n\n# Add a new remote at [url] with the given local name\ngit remote add [localname] [url]\n\n# Download all changes from a remote, but don\u2018t integrate into them locally\ngit fetch [remote]\n\n# Download all remote changes and merge them locally\ngit pull [remote] [branch]\n\n# Publish local changes to a remote \ngit push [remote] [branch]\n\n# Delete a branch on the remote \ngit branch -dr [remote/branch]\n\n# Publish your tags to a remote\ngit push --tags\n</code></pre>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#merge-rebase","title":"Merge &amp; Rebase","text":"<pre><code># Merge [branch] into your current HEAD \ngit merge [branch]\n\n# Rebase your current HEAD onto [branch]\ngit rebase [branch]\n\n# Abort a rebase \ngit rebase \u2013abort\n\n# Continue a rebase after resolving conflicts \ngit rebase \u2013continue\n\n# Use your configured merge tool to solve conflicts \ngit mergetool\n\n# Use your editor to manually solve conflicts and (after resolving) mark as resolved \ngit add &lt;resolved- file&gt;\ngit rm &lt;resolved- file&gt;\n</code></pre>"},{"location":"Code/How_to_Git_Branch/Cheatsheet_2/#undo","title":"Undo","text":"<pre><code># Discard all local changes and start working on the current branch from the last commit\ngit reset --hard HEAD\n\n# Discard local changes to a specific file \ngit checkout HEAD [file]\n\n# Revert a commit by making a new commit which reverses the given [commit]\ngit revert [commit]\n\n# Reset your current branch to a previous commit and discard all changes since then \ngit reset --hard [commit]\n\n# Reset your current branch to a previous commit and preserve all changes as unstaged changes \ngit reset [commit]\n\n#  Reset your current branch to a previous commit and preserve staged local changes \ngit reset --keep [commit]\n</code></pre>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/","title":"1 GraphQL vs REST","text":""},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#data-fetching-with-rest-vs-graphql","title":"Data Fetching with REST vs GraphQL","text":"<p>With a REST API, you would typically gather the data by accessing multiple endpoints. In the example, these could be\u00a0<code>/users/&lt;id&gt;</code>\u00a0endpoint to fetch the initial user data. Secondly, there\u2019s likely to be a\u00a0<code>/users/&lt;id&gt;/posts</code>\u00a0endpoint that returns all the posts for a user. The third endpoint will then be the\u00a0<code>/users/&lt;id&gt;/followers</code>\u00a0that returns a list of followers per user.</p> <p></p> <p>With REST, you have to make three requests to different endpoints to fetch the required data. You\u2019re also\u00a0_overfetching\u00a0since the endpoints return additional information that\u2019s not needed._</p> <p>In GraphQL on the other hand, you\u2019d simply send a single query to the GraphQL server that includes the concrete data requirements. The server then responds with a JSON object where these requirements are fulfilled.</p> <p></p> <p>Using GraphQL, the client can specify exactly the data it needs in a\u00a0_query. Notice that the\u00a0structure\u00a0of the server\u2019s response follows precisely the nested structure defined in the query._</p>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#no-more-over-and-underfetching","title":"No more Over- and Underfetching","text":"<p>One of the most common problems with REST is that of over- and underfetching. This happens because the only way for a client to download data is by hitting endpoints that return\u00a0fixed\u00a0data structures. It\u2019s very difficult to design the API in a way that it\u2019s able to provide clients with their exact data needs.</p> <p>\u201cThink in graphs, not endpoints.\u201d\u00a0Lessons From 4 Years of GraphQL\u00a0by\u00a0Lee Byron, GraphQL Co-Inventor.</p>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#overfetching-downloading-superfluous-data","title":"Overfetching: Downloading superfluous data","text":"<p>Overfetching\u00a0means that a client downloads more information than is actually required in the app. Imagine for example a screen that needs to display a list of users only with their names. In a REST API, this app would usually hit the\u00a0<code>/users</code>\u00a0endpoint and receive a JSON array with user data. This response however might contain more info about the users that are returned, e.g. their birthdays or addresses - information that is useless for the client because it only needs to display the users\u2019 names.</p>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#underfetching-and-the-n1-problem","title":"Underfetching and the n+1 problem","text":"<p>Another issue is\u00a0underfetching\u00a0and the\u00a0n+1-requests problem. Underfetching generally means that a specific endpoint doesn\u2019t provide enough of the required information. The client will have to make additional requests to fetch everything it needs. This can escalate to a situation where a client needs to first download a list of elements, but then needs to make one additional request per element to fetch the required data.</p> <p>As an example, consider the same app would also need to display the last three followers per user. The API provides the additional endpoint\u00a0<code>/users/&lt;user-id&gt;/followers</code>. In order to be able to display the required information, the app will have to make one request to the\u00a0<code>/users</code>\u00a0endpoint and then hit the\u00a0<code>/users/&lt;user-id&gt;/followers</code>\u00a0endpoint for\u00a0each\u00a0user.</p>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#rapid-product-iterations-on-the-frontend","title":"Rapid Product Iterations on the Frontend","text":"<p>A common pattern with REST APIs is to structure the endpoints according to the views that you have inside your app. This is handy since it allows for the client to get all required information for a particular view by simply accessing the corresponding endpoint.</p> <p>The major drawback of this approach is that it doesn\u2019t allow for rapid iterations on the frontend. With every change that is made to the UI, there is a high risk that now there is more (or less) data required than before. Consequently, the backend needs to be adjusted as well to account for the new data needs. This kills productivity and notably slows down the ability to incorporate user feedback into a product.</p> <p>With GraphQL, this problem is solved. Thanks to the flexible nature of GraphQL, changes on the client-side can be made without any extra work on the server. Since clients can specify their exact data requirements, no backend engineer needs to make adjustments when the design and data needs on the frontend change.</p>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#insightful-analytics-on-the-backend","title":"Insightful Analytics on the Backend","text":"<p>GraphQL allows you to have fine-grained insights about the data that\u2019s requested on the backend. As each client specifies exactly what information it\u2019s interested in, it is possible to gain a deep understanding of how the available data is being used. This can for example help in evolving an API and deprecating specific fields that are not requested by any clients any more.</p> <p>With GraphQL, you can also do low-level performance monitoring of the requests that are processed by your server. GraphQL uses the concept of\u00a0resolver functions\u00a0to collect the data that\u2019s requested by a client. Instrumenting and measuring performance of these resolvers provides crucial insights about bottlenecks in your system.</p>"},{"location":"Code/How_to_GraphQL/1_GraphQL_vs_REST/#benefits-of-a-schema-type-system","title":"Benefits of a Schema &amp; Type System","text":"<p>GraphQL uses a strong type system to define the capabilities of an API. All the types that are exposed in an API are written down in a\u00a0schema\u00a0using the GraphQL Schema Definition Language (SDL). This schema serves as the contract between the client and the server to define how a client can access the data.</p> <p>Once the schema is defined, the teams working on frontend and backends can do their work without further communication since they both are aware of the definite structure of the data that\u2019s sent over the network.</p> <p>Frontend teams can easily test their applications by mocking the required data structures. Once the server is ready, the switch can be flipped for the client apps to load the data from the actual API.</p>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/","title":"2 Core Concepts","text":""},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#the-schema-definition-language-sdl","title":"The Schema Definition Language (SDL)","text":"<p>GraphQL has its own type system that\u2019s used to define the\u00a0schema\u00a0of an API. The syntax for writing schemas is called\u00a0Schema Definition Language\u00a0(SDL).</p> <p>Here is an example of how we can use the SDL to define a simple type called\u00a0<code>Person</code>:</p> <pre><code>type Person {\n  name: String!\n  age: Int!\n}\n</code></pre> <p>This type has two\u00a0fields, they\u2019re called\u00a0<code>name</code>\u00a0and\u00a0<code>age</code>\u00a0and are respectively of type\u00a0<code>String</code>\u00a0and\u00a0<code>Int</code>. The\u00a0<code>!</code>\u00a0following the type means that this field is\u00a0required.</p> <p>It\u2019s also possible to express relationships between types. In the example of a\u00a0blogging\u00a0application, a\u00a0<code>Person</code>\u00a0could be associated with a\u00a0<code>Post</code>:</p> <pre><code>type Post {\n  title: String!\n  author: Person!\n}\n</code></pre> <p>Conversely, the other end of the relationship needs to be placed on the\u00a0<code>Person</code>\u00a0type:</p> <pre><code>type Person {\n  name: String!\n  age: Int!\n  posts: [Post!]!\n}\n</code></pre> <p>Note that we just created a\u00a0one-to-many-relationship between\u00a0<code>Person</code>\u00a0and\u00a0<code>Post</code>\u00a0since the\u00a0<code>posts</code>\u00a0field on\u00a0<code>Person</code>\u00a0is actually an\u00a0array\u00a0of posts.</p>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#fetching-data-with-queries","title":"Fetching Data with Queries","text":"<p>When working with REST APIs, data is loaded from specific endpoints. Each endpoint has a clearly defined structure of the information that it returns. This means that the data requirements of a client are effectively\u00a0encoded\u00a0in the URL that it connects to.</p> <p>The approach that\u2019s taken in GraphQL is radically different. Instead of having multiple endpoints that return fixed data structures, GraphQL APIs typically only expose\u00a0a single endpoint. This works because the structure of the data that\u2019s returned is not fixed. Instead, it\u2019s completely flexible and lets the client decide what data is actually needed.</p> <p>That means that the client needs to send more\u00a0information\u00a0to the server to express its data needs - this information is called a\u00a0query.</p> <p>Note: Unfortunately, we no longer provide the\u00a0Run in Sandbox\u00a0feature that is demonstrated in the video at 13:50. We are really sorry for the inconvenience.</p>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#basic-queries","title":"Basic Queries","text":"<p>Let\u2019s take a look at an example query that a client could send to a server:</p> <pre><code>{\n  allPersons {\n    name\n  }\n}\n</code></pre> <p>The\u00a0<code>allPersons</code>\u00a0field in this query is called the\u00a0root field\u00a0of the query. Everything that follows the root field, is called the\u00a0payload\u00a0of the query. The only field that\u2019s specified in this query\u2019s payload is\u00a0<code>name</code>.</p> <p>This query would return a list of all persons currently stored in the database. Here\u2019s an example response:</p> <pre><code>{\n  \"allPersons\": [\n    { \"name\": \"Johnny\" },\n    { \"name\": \"Sarah\" },\n    { \"name\": \"Alice\" }\n  ]\n}\n</code></pre> <p>Notice that each person only has the\u00a0<code>name</code>\u00a0in the response, but the\u00a0<code>age</code>\u00a0is not returned by the server. That\u2019s exactly because\u00a0<code>name</code>\u00a0was the only field that was specified in the query.</p> <p>If the client also needed the persons\u2019\u00a0<code>age</code>, all it has to do is slightly adjust the query and include the new field in the query\u2019s payload:</p> <pre><code>{\n  allPersons {\n    name\n    age\n  }\n}\n</code></pre> <p>One of the major advantages of GraphQL is that it allows for naturally querying\u00a0nested\u00a0information. For example, if you wanted to load all the\u00a0<code>posts</code>\u00a0that a\u00a0<code>Person</code>\u00a0has written, you could simply follow the structure of your types to request this information:</p> <pre><code>{\n  allPersons {\n    name\n    age\n    posts {\n      title\n    }\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#queries-with-arguments","title":"Queries with Arguments","text":"<p>In GraphQL, each\u00a0field\u00a0can have zero or more arguments if that\u2019s specified in the\u00a0schema. For example, the\u00a0<code>allPersons</code>\u00a0field could have a\u00a0<code>last</code>\u00a0parameter to only return up to a specific number of persons. Here\u2019s what a corresponding query would look like:</p> <pre><code>{\n  allPersons(last: 2) {\n    name\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#writing-data-with-mutations","title":"Writing Data with Mutations","text":"<p>Next to requesting information from a server, the majority of applications also need some way of making changes to the data that\u2019s currently stored in the backend. With GraphQL, these changes are made using so-called\u00a0mutations. There generally are three kinds of mutations:</p> <ul> <li>creating new data</li> <li>updating existing data</li> <li>deleting existing data</li> </ul> <p>Mutations follow the same syntactical structure as queries, but they always need to start with the\u00a0<code>mutation</code>\u00a0keyword. Here\u2019s an example for how we might create a new\u00a0<code>Person</code>:</p> <pre><code>mutation {\n  createPerson(name: \"Bob\", age: 36) {\n    name\n    age\n  }\n}\n</code></pre> <p>Notice that similar to the query we wrote before, the mutation also has a\u00a0root field\u00a0- in this case it\u2019s called\u00a0<code>createPerson</code>. We also already learned about the concepts of arguments for fields. In this case, the\u00a0<code>createPerson</code>\u00a0field takes two arguments that specify the new person\u2019s\u00a0<code>name</code>\u00a0and\u00a0<code>age</code>.</p> <p>Like with a query, we\u2019re also able to specify a payload for a mutation in which we can ask for different properties of the new\u00a0<code>Person</code>\u00a0object. In our case, we\u2019re asking for the\u00a0<code>name</code>\u00a0and the\u00a0<code>age</code>\u00a0- though admittedly that\u2019s not super helpful in our example since we obviously already know them as we pass them into the mutation. However, being able to also query information when sending mutations can be a very powerful tool that allows you to retrieve new information from the server in a single roundtrip!</p> <p>The server response for the above mutation would look as follows:</p> <pre><code>\"createPerson\": {\n  \"name\": \"Bob\",\n  \"age\": 36,\n}\n</code></pre> <p>One pattern you\u2019ll often find is that GraphQL types have unique\u00a0IDs\u00a0that are generated by the server when new objects are created. Extending our\u00a0<code>Person</code>\u00a0type from before, we could add an\u00a0<code>id</code>\u00a0like this:</p> <pre><code>type Person {\n  id: ID!\n  name: String!\n  age: Int!\n}\n</code></pre> <p>Now, when a new\u00a0<code>Person</code>\u00a0is created, you could directly ask for the\u00a0<code>id</code>\u00a0in the payload of the mutation, since that is information that wasn\u2019t available on the client beforehand:</p> <pre><code>mutation {\n  createPerson(name: \"Alice\", age: 36) {\n    id\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#realtime-updates-with-subscriptions","title":"Realtime Updates with Subscriptions","text":"<p>Another important requirement for many applications today is to have a\u00a0realtime\u00a0connection to the server in order to get immediately informed about important events. For this use case, GraphQL offers the concept of\u00a0subscriptions.</p> <p>When a client\u00a0subscribes\u00a0to an event, it will initiate and hold a steady connection to the server. Whenever that particular event then actually happens, the server pushes the corresponding data to the client. Unlike queries and mutations that follow a typical \u201crequest-response-cycle\u201d, subscriptions represent a\u00a0stream\u00a0of data sent over to the client.</p> <p>Subscriptions are written using the same syntax as queries and mutations. Here\u2019s an example where we subscribe on events happening on the\u00a0<code>Person</code>\u00a0type:</p> <pre><code>subscription {\n  newPerson {\n    name\n    age\n  }\n}\n</code></pre> <p>After a client sent this subscription to a server, a connection is opened between them. Then, whenever a new mutation is performed that creates a new\u00a0<code>Person</code>, the server sends the information about this person over to the client:</p> <pre><code>{\n  \"newPerson\": {\n    \"name\": \"Jane\",\n    \"age\": 23\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#defining-a-schema","title":"Defining a Schema","text":"<p>Now that you have a basic understanding of what queries, mutations, and subscriptions look like, let\u2019s put it all together and learn how you can write a schema that would allow you to execute the examples you\u2019ve seen so far.</p> <p>The\u00a0schema\u00a0is one of the most important concepts when working with a GraphQL API. It specifies the capabilities of the API and defines how clients can request the data. It is often seen as a\u00a0contract\u00a0between the server and client.</p> <p>Generally, a schema is simply a collection of GraphQL types. However, when writing the schema for an API, there are some special\u00a0root\u00a0types:</p> <pre><code>type Query { ... }\ntype Mutation { ... }\ntype Subscription { ... }\n</code></pre> <p>The\u00a0<code>Query</code>,\u00a0<code>Mutation</code>, and\u00a0<code>Subscription</code>\u00a0types are the\u00a0entry points\u00a0for the requests sent by the client. To enable the\u00a0<code>allPersons</code>-query that we saw before, the\u00a0<code>Query</code>\u00a0type would have to be written as follows:</p> <pre><code>type Query {\n  allPersons: [Person!]!\n}\n</code></pre> <p><code>allPersons</code>\u00a0is called a\u00a0root field\u00a0of the API. Considering again the example where we added the\u00a0<code>last</code>\u00a0argument to the\u00a0<code>allPersons</code>\u00a0field, we\u2019d have to write the\u00a0<code>Query</code>\u00a0as follows:</p> <pre><code>type Query {\n  allPersons(last: Int): [Person!]!\n}\n</code></pre> <p>Similarly, for the\u00a0<code>createPerson</code>-mutation, we\u2019ll have to add a root field to the\u00a0<code>Mutation</code>\u00a0type:</p> <pre><code>type Mutation {\n  createPerson(name: String!, age: Int!): Person!\n}\n</code></pre> <p>Notice that this root field takes two arguments as well, the\u00a0<code>name</code>\u00a0and the\u00a0<code>age</code>\u00a0of the new\u00a0<code>Person</code>.</p> <p>Finally, for the subscriptions, we\u2019d have to add the\u00a0<code>newPerson</code>\u00a0root field:</p> <pre><code>type Subscription {\n  newPerson: Person!\n}\n</code></pre> <p>Putting it all together, this is the\u00a0full\u00a0schema for all the queries and mutation that you have seen in this chapter:</p> <pre><code>type Query {\n  allPersons(last: Int): [Person!]!\n  allPosts(last: Int): [Post!]!\n}\n\ntype Mutation {\n  createPerson(name: String!, age: Int!): Person!\n  updatePerson(id: ID!, name: String!, age: Int!): Person!\n  deletePerson(id: ID!): Person!\n}\n\ntype Subscription {\n  newPerson: Person!\n}\n\ntype Person {\n  id: ID!\n  name: String!\n  age: Int!\n  posts: [Post!]!\n}\n\ntype Post {\n  title: String!\n  author: Person!\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/2_Core_Concepts/#learn-more","title":"Learn more","text":"<p>To learn more about the core concepts in GraphQL, be sure to check out the following article series:</p> <ul> <li>GraphQL Server Basics (Part I): GraphQL Schemas, TypeDefs &amp; Resolvers Explained</li> <li>GraphQL Server Basics (Part II): The Network Layer</li> <li>GraphQL Server Basics (Part III): Demystifying the\u00a0<code>info</code>\u00a0argument in GraphQL resolvers</li> </ul>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/","title":"3 More GraphQL Concepts","text":""},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#enhancing-reusability-with-fragments","title":"Enhancing Reusability with Fragments","text":"<p>Fragments\u00a0are a handy feature to help to improve the structure and reusability of your GraphQL code. A fragment is a collection of fields on a specific type.</p> <p>Let\u2019s assume we have the following type:</p> <pre><code>type User {\n  name: String!\n  age: Int!\n  email: String!\n  street: String!\n  zipcode: String!\n  city: String!\n}\n</code></pre> <p>Here, we could represent all the information that relates to the user\u2019s physical address into a fragment:</p> <pre><code>fragment addressDetails on User {\n  name\n  street\n  zipcode\n  city\n}\n</code></pre> <p>Now, when writing a query to access the address information of a user, we can use the following syntax to refer to the fragment and save the work to actually spell out the four fields:</p> <pre><code>{\n  allUsers {\n    ... addressDetails\n  }\n}\n</code></pre> <p>This query is equivalent to writing:</p> <pre><code>{\n  allUsers {\n    name\n    street\n    zipcode\n    city\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#parameterizing-fields-with-arguments","title":"Parameterizing Fields with Arguments","text":"<p>In GraphQL type definitions, each field can take zero or more\u00a0arguments. Similar to arguments that are passed into functions in typed programming languages, each argument needs to have a\u00a0name\u00a0and a\u00a0type. In GraphQL, it\u2019s also possible to specify\u00a0default values\u00a0for arguments.</p> <p>As an example, let\u2019s consider a part of the schema that we saw in the beginning:</p> <pre><code>type Query {\n  allUsers: [User!]!\n}\n\ntype User {\n  name: String!\n  age: Int!\n}\n</code></pre> <p>We could now add an argument to the\u00a0<code>allUsers</code>\u00a0field that allows us to pass an argument to filter users and include only those above a certain age. We also specify a default value so that by default all users will be returned:</p> <pre><code>type Query {\n  allUsers(olderThan: Int = -1): [User!]!\n}\n</code></pre> <p>This\u00a0<code>olderThan</code>\u00a0argument can now be passed into the query using the following syntax:</p> <pre><code>{\n  allUsers(olderThan: 30) {\n    name\n    age\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#named-query-results-with-aliases","title":"Named Query Results with Aliases","text":"<p>One of GraphQL\u2019s major strengths is that it lets you send multiple queries in a single request. However, since the response data is shaped after the structure of the fields being requested, you might run into naming issues when you\u2019re sending multiple queries asking for the same fields:</p> <pre><code>{\n  User(id: \"1\") {\n    name\n  }\n  User(id: \"2\") {\n    name\n  }\n}\n</code></pre> <p>In fact, this will produce an error with a GraphQL server, since it\u2019s the same field but different arguments. The only way to send a query like that would be to use aliases, i.e. specifying names for the query results:</p> <pre><code>{\n  first: User(id: \"1\") {\n    name\n  }\n  second: User(id: \"2\") {\n    name\n  }\n}\n</code></pre> <p>In the result, the server would now name each\u00a0<code>User</code>\u00a0object according to the specified alias:</p> <pre><code>{\n  \"first\": {\n    \"name\": \"Alice\"\n  },\n  \"second\": {\n    \"name\": \"Sarah\"\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#advanced-sdl","title":"Advanced SDL","text":"<p>The SDL offers a couple of language features that weren\u2019t discussed in the previous chapter. In the following, we\u2019ll discuss those by practical examples.</p>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#object-scalar-types","title":"Object &amp; Scalar Types","text":"<p>In GraphQL, there are two different kinds of types.</p> <ul> <li>Scalar\u00a0types represent concrete units of data. The GraphQL spec has five predefined scalars: as\u00a0<code>String</code>,\u00a0<code>Int</code>,\u00a0<code>Float</code>,\u00a0<code>Boolean</code>, and\u00a0<code>ID</code>.</li> <li>Object\u00a0types have\u00a0fields\u00a0that express the properties of that type and are composable. Examples of object types are the\u00a0<code>User</code>\u00a0or\u00a0<code>Post</code>\u00a0types we saw in the previous section.</li> </ul> <p>In every GraphQL schema, you can define your own scalar and object types. An often cited example for a custom scalar would be a\u00a0<code>Date</code>\u00a0type where the implementation needs to define how that type is validated, serialized, and deserialized.</p>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#enums","title":"Enums","text":"<p>GraphQL allows you to define\u00a0enumerations\u00a0types (short\u00a0enums), a language feature to express the semantics of a type that has a fixed set of values. We could thus define a type called\u00a0<code>Weekday</code>\u00a0to represent all the days of a week:</p> <pre><code>enum Weekday {\n  MONDAY\n  TUESDAY\n  WEDNESDAY\n  THURSDAY\n  FRIDAY\n  SATURDAY\n  SUNDAY\n}\n</code></pre> <p>Note that technically enums are special kinds of scalar types.</p>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#interface","title":"Interface","text":"<p>An\u00a0interface\u00a0can be used to describe a type in an abstract way. It allows you to specify a set of fields that any concrete type, which\u00a0implements\u00a0this interface, needs to have. In many GraphQL schemas, every type is required to have an\u00a0<code>id</code>\u00a0field. Using interfaces, this requirement can be expressed by defining an interface with this field and then making sure that all custom types implement it:</p> <pre><code>interface Node {\n  id: ID!\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n  age: Int!\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/3_More_GraphQL_Concepts/#union-types","title":"Union Types","text":"<p>Union types\u00a0can be used to express that a type should be\u00a0either\u00a0of a collection of other types. They are best understood by means of an example. Let\u2019s consider the following types:</p> <pre><code>type Adult {\n  name: String!\n  work: String!\n}\n\ntype Child {\n  name: String!\n  school: String!\n}\n</code></pre> <p>Now, we could define a\u00a0<code>Person</code>\u00a0type to be the\u00a0union\u00a0of\u00a0<code>Adult</code>\u00a0and\u00a0<code>Child</code>:</p> <pre><code>union Person = Adult | Child\n</code></pre> <p>This brings up a different problem: In a GraphQL query where we ask to retrieve information about a\u00a0<code>Child</code>\u00a0but only have a\u00a0<code>Person</code>\u00a0type to work with, how do we know whether we can actually access this field?</p> <p>The answer to this is called\u00a0conditional fragments:</p> <pre><code>{\n  allPersons {\n    name # works for `Adult` and `Child`\n    ... on Child {\n      school\n    }\n    ... on Adult {\n       work\n    }\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/4_Tooling_and_Ecosystem/","title":"4 Tooling and Ecosystem","text":"<p>As you probably realized already, the GraphQL ecosystem is growing at an amazing speed right now. One of the reasons that this is happening is because GraphQL makes it really easy for us to develop great tools. In this section, we will see why this is the case, and a few amazing tools we already have in the ecosystem.</p> <p>If you are familiar with GraphQL basics, you probably know how GraphQL\u2019s Type System allows us to quickly define the surface area of our APIs. It allows developers to clearly define the capabilities of an API, but also to validate incoming queries against a schema.</p> <p>An amazing thing with GraphQL is that these capabilities are not only known to the server. GraphQL allows clients to ask a server for information about its schema. GraphQL calls this\u00a0introspection.</p>"},{"location":"Code/How_to_GraphQL/4_Tooling_and_Ecosystem/#introspection","title":"Introspection","text":"<p>The designers of the schema already know what the schema looks like but how can clients discover what is accessible through a GraphQL API? We can ask GraphQL for this information by querying the\u00a0<code>__schema</code>\u00a0meta-field, which is always available on the root type of a Query per the spec.</p> <pre><code>query {\n  __schema {\n    types {\n      name\n    }\n  }\n}\n</code></pre> <p>Take this schema definition for example:</p> <pre><code>type Query {\n  author(id: ID!): Author\n}\n\ntype Author {\n  posts: [Post!]!\n}\n\ntype Post {\n  title: String!\n}\n</code></pre> <p>If we were to send the introspection query mentioned above, we would get the following result:</p> <pre><code>{\n  \"data\": {\n    \"__schema\": {\n      \"types\": [\n        {\n          \"name\": \"Query\"\n        },\n        {\n          \"name\": \"Author\"\n        },\n        {\n          \"name\": \"Post\"\n        },\n        {\n          \"name\": \"ID\"\n        },\n        {\n          \"name\": \"String\"\n        },\n        {\n          \"name\": \"__Schema\"\n        },\n        {\n          \"name\": \"__Type\"\n        },\n        {\n          \"name\": \"__TypeKind\"\n        },\n        {\n          \"name\": \"__Field\"\n        },\n        {\n          \"name\": \"__InputValue\"\n        },\n        {\n          \"name\": \"__EnumValue\"\n        },\n        {\n          \"name\": \"__Directive\"\n        },\n        {\n          \"name\": \"__DirectiveLocation\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>As you can see, we queried for all types on the schema. We get both the object types we defined and scalar types. We can even introspect the introspection types!</p> <p>There\u2019s much more than name available on introspection types. Here\u2019s another example:</p> <pre><code>{\n  __type(name: \"Author\") {\n    name\n    description\n  }\n}\n</code></pre> <p>In this example, we query a single type using the\u00a0<code>__type</code>\u00a0meta-field and we ask for its name and description. Here\u2019s the result for this query:</p> <pre><code>{\n  \"data\": {\n    \"__type\": {\n      \"name\": \"Author\",\n      \"description\": \"The author of a post.\",\n    }\n  }\n}\n</code></pre> <p>As you can see, introspection is an extremely powerful feature of GraphQL, and we\u2019ve only scratched the surface. The specification goes into much more detail about what fields and types are available in the introspection schema.</p> <p>A lot of tools available in the GraphQL ecosystem use the introspection system to provide amazing features. Think of documentation browsers, autocomplete, code generation, everything is possible! One of the most useful tools you will need as you build and use GraphQL APIs uses introspection heavily. It is called\u00a0GraphiQL.</p>"},{"location":"Code/How_to_GraphQL/4_Tooling_and_Ecosystem/#graphql-playground","title":"GraphQL Playground","text":"<p>GraphQL Playground\u00a0is a powerful \u201cGraphQL IDE\u201d for interactively working with a GraphQL API. It features an editor for GraphQL queries, mutations and subscriptions, equipped with autocompletion and validation as well as a documentation explorer to quickly visualize the structure of a schema (powered by introspection). It also can display your query history or lets you work with multiple GraphQL APIs side-by-side. It also seamlessly integrates with\u00a0<code>graphql-config</code>.</p> <p>It is an incredibly powerful tool for development. It allows you to debug and try queries on a GraphQL server without having to write plain GraphQL queries over\u00a0<code>curl</code>, for example.</p>"},{"location":"Code/How_to_GraphQL/4_Tooling_and_Ecosystem/#prisma-pulse","title":"Prisma Pulse","text":"<p>Prisma Pulse\u00a0enables you to easily implement GraphQL subscriptions or live queries with real-time updates from the database in a robust, scalable and type-safe way.</p> <p>It is compatible with all popular libraries from the GraphQL ecosystem, such as Apollo Server and GraphQL Yoga.</p>"},{"location":"Code/How_to_GraphQL/4_Tooling_and_Ecosystem/#prisma-accelerate","title":"Prisma Accelerate","text":"<p>Prisma Accelerate\u00a0is a global database cache with a scalable connection pool that can help speed up your database queries.</p> <p>It\u2019s especially useful when you\u2019re deploying your GraphQL API in a serverless environment where a lot of traffic may quickly exhaust your database connection limit. Accelerate\u2019s edge caching further ensures that your resolvers can return data faster because they don\u2019t need to fetch the data all the way from the database.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_0_Introduction/","title":"Part 0 Introduction","text":""},{"location":"Code/How_to_GraphQL/Tutorial/Part_0_Introduction/#introduction","title":"Introduction","text":"<p>In this section, you will set up all of the pieces needed to build a GraphQL API. You will start up a TypeScript project, provision a PostgreSQL database, initialize Prisma in your project, and finally seed your database.</p> <p>In the process, you will set up an important piece of the end-to-end type-safety puzzle: a source of truth for the shape of your data.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_0_Introduction/#technologies-you-will-use","title":"Technologies you will use","text":"<p>These are the main tools you will be using throughout this series:</p> <ul> <li>Prisma\u00a0as the Object-Relational Mapper (ORM)</li> <li>PostgreSQL\u00a0as the database</li> <li>Railway\u00a0to host your database</li> <li>TypeScript\u00a0as the programming language</li> <li>GraphQL Yoga\u00a0as the GraphQL server</li> <li>Pothos\u00a0as the code-first GraphQL schema builder</li> <li>Vite\u00a0to manage and scaffold your frontend project</li> <li>React\u00a0as the frontend JavaScript library</li> <li>GraphQL Codegen\u00a0to generate types for the frontend based on the GraphQL schema</li> <li>TailwindCSS\u00a0for styling the application</li> <li>Render\u00a0to deploy your API and React Application</li> </ul>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_0_Introduction/#assumed-knowledge","title":"Assumed knowledge","text":"<p>While this series will attempt to cover everything in detail from a beginner's standpoint, the following would be helpful:</p> <ul> <li>Basic knowledge of JavaScript or TypeScript</li> <li>Basic knowledge of GraphQL</li> <li>Basic knowledge of React</li> </ul>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_0_Introduction/#development-environment","title":"Development environment","text":"<p>To follow along with the examples provided, you will be expected to have:</p> <ul> <li>Node.js\u00a0installed.</li> <li>The\u00a0Prisma VSCode Extension\u00a0installed.\u00a0(optional)</li> </ul>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/","title":"Part 1 Frontend","text":"<p>End-to-end type safety is implemented by ensuring the types across your entire application's stack are kept in sync.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#start-a-react-application-with-vite","title":"Start a React application with Vite","text":"<p>There are many different ways to get started when building a React application. One of the easiest and most popular ways currently is to use\u00a0Vite\u00a0to scaffold and set up your application.</p> <p>To get started, run this command in a directory where you would like your application's code to live:</p> <pre><code>npm create vite@latest react-client -- --template react-ts\n</code></pre> <p>Note: You don't need to install any packages before running this command.</p> <p>This command set up a ready-to-go React project in a folder named\u00a0<code>react-client</code>\u00a0using a TypeScript template. The template comes with a development server, hot module replacement, and a build process out of the box.</p> <p>Once your project has been generated you will be prompted to enter the new directory, install the node modules, and run the project. Go ahead and do that by running the following commands:</p> <pre><code>cd react-client\nnpm install\nnpm run dev\n</code></pre> <p>Once your development server is up and running you should see some output that looks similar to this:</p> <p></p> <p>If you pop open the link from that output you will be presented with Vite's React and TypeScript template landing template page:</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#clean-up-the-template","title":"Clean up the template","text":"<p>The starter template comes with a few things you will not need, so the first thing to do is clean things up.</p> <p>Within the\u00a0<code>src</code>\u00a0folder, there will be two things to delete. Remove the following:</p> <ul> <li><code>App.css</code></li> <li><code>/assets</code> (The whole directory)</li> </ul> <p>Next, replace the contents of\u00a0<code>/src/App.tsx</code>\u00a0with the following component to give yourself a clean slate to work with:</p> <pre><code>// src/App.tsx\n\nfunction App() {\n  return (\n   &lt;h2&gt;Hello World!&lt;/h2&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#set-up-tailwindcss","title":"Set up TailwindCSS","text":"<p>Your application will use\u00a0TailwindCSS\u00a0to make designing and styling your components easy. To get started, you will first need a few new dependencies:</p> <pre><code>npm install -D tailwindcss postcss autoprefixer\n</code></pre> <p>The command above will install all of the pieces TailwindCSS requires to work in your project, including the Tailwind CLI. Initialize TailwindCSS in your project using the newly installed CLI:</p> <pre><code>npx tailwindcss init -p\n</code></pre> <p>This command created two files in your project:</p> <ul> <li><code>tailwind.config.cjs</code>: The configuration file for TailwindCSS</li> <li><code>postcss.config.cjs</code>: The configuration file for PostCSS</li> </ul> <p>Within\u00a0<code>tailwind.config.cjs</code>, you will see a\u00a0<code>content</code>\u00a0key. This is where you will define which files in your project TailwindCSS should be aware of when scanning through your code and deciding which of its classes and utilities you are using. This is how TailwindCSS determines what needs to be bundled into its built and minified output.</p> <p>Add the following value to the\u00a0<code>content</code>\u00a0key's array to tell TailwindCSS to look at any\u00a0<code>.tsx</code>\u00a0file within the\u00a0<code>src</code>\u00a0folder:</p> <pre><code>// tailwind.config.cjs\n\nmodule.exports = {\n  content: [\n    \"./src/**/*.tsx\"\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre> <p>Finally, within\u00a0<code>src/index.css</code>\u00a0you will need to import the TailwindCSS utilities, which are required to use TailwindCSS in your project. Replace that entire file's contents with the following:</p> <pre><code>// src/index.css\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <p>TailwindCSS is now configured and ready to go! Replace the existing\u00a0<code>&lt;h2&gt;</code>\u00a0tag in\u00a0<code>src/App.tsx</code>\u00a0with this JSX to test that the TailwindCSS classes are working:</p> <pre><code>// src/App.tsx\n\n// ...\n&lt;div className=\"bg-zinc-800 flex-col h-screen w-full flex items-center justify-center p-4 gap-y-12 overflow-scroll\"&gt;\n  &lt;h2 className=\"text-4xl text-yellow-500\"&gt;Hello World!&lt;/h2&gt;\n&lt;/div&gt;\n// ...\n</code></pre> <p>If your webpage looks like this, congrats! You've successfully set up TailwindCSS!</p> <p></p> <p>Note: If not, try restarting your development server and ensure the steps above were followed correctly.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#define-and-mock-your-data","title":"Define and mock your data","text":"<p>Now that TailwindCSS is set up, you are almost ready to begin building the components to display your data. There is one more thing you will need to do first: define and mock your data.</p> <p>In order to ensure your application is type-safe, you will need to create a set of TypeScript types that define your two data models: users and messages. After building those types, you will mock a set of test data.</p> <p>First, create a new file in the\u00a0<code>src</code>\u00a0directory named\u00a0<code>types.ts</code>:</p> <pre><code>touch src/types.ts\n</code></pre> <p>This is the file where you will store all of the types this application needs. Within that file, add and export a new\u00a0<code>type</code>\u00a0named\u00a0<code>Message</code>\u00a0with a\u00a0<code>string</code>\u00a0field named\u00a0<code>body</code>:</p> <pre><code>// src/types.ts\n\nexport type Message = {\n  body: string\n}\n</code></pre> <p>This type describes what will be available within a\u00a0<code>Message</code>\u00a0object. There is only one key, however in a real-world application this may contain dozens or more field definitions.</p> <p>Next, add and export another type named\u00a0<code>User</code>\u00a0with a\u00a0<code>name</code>\u00a0field of the\u00a0<code>string</code>\u00a0type and a\u00a0<code>messages</code>\u00a0field that holds an array of\u00a0<code>Message</code>\u00a0objects:</p> <pre><code>// src/types.ts\n\n// ...\n\nexport type User = {\n    name: string\n    messages: Message[]\n} \n</code></pre> <p>Note: In the next sections of this series, you will replace these manually written types with automatically generated ones that contain up-to-date representations of your API's exposed data model.</p> <p>Now that your data has been \"described\", head over to\u00a0<code>src/App.tsx</code>. Here you will mock some data to play with in your application.</p> <p>First, import the new\u00a0<code>User</code>\u00a0type into\u00a0<code>src/App.tsx</code>:</p> <pre><code>// src/App.tsx\n\nimport { User } from './types'\n\n// ...\n</code></pre> <p>Next, within the\u00a0<code>App</code>\u00a0function in that file, create a new variable named\u00a0<code>users</code>\u00a0that contains an array of\u00a0<code>User</code>\u00a0objects with a single user entry who has a couple of messages associated with it:</p> <pre><code>// src/App.tsx\n\n// ...\n\nfunction App() {\n  const users: User[] = [{\n    name: 'Prisma Fan',\n    messages: [{\n      body: 'Prisma rocks!!'\n    }, {\n      body: 'Did I mention I love Prisma?'\n    }]\n  }]\n\n  // ...\n}\n\nexport default Apps\n</code></pre> <p>In the snippet above, you defined a single user who has two associated messages. This is all the data you will need to build the UI components for this application.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#display-a-list-of-users","title":"Display a list of users","text":"<p>The first piece of the UI you will build is the component that displays a user. Create a new folder inside of the\u00a0<code>src</code>\u00a0directory named\u00a0<code>components</code>:</p> <pre><code>mkdir src/components\n</code></pre> <p>Inside of that folder, create a file named\u00a0<code>UserDisplay.tsx</code>:</p> <pre><code>touch src/components/UserDisplay.tsx\n</code></pre> <p>This file wil contain the user display component. To start that component off create a function named\u00a0<code>UserDisplay</code>\u00a0that returns a simple\u00a0<code>&lt;p&gt;</code>\u00a0tag for now. Then export that function:</p> <pre><code>// src/components/UserDisplay.tsx\n\nfunction UserDisplay() {\n  return &lt;p&gt;User Component&lt;/p&gt;\n}\n\nexport default UserDisplay\n</code></pre> <p>This will serve as the skeleton for your component. The goal here is to allow this component to take in a\u00a0<code>user</code>\u00a0parameter and display that user's data inside of the component.</p> <p>To accomplish this, first import your\u00a0<code>User</code>\u00a0type at the very top of\u00a0<code>src/components/UserDisplay.tsx</code>:</p> <pre><code>// src/components/UserDisplay.tsx\n\nimport { User } from '../types'\n\n// ...\n</code></pre> <p>You will use this type to describe what a\u00a0<code>user</code>\u00a0property in your\u00a0<code>UserDisplay</code>\u00a0function should contain.</p> <p>Add a new\u00a0<code>type</code>\u00a0to this file named\u00a0<code>Props</code>\u00a0with a single\u00a0<code>user</code>\u00a0field of the\u00a0<code>User</code>\u00a0type. Use that type to describe your function's arguments\u00a0(or \"props\"):</p> <pre><code>// src/components/UserDisplay.tsx\n\nimport { User } from '../types'\n\ntype Props = {\n    user: User\n}\n\nfunction UserDisplay({ user }: Props) {\n    return &lt;p&gt;User Component&lt;/p&gt;\n}\n\nexport default UserDisplay\n</code></pre> <p>Note: The\u00a0<code>user</code>\u00a0key is being\u00a0destructured\u00a0within the function arguments to allow easy access to its values.</p> <p>The\u00a0<code>user</code>\u00a0property allows you to provide your component an object of type\u00a0<code>User</code>. Each user in this application will be displayed within a rectangle that contains the user's name.</p> <p>Replace the existing\u00a0<code>&lt;p&gt;</code>\u00a0tag with the following JSX to display a user's name with some nice TailwindCSS styles:</p> <pre><code>// src/components/UserDisplay.tsx\n\n// ...\nfunction UserDisplay({ user }: Props) {\n    return &lt;div className=\"flex gap-x-24 justify-center\"&gt;\n        &lt;div className=\"rounded-sm flex justify-center items-center drop-shadow-md bg-neutral-700 w-48 h-20\"&gt;\n            &lt;p className=\"text-xl text-gray-200 font-bold\"&gt;\n                {user.name}\n            &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n}\n// ...\n</code></pre> <p>This component is now ready to display a user's details, however you are not yet rendering it anywhere.</p> <p>Head over to\u00a0<code>src/App.tsx</code>\u00a0and import your new component. Then, in place of the current\u00a0<code>&lt;h2&gt;</code>\u00a0tag, render the component for each user in your\u00a0<code>users</code>\u00a0array:</p> <pre><code>// src/App.tsx\n\nimport { User } from './types'\nimport UserDisplay from './components/UserDisplay'\n\nfunction App() {\n  const users: User[] = [/**/]\n\n  return (\n    &lt;div className=\"bg-zinc-800 flex-col h-screen w-full flex items-center justify-center p-4 gap-y-12 overflow-scroll\"&gt;\n      {\n        users.map((user, i) =&gt; &lt;UserDisplay user={user} key={i}/&gt;)\n      }\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>If you head back to your browser you should see a nice box displaying your user's name! The only thing missing at this point is the user's messages.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#display-each-users-messages","title":"Display each user's messages","text":"<p>Now that you can display your users, you will display the users' associated messages. You will create a sort of \"tree view\" to display the messages in.</p> <p>Start off by creating a component to display an individual message. Create a new file in\u00a0<code>src/components</code>\u00a0named\u00a0<code>MessageDisplay.tsx</code>:</p> <pre><code>touch src/components/MessageDisplay.tsx\n</code></pre> <p>Then, import the\u00a0<code>Message</code>\u00a0type from\u00a0<code>src/types.ts</code>\u00a0into the new file and create a\u00a0<code>Props</code>\u00a0type with two keys:</p> <ul> <li><code>message</code>: A\u00a0<code>Message</code>\u00a0object that holds the message details</li> <li><code>index</code>: A\u00a0<code>number</code>\u00a0value that holds the index of the current message from the parent's list of messages</li> </ul> <p>The result should look like the snippet below:</p> <pre><code>// src/components/MessageDisplay.tsx\n\nimport { Message } from '../types'\n\ntype Props = {\n    message: Message\n    index: number\n}\n</code></pre> <p>With those pieces in place, you are ready to build the component function. The code below uses the\u00a0<code>Props</code>\u00a0type you wrote to describe the function arguments, pulls out the\u00a0<code>message</code>\u00a0and\u00a0<code>index</code>\u00a0values using destructuring, renders the message in a styled container, and finally exports the component:</p> <pre><code>// src/components/MessageDisplay.tsx\n\n// ...\n\nfunction MessageDisplay({ message, index }: Props) {\n    return &lt;div className=\"group mb-2 shrink-0 rounded-lg flex items-center drop-shadow-md bg-zinc-700 w-48 h-20 relative\"&gt;\n        &lt;p className=\"text-sm text-gray-200 font-bold px-4\"&gt;\n            {message.body}\n        &lt;/p&gt;\n    &lt;/div&gt;\n}\n\nexport default MessageDisplay\n</code></pre> <p>Now it's time to put that component to use! In\u00a0<code>src/components/UserDisplay.tsx</code>\u00a0import the\u00a0<code>MessageDisplay</code>\u00a0component and render one for each element in the\u00a0<code>user.messages</code>\u00a0array:</p> <pre><code>// src/components/UserDisplay.tsx\n\nimport MessageDisplay from './MessageDisplay'\n\n// ...\n\nfunction UserDisplay({ user }: Props) {\n    return &lt;div className=\"flex gap-x-24 justify-center\"&gt;\n        &lt;div className=\"rounded-sm flex justify-center items-center drop-shadow-md bg-neutral-700 w-48 h-20\"&gt;\n            &lt;p className=\"text-xl text-gray-200 font-bold\"&gt;\n                {user.name}\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            {user.messages.map((message, i) =&gt; &lt;MessageDisplay key={i} index={i} message={message} /&gt;)}\n        &lt;/div&gt;\n    &lt;/div&gt;\n}\n// ...\n</code></pre> <p>Over in your browser, you should now see each user's messages to their right!</p> <p></p> <p>That looks great, however there is one last thing to add. You are building a tree view, so the final piece is to render \"branches\" that connect each message to its user.</p> <p>Create a new file in\u00a0<code>src/components</code>\u00a0named\u00a0<code>Branch.tsx</code>:</p> <pre><code>touch src/components/Branch.tsx\n</code></pre> <p>This component will take in one property,\u00a0<code>trunk</code>, which indicates whether or not the message it links to is the first in the list.</p> <p>Note: This is why you needed the\u00a0<code>index</code>\u00a0key in the\u00a0<code>MessageDisplay</code>\u00a0component.</p> <p>Insert the following component into that file:</p> <pre><code>// src/components/Branch.tsx\n\nfunction Branch({ trunk }: { trunk: boolean }) {\n    return &lt;div\n        className={`\n            ${!trunk ? `border-l-4` : ''} \n            ${trunk ? 'w-24' : 'w-16'}\n            ${trunk ? '-translate-x-24' : '-translate-x-16'} \n            scale-y-110\n            transition\n            ease-in-out\n            duration-300\n            group-hover:border-teal-400\n            h-full border-blue-500 border-b-4 absolute -translate-y-10`}\n    /&gt;\n}\n\nexport default Branch\n</code></pre> <p>The snippet above renders a branch with some crafty TailwindCSS magic. If you are interested in what TailwindCSS has to offer or want to better understand what is going on above, TailwindCSS has amazing\u00a0docs\u00a0that cover all of the classes used above.</p> <p>To finish off this application's UI, use the new\u00a0<code>Branch</code>\u00a0component within your\u00a0<code>MessageDisplay</code>\u00a0component to render a branch for each message:</p> <pre><code>// src/components/MessageDisplay.tsx\n\nimport { Message } from '../types'\nimport Branch from './Branch'\n\ntype Props = {\n    message: Message\n    index: number\n}\n\nfunction MessageDisplay({ message, index}: Props) {\n    return &lt;div className=\"group mb-2 shrink-0 rounded-lg flex items-center drop-shadow-md bg-zinc-700 w-48 h-20 relative\"&gt;\n        &lt;Branch trunk={index === 0} /&gt;\n        &lt;p className=\"text-sm text-gray-200 font-bold px-4\"&gt;\n            {message.body}\n        &lt;/p&gt;\n    &lt;/div&gt;\n}\n\nexport default MessageDisplay\n</code></pre> <p>Back over in your browser, you will now see branches for each message! Hover over a message to highlight the branch \u2728</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_1_Frontend/#summary-whats-next","title":"Summary &amp; What's next","text":"<p>In this article, you built the frontend piece of your fully type-safe application. Along the way, you:</p> <ul> <li>Set up a React project</li> <li>Set up TailwindCSS</li> <li>Modeled and mocked out your data</li> <li>Built the UI components for your application</li> </ul> <p>At this point, the data and types in your application are static and manually built. In future sections of this series you will set up dynamic type definitions using code generation and use dynamic data from a database.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/","title":"Part 2 API Prep","text":"<p>In this series you are learning how to implement end-to-end type safety using React, GraphQL, Prisma, and some other helpful tools that tie those three together.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#create-a-typescript-project","title":"Create a TypeScript project","text":"<p>To kick things off, create a new folder in your working directory that will contain your GraphQL server's code wherever you would like:</p> <pre><code>mkdir graphql-server # Example folder\n</code></pre> <p>This project will use\u00a0npm, a package manager for Node.js, to manage and install new packages. Navigate into your new folder and initialize npm using the following commands:</p> <pre><code>cd graphql-servernpm init -y\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#install-the-basic-packages","title":"Install the basic packages","text":"<p>While building this API, you will install various packages that will help in the development of your application. For now, install the following development packages:</p> <ul> <li><code>ts-node-dev</code>: Allows you to execute TypeScript code with live-reload on file changes</li> <li><code>typescript</code>: The TypeScript package that allows you to provide typings to your JavaScript applications</li> <li><code>@types/node</code>: TypeScript type definitions for Node.js</li> </ul> <pre><code>npm i -D ts-node-dev typescript @types/node\n</code></pre> <p>Note: These dependencies were installed as development dependencies because they are only needed during development. None of them are part of the production deployment.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#set-up-typescript","title":"Set up TypeScript","text":"<p>With TypeScript installed in your project, you can now initialize the TypeScript configuration file using the\u00a0<code>tsc</code>\u00a0command-line interface tool\u00a0(CLI):</p> <pre><code>npx tsc --init\n</code></pre> <p>The above command will create a new file named\u00a0<code>tsconfig.json</code>\u00a0at the root of your project and comes with a default set of configurations for how to compile and handle your TypeScript code. For the purposes of this series, you will leave the default settings.</p> <p>Create a new folder named\u00a0<code>src</code>\u00a0and within that folder a new file named\u00a0<code>index.ts</code>:</p> <pre><code>mkdir srctouch src/index.ts\n</code></pre> <p>This will be the entry point to your TypeScript code. Within that file, add a simple\u00a0<code>console.log</code>:</p> <pre><code>// src/index.ts\nconsole.log('Hey there! \ud83d\udc4b');\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#add-a-development-script","title":"Add a development script","text":"<p>In order to run your code, you will use\u00a0<code>ts-node-dev</code>, which will compile and run your TypeScript code and watch for file changes. When a file is changed in your application, it will re-compile and re-run your code.</p> <p>Within\u00a0<code>package.json</code>, in the\u00a0<code>\"scripts\"</code>\u00a0section, add a new script named\u00a0<code>\"dev\"</code>\u00a0that uses\u00a0<code>ts-node-dev</code>\u00a0to run your entry file:</p> <pre><code>// package.json\n\n// ...\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"dev\": \"ts-node-dev src/index.ts\"\n},\n// ...\n</code></pre> <p>You can now use the following command to run your code:</p> <pre><code>npm run dev\n</code></pre> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#set-up-the-database","title":"Set up the database","text":"<p>The next piece you will set up is the database. You will be using a PostgreSQL database for this application. There are many different ways to host and work with a PostgreSQL database, however, one of the simplest ways is to deploy your database using\u00a0Railway.</p> <p>Head over to\u00a0https://railway.app\u00a0and, if you don't already have one, create an account.</p> <p>After creating an account and logging in, you should see a page like this:</p> <p></p> <p>Hit the\u00a0New Project\u00a0button, or simply click the\u00a0Create a New Project\u00a0area.</p> <p>You will be presented with a search box and a few common options. Select the\u00a0Provision PostgreSQL\u00a0option.</p> <p></p> <p>The option selected above creates a new PostgreSQL database and deploys it. Once the server is ready, you should see your provisioned database on the screen. Click the\u00a0PostgreSQL\u00a0instance.</p> <p></p> <p>That will open up a menu with a few different tabs. On the\u00a0Connect\u00a0tab, you will find your database's connection string. Take note of where to find this string as you will need them in just a little while.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#set-up-prisma","title":"Set up Prisma","text":"<p>Next you will set up Prisma. Your GraphQL server will use Prisma Client to query your PostgreSQL database.</p> <p>To set up Prisma, you first need to install Prisma CLI as a development dependency:</p> <pre><code>npm i -D prisma\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#initialize-prisma","title":"Initialize Prisma","text":"<p>With Prisma CLI installed, you will have access to a set of useful tools and commands provided by Prisma. The command you will use here is called\u00a0<code>init</code>, and will initialize Prisma in your project:</p> <pre><code>npx prisma init\n</code></pre> <p>This command will create a new\u00a0<code>prisma</code>\u00a0folder within your project. Inside this folder you will find a file,\u00a0<code>schema.prisma</code>, which contains the start of a Prisma schema.</p> <p>That file uses the Prisma Schema Language\u00a0(PSL)\u00a0and is where you will define your database's tables and fields. It currently looks as follows:</p> <pre><code>// prisma/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n</code></pre> <p>Within the\u00a0<code>datasource</code>\u00a0block, note the\u00a0<code>url</code>\u00a0field. This fields equals a value\u00a0<code>env(\"DATABASE_URL\")</code>. This value tells Prisma to look within the environment variables for a variable named\u00a0<code>DATABASE_URL</code>\u00a0to find the database's connection string.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#set-the-environment-variable","title":"Set the environment variable","text":"<p><code>prisma init</code>\u00a0also created a\u00a0<code>.env</code>\u00a0file for you with a single variable named\u00a0<code>DATABASE_URL</code>. This variable holds the connection string Prisma will use to connect to your database.</p> <p>Replace the current default contents of that variable with the connection string you retrieved via the Railway UI:</p> <pre><code># .env\n\n# Example: postgresql://postgres:Pb98NuLZM22ptNuR4Erq@containers-us-west-63.railway.app:6049/railway\n\nDATABASE_URL=\"&lt;your-connection-string&gt;\"\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#model-your-data","title":"Model your data","text":"<p>The application you are building will need two different database tables:\u00a0<code>User</code>\u00a0and\u00a0<code>Message</code>. Each \"user\" will be able to have many associated \"messages\".</p> <p>Note: Think back to the previous article, where you set up manually written types that define the user and message models.</p> <p>Begin by modeling the\u00a0<code>User</code>\u00a0table. This table will need the following columns:</p> <ul> <li><code>id</code>: The unique ID of the database record</li> <li><code>name</code>: The name of the user</li> <li><code>createdAt</code>: A timestamp of when each user was created</li> </ul> <p>Add the following\u00a0<code>model</code>\u00a0block to your Prisma schema:</p> <pre><code>// prisma/schema.prisma\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  name      String\n  createdAt DateTime @default(now())\n}\n</code></pre> <p>Next, add a\u00a0<code>Message</code>\u00a0model with the following fields:</p> <ul> <li><code>id</code>: The unique ID of the database record</li> <li><code>body</code>: The contents of the message</li> <li><code>createdAt</code>: A timestamp of when each message was created</li> </ul> <pre><code>// prisma/schema.prisma\n\nmodel Message {\n  id        Int      @id @default(autoincrement())\n  body   String\n  createdAt DateTime @default(now())\n}\n</code></pre> <p>Finally, set up a one-to-many relation between the\u00a0<code>User</code>\u00a0and\u00a0<code>Message</code>\u00a0tables.</p> <pre><code>// prisma/schema.prisma\n\nmodel User {\n  id        Int       @id @default(autoincrement())\n  name      String\n  createdAt DateTime  @default(now())\n  messages  Message[]\n}\n\nmodel Message {\n  id        Int      @id @default(autoincrement())\n  body   String\n  createdAt DateTime @default(now())\n  userId    Int\n  user      User     @relation(fields: [userId], references: [id])\n}\n</code></pre> <p>This data modeling step is an important one. What you have done here is set up the\u00a0source of truth\u00a0for the shape of your data. You database's schema is now defined in one central place, and used to generate a type-safe API that interacts with that database.</p> <p>Note: Think of the Prisma Schema as the glue between the shape of your database and the API that interacts with it.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#perform-the-first-migration","title":"Perform the first migration","text":"<p>Your database schema is now modeled and you are ready to apply this schema to your database. You will use Prisma Migrate to manage your database migrations.</p> <p>Run the following command to create and apply a migration to your database:</p> <pre><code>npx prisma migrate dev --name init\n</code></pre> <p>The above command will create a new migration file named\u00a0<code>init</code>, apply that migration to your database, and finally generate Prisma Client based off of that schema.</p> <p>If you head back over to the Railway UI, in the\u00a0Data\u00a0tab you should see your tables listed. If so, the migration worked and your database is ready to be put to work!</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#seed-the-database","title":"Seed the database \ud83c\udf31","text":"<p>That last thing to do before beginning to build out your GraphQL API is seed the database with some initial data for you to interact with.</p> <p>Within the\u00a0<code>prisma</code>\u00a0folder, create a new file named\u00a0<code>seed.ts</code>:</p> <pre><code>touch prisma/seed.ts\n</code></pre> <p>Paste the following contents into that file:</p> <pre><code>// prisma/seed.ts\n\nimport { PrismaClient } from \"@prisma/client\";\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Delete all `User` and `Message` records\n  await prisma.message.deleteMany({});\n  await prisma.user.deleteMany({});\n  // (Re-)Create dummy `User` and `Message` records\n  await prisma.user.create({\n    data: {\n      name: \"Jack\",\n      messages: {\n        create: [\n          {\n            body: \"A Note for Jack\",\n          },\n          {\n            body: \"Another note for Jack\",\n          },\n        ],\n      },\n    },\n  });\n  await prisma.user.create({\n    data: {\n      name: \"Ryan\",\n      messages: {\n        create: [\n          {\n            body: \"A Note for Ryan\",\n          },\n          {\n            body: \"Another note for Ryan\",\n          },\n        ],\n      },\n    },\n  });\n  await prisma.user.create({\n    data: {\n      name: \"Adam\",\n      messages: {\n        create: [\n          {\n            body: \"A Note for Adam\",\n          },\n          {\n            body: \"Another note for Adam\",\n          },\n        ],\n      },\n    },\n  });\n}\n\nmain().then(() =&gt; {\n  console.log(\"Data seeded...\");\n});\n</code></pre> <p>This script clears out the database and then creates three users. Each user is given two messages associated with it.</p> <p>Note: In the next article, you will dive deeper into the process writing a few queries using Prisma Client.</p> <p>Now that the seed script is available, head over to your\u00a0<code>package.json</code>\u00a0file and add the following key to the JSON object:</p> <pre><code>// package.json\n\n// ...\n\"prisma\": {\n  \"seed\": \"ts-node-dev prisma/seed.ts\"\n},\n// ...\n</code></pre> <p>Use the following command to run your seed script:</p> <pre><code>npx prisma db seed\n</code></pre> <p>After running the script, if you head back to the Railway UI and into the\u00a0Data\u00a0tab, you should be able to navigate through the newly added data.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_2_API_Prep/#summary-whats-next","title":"Summary &amp; What's next","text":"<p>In this article, you set up all of the pieces necessary to build your GraphQL API. Along the way, you:</p> <ul> <li>Set up a TypeScript project that will hold your GraphQL server</li> <li>Spun up a PostgreSQL database using Railway</li> <li>Initialized Prisma</li> <li>Modeled the database schema</li> <li>Seeded the database</li> </ul> <p>In the next article, you will build a type-safe GraphQL server using Prisma, GraphQL Yoga, and a code-first GraphQL schema builder called Pothos.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/","title":"Part 3 GraphQL API","text":"<p>In this series you are learning how to implement end-to-end type safety using React, GraphQL, Prisma, and some other helpful tools that tie those three together.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#start-up-a-graphql-server","title":"Start up a GraphQL Server","text":"<p>The very first thing you will need to build a GraphQL API is a running GraphQL server. In this application, you will use\u00a0GraphQL Yoga\u00a0as your GraphQL server.</p> <p>Install the\u00a0<code>@graphql-yoga/node</code>\u00a0and\u00a0<code>graphql</code>\u00a0packages to get started:</p> <pre><code>npm install @graphql-yoga/node graphql\n</code></pre> <p>With those packages installed, you can now start up your own GraphQL server. Head over to\u00a0<code>src/index.ts</code>. Replace the existing contents with the this snippet:</p> <pre><code>// src/index.ts\n\n// i\nimport { createServer } from \"@graphql-yoga/node\";\n\n// 2\nconst port = Number(process.env.API_PORT) || 4000\n\n// 3\nconst server = createServer({  port});\n\n// 4\nserver.start().then(() =&gt; {  console.log(`\ud83d\ude80 GraphQL Server ready at http://localhost:${port}/graphql`);});\n</code></pre> <p>The code above does the following:</p> <ol> <li>Imports the\u00a0<code>createServer</code>\u00a0function from GraphQL Yoga</li> <li>Creates a variable to hold the API's port, defaulting to\u00a0<code>4000</code>\u00a0if one is not present in the environment</li> <li>Creates an instance of the GraphQL server</li> <li>Starts the server up on port\u00a0<code>4000</code>\u00a0and lets the console know it's up and running</li> </ol> <p>If you start up your server, you will have access to a running\u00a0(empty)\u00a0GraphQL API:</p> <pre><code>npm run dev\n</code></pre> <p></p> <p>Note: The GraphQL server is up and running, however it is not usable because you have not yet defined any queries or mutations.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#set-up-the-schema-builder","title":"Set up the schema builder","text":"<p>GraphQL uses a strongly typed schema to define how a user can interact with the API and what data should be returned. There are two different approaches to building a GraphQL schema:\u00a0code-first and SDL-first.</p> <ul> <li>Code-first: Your application code defines and generates a GraphQL schema</li> <li>SDL-first: You manually write the GraphQL schema</li> </ul> <p>In this application, you will take the code-first approach using a popular schema builder named\u00a0Pothos.</p> <p>To get started with Pothos, you first need to install the core package:</p> <pre><code>npm i @pothos/core\n</code></pre> <p>Next, create an instance of the Pothos schema builder as a sharable module. Within the\u00a0<code>src</code>\u00a0folder, create a new file named\u00a0<code>builder.ts</code>\u00a0that will hold this module:</p> <pre><code>cd src\ntouch builder.ts\n</code></pre> <p>For now, import the default export from the\u00a0<code>@pothos/core</code>\u00a0package and export an instance of it named\u00a0<code>builder</code>:</p> <pre><code>// src/builder.ts\n\nimport SchemaBuilder from \"@pothos/core\";\nexport const builder = new SchemaBuilder({});\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#define-a-date-scalar-type","title":"Define a\u00a0<code>Date</code>\u00a0scalar type","text":"<p>By default, GraphQL only supports a limited set of scalar data types:</p> <ul> <li>Int</li> <li>Float</li> <li>String</li> <li>Boolean</li> <li>ID</li> </ul> <p>If you think back to your Prisma schema, however, you will remember there are a few fields defined that use the\u00a0<code>DateTime</code>\u00a0data type. To handle those within your GraphQL API, you will need to define a custom\u00a0<code>Date</code>\u00a0scalar type.</p> <p>Fortunately, pre-made custom scalar type definitions are available thanks to the open-source community. The one you will use is called\u00a0<code>graphql-scalars</code>:</p> <pre><code>npm i graphql-scalars\n</code></pre> <p>You will need to register a\u00a0<code>Date</code>\u00a0scalar with your schema builder to let it know how to handle dates. The schema builder takes in a\u00a0generic\u00a0where you can specify various\u00a0configurations.</p> <p>Make the following changes to register the\u00a0<code>Data</code>\u00a0scalar type:</p> <pre><code>// src/builder.ts\n\nimport SchemaBuilder from \"@pothos/core\";\n// 1\nimport { DateResolver } from \"graphql-scalars\";\n\n// 2\nexport const builder = new SchemaBuilder&lt;{  Scalars: {    Date: { Input: Date; Output: Date };  };}&gt;({});\n\n// 3\nbuilder.addScalarType(\"Date\", DateResolver, {});\n</code></pre> <p>Here's what changed in the snippet above. You:</p> <ol> <li>Imported the\u00a0<code>Date</code>\u00a0scalar type's resolver which handles converting values to the proper date type within your API</li> <li>Registered a new scalar type called\u00a0<code>\"Date\"</code>\u00a0using the\u00a0<code>SchemaBuilder</code>'s\u00a0<code>Scalars</code>\u00a0configuration and configured the JavaScript types to use when accessing and validating fields of this type</li> <li>Let the builder know how to handle the defined\u00a0<code>Date</code>\u00a0scalar type by providing the imported\u00a0<code>DateResolver</code></li> </ol> <p>Within your GraphQL object types and resolvers, can now use the\u00a0<code>Date</code>\u00a0scalar type.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#add-the-pothos-prisma-plugin","title":"Add the Pothos Prisma plugin","text":"<p>The next thing you need to do is define your GraphQL object types. These define the objects and fields your API will expose via queries.</p> <p>Pothos has a fantastic\u00a0plugin\u00a0for Prisma that makes this process a lot smoother and provides type safety between your GraphQL types and the database schema.</p> <p>Note: Pothos\u00a0can\u00a0be used in a type-safe way with Prisma without using the plugin, however that process is very manual. See details\u00a0here.</p> <p>First, install the plugin:</p> <pre><code>npm i @pothos/plugin-prisma\n</code></pre> <p>This plugin provides a Prisma generator that generates the types Pothos requires. Add the generator to your Prisma schema in\u00a0<code>prisma/schema.prisma</code>:</p> <pre><code>// prisma/schema.prisma\n\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n\n+generator pothos {\n+   provider = \"prisma-pothos-types\"\n+}\n\ndatasource db {\n    provider = \"postgresql\"\n    url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n    id        Int       @id @default(autoincrement())\n    name      String\n    createdAt DateTime  @default(now())\n    messages  Message[]\n}\n\nmodel Message {\n    id        Int      @id @default(autoincrement())\n    body      String  createdAt DateTime @default(now())\n    userId    Int\n    user      User     @relation(fields: [userId], references: [id])\n}\n</code></pre> <p>Once that is added, you will need a way to generate Pothos' artifacts. You will need to install this API's node modules and regenerate Prisma Client this each time this application is deployed later in the series, so go ahead and create a new\u00a0<code>script</code>\u00a0in\u00a0<code>package.json</code>\u00a0to handle this:</p> <pre><code>// package.json\n\n{\n    // ...\n    \"scripts\": {\n        // ...    \n        \"build\": \"npm i &amp;&amp; npx prisma generate\"\n    }\n}\n</code></pre> <p>Now you can run that command to install your node modules and regenerate Prisma Client and the Pothos outputs:</p> <pre><code>npm run build\n</code></pre> <p>When you run the command above, you should see that Prisma Client and the Pothos integration were both generated.</p> <p></p> <p>Now that those types are generated, head over to\u00a0<code>src/builder.ts</code>. Here you will import the\u00a0<code>PrismaPlugin</code>\u00a0and the generated Pothos types and apply them to your builder:</p> <pre><code>// src/builder.ts\nimport SchemaBuilder from \"@pothos/core\";\nimport { DateResolver } from \"graphql-scalars\";\n+import PrismaPlugin from \"@pothos/plugin-prisma\";\n+import type PrismaTypes from \"@pothos/plugin-prisma/generated\";\n\nexport const builder = new SchemaBuilder&lt;{\n    Scalars: {\n        Date: { Input: Date; Output: Date };\n    };\n}&gt;({});\n\nbuilder.addScalarType(\"Date\", DateResolver, {});\n</code></pre> <p>As soon as you add the generated types, you will notice a TypeScript error occur within the instantiation of the\u00a0<code>SchemaBuilder</code>.</p> <p></p> <p>Pothos is smart enough to know that, because you are using the Prisma plugin, you need to provide a\u00a0<code>prisma</code>\u00a0instance to the builder. This is used by Pothos to infer information about the types in your Prisma Client. In the next step you will create and add that instance to the builder.</p> <p>For now, register the Prisma plugin and the generated types in the builder instance to let Pothos know about them:</p> <pre><code>// src/builder.ts\n// ...\n\nexport const builder = new SchemaBuilder&lt;{\n    Scalars: {\n        Date: { Input: Date; Output: Date };  \n    };\n+   PrismaTypes: PrismaTypes;\n}&gt;({\n+   plugins: [PrismaPlugin],\n});\n\n// ...\n</code></pre> <p>You will, again, see a TypeScript error at this point. This is because the\u00a0<code>builder</code>\u00a0now expects an instance of Prisma Client to be provided to the function.</p> <p></p> <p>In the next step, you will instantiate Prisma Client and provide it here in the\u00a0<code>builder</code>.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#create-a-reusable-instance-of-prisma-client","title":"Create a reusable instance of Prisma Client","text":"<p>You now need to create a re-usable instance of Prisma Client that will be used to query your database and provide the types required by the builder from the previous step.</p> <p>Create a new file in the\u00a0<code>src</code>\u00a0folder named\u00a0<code>db.ts</code>:</p> <pre><code>touch src/db.ts\n</code></pre> <p>Within that file, import Prisma Client and create an instance of the client named\u00a0<code>prisma</code>. Export that instantiated client:</p> <pre><code>// src/db.ts\n\nimport { PrismaClient } from \"@prisma/client\";\n\nexport const prisma = new PrismaClient();\n</code></pre> <p>Import the\u00a0<code>prisma</code>\u00a0variable into\u00a0<code>src/builder.ts</code>\u00a0and provide it to\u00a0<code>builder</code>\u00a0to get rid of the TypeScript error:</p> <pre><code>// src/builder.ts\n// ...\n\n+import { prisma } from \"./db\";\n\nexport const builder = new SchemaBuilder&lt;{\n    Scalars: {\n        Date: { Input: Date; Output: Date };\n    };\n    PrismaTypes: PrismaTypes;\n}&gt;({\n    plugins: [PrismaPlugin],\n+   prisma: {\n+       client: prisma,\n+   },\n});\n\n// ...\n</code></pre> <p>The Pothos Prisma plugin is now completely configured and ready to go. This takes the types generated by Prisma and allows you easy access to those within your GraphQL object types and queries.</p> <p>The cool thing about this is you now have a single source of truth (the Prisma schema) handling the types in your database, the API used to query the database, and the GraphQL schema.</p> <p>Next, you will see this in action!</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#define-your-graphql-types","title":"Define your GraphQL types","text":"<p>At this point, you will define the GraphQL object types using the builder you configured with the Prisma plugin.</p> <p>Note: It may seem redundant to manually define GraphQL object types when you've already defined the shape of the data in the Prisma schema. The Prisma schema defines the shape of the data in the database, while the GraphQL schema defines the data available in the API.</p> <p>Create a new folder within\u00a0<code>src</code>\u00a0named\u00a0<code>models</code>. Then create a\u00a0<code>User.ts</code>\u00a0file within that new folder:</p> <pre><code>mkdir src/modelstouch src/models/User.ts\n</code></pre> <p>This is where you will define the\u00a0<code>User</code>\u00a0object type and its related queries that you will expose through your GraphQL API. Import the\u00a0<code>builder</code>\u00a0instance:</p> <pre><code>// src/models/User.ts\n\nimport { builder } from \"../builder\";\n</code></pre> <p>Because you are using Pothos's Prisma plugin, the\u00a0<code>builder</code>\u00a0instance now has a method named\u00a0<code>prismaObject</code>\u00a0you will use to define your object types.</p> <p>That method takes in two parameters:</p> <ol> <li><code>name</code>: The name of the Prisma model this new type represents</li> <li><code>options</code>: The config for the type being defined</li> </ol> <p>Use that method to create a\u00a0<code>\"User\"</code>\u00a0type:</p> <pre><code>// src/models/User.ts\n\nimport { builder } from \"../builder\";\n\n+builder.prismaObject(\"User\", {})\n</code></pre> <p>Note: If you press\u00a0Ctrl\u00a0+\u00a0Space\u00a0within an empty set of quotes before typing in the\u00a0<code>name</code>\u00a0field, you should get some nice auto-completion with a list of available models from your Prisma schema thanks to the Prisma plugin.</p> <p>Within the\u00a0<code>options</code>\u00a0object, add a\u00a0<code>fields</code>\u00a0key that defines the\u00a0<code>id</code>,\u00a0<code>name</code>\u00a0and\u00a0<code>messages</code>\u00a0fields using Pothos's\u00a0\"expose\"\u00a0functions:</p> <pre><code>// src/models/User.ts\nimport { builder } from \"../builder\";\n\nbuilder.prismaObject(\"User\", {\n    fields: t =&gt; ({\n        id: t.exposeID(\"id\"),\n        name: t.exposeString(\"name\"),\n        messages: t.relation(\"messages\")\n    })\n})\n</code></pre> <p>Note: Hitting\u00a0Ctrl\u00a0+\u00a0Space\u00a0when you begin to type in a field name will give you a list of fields in the target model that match the data type of the \"expose\" function you are using.</p> <p>The function above defines a GraphQL type definition and registers it in the\u00a0<code>builder</code>\u00a0instance. Generating a schema from the\u00a0<code>builder</code>\u00a0does not actually store a GraphQL schema in your file system that you can check out, however the resulting type definition for your\u00a0<code>User</code>\u00a0will look like this:</p> <pre><code>type User {\n    id: ID!\n    messages: [Message!]!\n    name: String!\n}\n</code></pre> <p>Next, add another file in the same folder named\u00a0<code>Message.ts</code>:</p> <pre><code>touch Message.ts\n</code></pre> <p>This file will be similar to the\u00a0<code>User.ts</code>\u00a0file, except it will define the\u00a0<code>Message</code>\u00a0model.</p> <p>Define the\u00a0<code>id</code>,\u00a0<code>body</code>\u00a0and\u00a0<code>createdAt</code>\u00a0fields. Note the\u00a0<code>createdAt</code>\u00a0field has the\u00a0<code>DateTime</code>\u00a0type in your Prisma schema and will need a custom configuration to define the custom\u00a0<code>date</code>\u00a0scalar type you defined:</p> <pre><code>// src/models/Message.ts\n\nimport { builder } from \"../builder\";\n\nbuilder.prismaObject(\"Message\", {\n    fields: (t) =&gt; ({\n        id: t.exposeID(\"id\"),\n        body: t.exposeString(\"body\"),\n        createdAt: t.expose(\"createdAt\", {\n            type: \"Date\",\n        }),\n    }),\n});\n</code></pre> <p>This function will result in the following GraphQL object type:</p> <pre><code>type Message {\n    body: String!\n    createdAt: Date!\n    id: ID!\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#implement-your-queries","title":"Implement your queries","text":"<p>Currently, you have object types defined for your GraphQL schema, however you have not yet defined a way to actually access that data. To do this, you first need to initialize a\u00a0<code>Query</code>\u00a0type.</p> <p>At the bottom of your\u00a0<code>src/builder.ts</code>\u00a0file, intialize the\u00a0<code>Query</code>\u00a0type using\u00a0<code>builder</code>'s\u00a0<code>queryType</code>\u00a0function:</p> <pre><code>// src/builder.ts\n// ...\nbuilder.queryType({});\n</code></pre> <p>This registers a special GraphQL type that holds the definitions for each of your queries and acts as the entry point to your GraphQL API. You define this type in the\u00a0<code>builder.ts</code>\u00a0file to ensure the query builder has a\u00a0<code>Query</code>\u00a0type defined, that way you can add query fields to it later on.</p> <p>Within this\u00a0<code>queryType</code>\u00a0function, you have the ability to add query definitions directly, however, you will define these separately within your codebase to better organize your code.</p> <p>Import the\u00a0<code>prisma</code>\u00a0instance into\u00a0<code>src/models/User.ts</code>:</p> <pre><code>// src/models/User.ts\n\nimport { builder } from \"../builder\";\nimport { prisma } from \"../db\";\n\n// ...\n</code></pre> <p>Then, using the\u00a0<code>builder</code>'s\u00a0<code>queryField</code>\u00a0function, define a\u00a0<code>\"users\"</code>\u00a0query that exposes the\u00a0<code>User</code>\u00a0object type you defined:</p> <pre><code>// src/models/User.ts\n// ...\n\n// 1\nbuilder.queryField(\"users\", (t) =&gt;\n  // 2\n  t.prismaField({\n    // 3\n    type: [\"User\"],\n    // 4\n    resolve: async (query, root, args, ctx, info) =&gt; {\n      return prisma.user.findMany({ ...query });\n    },\n  })\n);\n</code></pre> <p>The snippet above:</p> <ol> <li>Adds a field to the GraphQL schema's\u00a0<code>Query</code>\u00a0type named\u00a0<code>\"users\"</code></li> <li>Defines a field that resolves to some type in your Prisma schema</li> <li>Lets Pothos know this field will resolve to an array of your Prisma Client's\u00a0<code>User</code>\u00a0type</li> <li>Sets up a resolver function for this field.</li> </ol> <p>Note: The\u00a0<code>resolve</code>\u00a0function's\u00a0<code>query</code>\u00a0argument at the beginning of the argument list. This is a specific field Pothos populates when using\u00a0<code>prismaField</code>\u00a0function that is used to load data and relations in a performant way. This may be confusing if you come from a GraphQL background as it changes the expected order of arguments.</p> <p>In order to better visualize what took place, here is the\u00a0<code>Query</code>\u00a0type and the\u00a0<code>users</code>\u00a0query that will be generated by the code in this section:</p> <pre><code>type Query {\n  users: [User!]!\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#apply-the-graphql-schema","title":"Apply the GraphQL schema","text":"<p>You now have all of your GraphQL object types and queries defined and implemented. The last piece needed is a way to register all of these types and queries in a single place and generate the GraphQL schema based on your configurations.</p> <p>Create a new file in\u00a0<code>src</code>\u00a0named\u00a0<code>schema.ts</code>:</p> <pre><code>touch schema.ts\n</code></pre> <p>This file will simply import the models, causing the code within the files to be run, and run the\u00a0<code>builder</code>\u00a0instance's\u00a0<code>toSchema</code>\u00a0function to generate the GraphQL schema:</p> <pre><code>// src/schema.ts\n\nimport { builder } from \"./builder\";\n\nimport \"./models/Message\";\nimport \"./models/User\";\n\nexport const schema = builder.toSchema({});\n</code></pre> <p>The\u00a0<code>toSchema</code>\u00a0function generates an abstract syntax tree (AST) representation of your GraphQL schema. Below, you can see what the AST and GraphQL representations would look like:</p> <p>GraphQL</p> <pre><code>scalar Date\n\ntype Message {\n  body: String!\n  createdAt: Date!\n  id: ID!\n}\n\ntype Query {\n  users: [User!]!\n}\n\ntype User {\n  id: ID!\n  messages: [Message!]!\n  name: String!\n}\n</code></pre> <p>Over in your\u00a0<code>src/index.ts</code>\u00a0file, import the\u00a0<code>schema</code>\u00a0variable you just created. The\u00a0<code>createServer</code>\u00a0function's configuration object takes a key named\u00a0<code>schema</code>\u00a0that will accept the generated GraphQL schema:</p> <pre><code>// src/index.ts\n\nimport { createServer } from \"@graphql-yoga/node\";\nimport { schema } from \"./schema\";\n\nconst port = Number(process.env.API_PORT) || 4000\n\nconst server = createServer({\n   port,\n   schema,\n});\n\nserver.start().then(() =&gt; {\n  console.log(`\ud83d\ude80 GraphQL Server ready at http://localhost:${port}/graphql`);\n});\n</code></pre> <p>Fantastic! Your GraphQL schema has been defined using a code-first methodology, your GraphQL object and query types are in sync with your Prisma schema models, and your GraphQL server is being provided the generated GraphQL schema.</p> <p>At this point, run the server so you can play with the API:</p> <pre><code>npm run dev\n</code></pre> <p>After running the above command, open up\u00a0http://localhost:4000/graphql\u00a0in your browser to access the GraphQL playground. You should be presented with a page that looks like this:</p> <p></p> <p>In the top-left corner of the screen, hit the\u00a0Explorer\u00a0button to see your API's available queries and mutations:</p> <p></p> <p>If you click on the\u00a0users\u00a0query type, the right side of the screen will be automatically populated with a query for your user data.</p> <p>Run that query by hitting the \"execute query\" button to see the API in action:</p> <p></p> <p>Feel free to play around with the different options to choose which fields you would like to query for and which data from the \"messages\" relation you would like to include.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_3_GraphQL_API/#summary-whats-next","title":"Summary &amp; What's next","text":"<p>In this article, you built out your entire GraphQL API. The API was built in a type-safe way by taking advantage of Prisma's generated types. These, along with the Pothos Prisma plugin, allowed you to ensure the types across your ORM, GraphQL object types, GraphQL query types, and resolvers were all in sync with the database schema.</p> <p>Along the way, you:</p> <ul> <li>Set up a GraphQL server with GraphQL Yoga</li> <li>Set up the Pothos schema builder</li> <li>Defined your GraphQL object and query types</li> <li>Queried for data using Prisma Client</li> </ul> <p>In the next article, you will wrap things up by setting up code generation to keep the types on your frontend client and API in sync. Then you will deploy your finished application!</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/","title":"Part 4 Codegen and Deployment","text":"<p>In this series you are learning how to implement end-to-end type safety using React, GraphQL, Prisma, and some other helpful tools that tie those three together.</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#set-up-graphql-codegen","title":"Set up GraphQL Codegen","text":"<p>Currently, Prisma generates a set of TypeScript types based off of your database schema. Pothos uses those types to help build GraphQL type definitions. The result of those two pieces is a GraphQL schema:</p> <p></p> <p>Your frontend project currently has a set of manually defined types, which were built in the first section of this series. These are \"compatible with\" the types in your API, but not directly related:</p> <p></p> <p>Until now, this worked fine. But what happens if a new field is introduced, updated, or removed form the API? Your frontend application would have no idea a change occurred in the API and the type definitions in the two projects would become out of sync.</p> <p>How can you be sure a\u00a0<code>user</code>\u00a0object you retrieve over the network, for example, will contain all of the fields your React application is expecting? This is where\u00a0GraphQL Codegen\u00a0comes in:</p> <p></p> <p>GraphQL Codegen will generate TypeScript types and query helpers in your React project based off of your GraphQL schema and the queries you write in your frontend application.</p> <p>So the entire flow of types across your application will be as follows:</p> <ol> <li>Prisma will generate types based off of your database schema.</li> <li>Pothos will use those types to expose GraphQL types via an API.</li> <li>GraphQL Codegen will read your GraphQL schema and generate types for your frontend codebase representing what is available via the API and how to interact with it.</li> </ol>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#installation","title":"Installation","text":"<p>To get started, navigate into your React application's codebase via the terminal:</p> <pre><code> cd react-client\n</code></pre> <p>You will need a few different packages to set up GraphQL Codegen. Run the following to install the packages needed:</p> <pre><code>npm i graphqlnpm i -D @graphql-codegen/cli @graphql-codegen/typed-document-node @graphql-codegen/typescript @graphql-codegen/typescript-operations\n</code></pre> <p>Here's a brief overview of why each of these packages are needed:</p> <ul> <li><code>graphql</code>: The library that allows you to use GraphQL.</li> <li><code>@graphql-codegen/cli</code>: The CLI tool that allows you to use different plugins to generate assets from a GraphQL API.</li> <li><code>@graphql-codegen/typescript</code>: The base plugin for GraphQL Codegen TypeScript-based plugins. This plugin takes your GraphQL API's schema and generates TypeScript types for each GraphQL type.</li> <li><code>@graphql-codegen/typescript-operations</code>: The GraphQL Codegen plugin that generates TypeScript types representing queries and responses based on queries you've written.</li> <li><code>@graphql-codegen/typed-document-node</code>: The GraphQL Codegen plugin that generates an Abstract Syntax Tree (AST) representation of any queries you've written.</li> </ul> <p>Note: Don't worry too much about the nitty-gritty of these plugins. Just know that they generate TypeScript types for each GraphQL object, query and mutation type in your GraphQL schema and help make your API request type-safe.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#configuring-the-plugins","title":"Configuring the plugins","text":"<p>Now that those plugins are installed and you have a general idea of what they do, it's time to configure them.</p> <p>At the root of your project, create a new file named\u00a0<code>codegen.yml</code>. This will hold the configurations for GraphQL Codegen:</p> <pre><code>touch codegen.yml\n</code></pre> <p>There will be three configurations to fill out in this file:</p> <ol> <li><code>schema</code>: The URL of your GraphQL schema</li> <li><code>documents</code>: A blob that finds any\u00a0<code>.graphql</code>\u00a0file in your codebase</li> <li><code>generates</code>: The configuration that tells GraphQL Codegen what to generate and which plugins to use</li> </ol> <pre><code># codegen.yml\n\nschema: http://localhost:4000/graphql\ndocuments: \"./src/**/*.graphql\"\ngenerates: \n  ./src/graphql/generated.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typed-document-node\n</code></pre> <p>This configuration file lets GraphQL Codegen know a GraphQL schema is available at\u00a0<code>localhost:4000/graphql</code>, where to find your queries, and where to output the generated types using all of the plugins you installed.</p> <p>In order to actually generate the types, however, you will need to set up a script to run the generation command. Add the following script to\u00a0<code>package.json</code>:</p> <pre><code>// package.json\n{\n  // ...\n  \"scripts\": {\n    // ...\n    \"codegen\": \"graphql-codegen\"\n  }\n  // ...\n}\n</code></pre> <p>This provides a way for you to actually generate your types! You aren't quite ready yet, however.</p> <p>GraphQL Codegen won't be able to generate any types for your GraphQL queries if you don't have any queries!</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#write-a-graphql-query","title":"Write a GraphQL query","text":"<p>To keep things organized, you will write your queries in individual files within a\u00a0<code>graphql</code>\u00a0folder. Go ahead and create that folder within the\u00a0<code>src</code>\u00a0directory:</p> <pre><code>mkdir src/graphql\n</code></pre> <p>You will only need one query for this application, which will retrieve the a list of users and their messages. Create a new file within the\u00a0<code>graphql</code>\u00a0directory named\u00a0<code>users.query.graphql</code>:</p> <pre><code>touch src/graphql/users.query.graphql\n</code></pre> <p>Your applicaiton only needs a few pieces of information from the API: Each user's\u00a0<code>name</code>\u00a0and their messages\u00a0<code>body</code>\u00a0data.</p> <p>Write the following GraphQL query for that data:</p> <pre><code># src/graphql/users.query.graphql\n\nquery GetUsers {\n  users {\n    name\n    messages {\n      body\n    }\n  }\n}\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#generate-types-using-graphql-codegen","title":"Generate types using GraphQL Codegen","text":"<p>Now that you have a query to work with, you can generate the types representing your query, the response, and the types available via your API!</p> <p>Run the\u00a0<code>script</code>\u00a0you set up previously:</p> <p>Note: Make sure your GraphQL API is up and running before running the command below! You can use\u00a0<code>npm run dev</code>\u00a0within the API's directory to start the server.</p> <pre><code>npm run codegen\n</code></pre> <p>You should see output similar to this:</p> <p></p> <p>As configured in your\u00a0<code>codegen.yml</code>\u00a0file, you will find a new file in\u00a0<code>src/graphql</code>\u00a0named\u00a0<code>generated.ts</code>.</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#replace-the-manually-entered-types","title":"Replace the manually entered types","text":"<p>Now that you have types generated from the API itself, you will replace your manually written types with those types.</p> <p>Head over to\u00a0<code>src/types.ts</code>. At the very top of that file import the\u00a0<code>GetUsersQuery</code>\u00a0type from\u00a0<code>src/graphql/generated.ts</code>:</p> <pre><code>// src/types.ts\n\nimport type { GetUsersQuery } from \"./graphql/generated\";\n\n// ...\n</code></pre> <p>The reason you import this type instead of the full\u00a0<code>User</code>\u00a0and\u00a0<code>Note</code>\u00a0types is that the\u00a0<code>GetUsersQuery</code>\u00a0type has access to a more specific set of types that contain only the fields your query retrieves.</p> <p>Replace the existing types in that file with the following to expose the types representing your query results:</p> <pre><code>// src/types.ts\nimport type { GetUsersQuery } from \"./graphql/generated\";\n\nexport type Message = GetUsersQuery[\"users\"][0][\"messages\"][0];\nexport type User = GetUsersQuery[\"users\"][0];\n</code></pre> <p>If you head over to\u00a0<code>src/components/UserDisplay.tsx</code>\u00a0and inspect the type being used for the\u00a0<code>user</code>\u00a0prop, you will now see it uses the type generated from your GraphQL query and API:</p> <p></p> <p>You now have almost every piece of the end-to-end type-safety puzzle put in place. Your types are in sync from your database all the way to your frontend application.</p> <p>The only thing missing is actually digesting your API rather than using static data. You will want to do this in a type-safe way to ensure you are querying only for data that exists in your API and retrieving all of the fields your frontend expects.</p> <p>GraphQL Codegen already generated the types and query objects required to do this. You just need to use them!</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#install-and-set-up-urql","title":"Install and set up urql","text":"<p>To query your GraphQL API you will use\u00a0urql, a GraphQL client library that allows you to easily query a GraphQL API and integrates with React.</p> <p>You will first need to install the dependency:</p> <pre><code>npm i urql\n</code></pre> <p>This library provides you with two exports you will need: A\u00a0<code>Provider</code>\u00a0component and a\u00a0<code>createClient</code>\u00a0function.</p> <p>You will need to use the\u00a0<code>Provider</code>\u00a0and\u00a0<code>createClient</code>\u00a0functions to provide urql to your application. In\u00a0<code>src/main.tsx</code>, import those from the urql library:</p> <pre><code>// src/main.tsx\n\n// ...\nimport { createClient, Provider } from 'urql';\n\n// ...\n</code></pre> <p>Next, use the\u00a0<code>createClient</code>\u00a0function to create an instance of the urql client. The client takes in a configuration object with a\u00a0<code>url</code>\u00a0key, which points to your GraphQL API's url.</p> <p>While developing locally this should be\u00a0<code>http://localhost:4000/graphql</code>, however once the API is deployed this will need to change. Use an environment variable allow you to provide an API url via the environment, while falling back to the localhost URL in development:</p> <pre><code>// src/main.tsx\n\n// ...\n\nconst client = createClient({\n  url: import.meta.env.VITE_API_URL || 'http://localhost:4000/graphql',\n});\n\n// ...\n</code></pre> <p>The last step to provide urql to your application is to wrap your\u00a0<code>App</code>\u00a0component in the urql\u00a0<code>Provider</code>\u00a0component and pass that component the instantiated client:</p> <pre><code>// src/main.tsx\n\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\nimport { createClient, Provider } from 'urql';\n\nconst client = createClient({\n  url: import.meta.env.VITE_API_URL || 'http://localhost:4000/graphql',\n});\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  &lt;React.StrictMode&gt;\n    &lt;Provider value={client}&gt;\n      &lt;App /&gt;\n    &lt;/Provider&gt;\n  &lt;/React.StrictMode&gt;\n)\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#query-your-data","title":"Query your data","text":"<p>You can now use urql to query your data! Head over to\u00a0<code>src/App.tsx</code>\u00a0and import the\u00a0<code>useQuery</code>\u00a0function from urql. Also import the\u00a0<code>GetUsersDocument</code>\u00a0object from\u00a0<code>graphql/generated.ts</code>, as this will contain the AST representation of your query:</p> <pre><code>// src/App.tsx\n\n// ...\n\nimport { useQuery } from 'urql'\nimport { GetUsersDocument } from './graphql/generated'\n\n// ...\n</code></pre> <p>Within the\u00a0<code>App</code>\u00a0function, you can now replace the static variable and data with the following query:</p> <pre><code>// src/App.tsx\n\n// ...\n\nfunction App() {\n  const [results] = useQuery({\n    query: GetUsersDocument\n  })\n\n  // ...\n}\n\n// ...\n</code></pre> <p>This uses the\u00a0<code>GetUserDocument</code>\u00a0query object to request data from your API and return it in a properly typed variable.</p> <p>You no longer need the\u00a0<code>User</code>\u00a0type import because the typing is already being specified in the\u00a0<code>GetUsersDocument</code>\u00a0object. You will also need to adjust the code used to map over each user in the JSX, as the query results are now returned in a nested object. The resulting file should look as follows:</p> <pre><code>// src/App.tsx\n\nimport UserDisplay from './components/UserDisplay'\nimport { useQuery } from 'urql'\nimport { GetUsersDocument } from './graphql/generated'\n\nfunction App() {\n  const [results] = useQuery({\n    query: GetUsersDocument\n  })\n\n  return (\n    &lt;div className=\"bg-zinc-800 flex-col h-screen w-full flex items-center justify-center p-4 gap-y-12 overflow-scroll\"&gt;\n      {\n        results.data?.users.map((user, i) =&gt; &lt;UserDisplay user={user} key={i}/&gt;)\n      }\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Notice your API request results are properly typed based off of the types within the API itself! If both your API and Client are running, head over to the browser. You should now see all of your data!</p> <p></p> <p>Congrats! \ud83c\udf89 At this point, you have implemented a completely end-to-end type safe application with two separate pieces: an API and the client.</p> <p>The only thing left to do is deploy the project so you can share it!</p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#push-your-projects-to-github","title":"Push your projects to Github","text":"<p>You will be using\u00a0Render\u00a0to deploy both of your codebases. Before doing so, however, you need to host your code on Github.</p> <p>Note: If you don't already have a Github account, you can create one for free\u00a0here.</p> <p>In the top left corner of the home page, hit the\u00a0New\u00a0button to create a new repository:</p> <p></p> <p>Give your repository a name and then hit\u00a0Create repository:</p> <p></p> <p>You will need to retrieve the SSH url for this repository to use later on. Grab that from the location shown below:</p> <p></p> <p>Now within your React application, run the follwing command to initialize and push a local repository, replacing\u00a0<code>&lt;url&gt;</code>\u00a0with the SSH url:</p> <p>CommandsExample</p> <pre><code>git init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin &lt;url&gt; \ngit push -u origin main\n</code></pre> <p>Next, you will repeat these steps for your API's codebase. Create another new repository from your Github dashboard:</p> <p></p> <p>Title the repository and hit\u00a0Create repository:</p> <p></p> <p>You should again see a page with some setup instructions. Grab the SSH url from the same location as before:</p> <p></p> <p>Finally, navigate via the terminal into your GraphQL API's codebase and run the following set of commands. Again, replace\u00a0<code>&lt;url&gt;</code>\u00a0with your SSH url:</p> <p>CommandsExample</p> <pre><code>git init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin &lt;url&gt; \ngit push -u origin main\n</code></pre>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#deploy-the-api","title":"Deploy the API","text":"<p>Now that your code is available on Github, you can deploy your codebases!</p> <p>Head over to\u00a0Render\u00a0and create a free account if you do not already have one.</p> <p>The first thing you will deploy is your GraphQL API. On your dashboard, hit the\u00a0New Web Service\u00a0button, which will allow you to deploy a Node.js application:</p> <p></p> <p>On this page, if you haven't already, click\u00a0+ Connect account\u00a0under the\u00a0Github\u00a0header to give Render access to list your Github repositories:</p> <p></p> <p>After connecting your account, you should see your repositories available under the\u00a0Connect a repository\u00a0header. Choose your GraphQL API repository.</p> <p>You will be prompted for a few different options:</p> <ol> <li>name: Pick any name you'd like</li> <li>Environment:\u00a0<code>Node</code></li> <li>Region: Stick with the default</li> <li>Branch:\u00a0<code>main</code></li> <li>Build Command:\u00a0<code>npm run build</code></li> <li>Start Command:\u00a0<code>npm run dev</code></li> </ol> <p>Beneath those options, choose the\u00a0Free\u00a0plan:</p> <p></p> <p>Expand the\u00a0Advanced\u00a0section near the bottom of the page. Here you will define an environment variable that will hold your database URL.</p> <p>Click the\u00a0Add Environment Variable\u00a0button and add a variable named\u00a0<code>DATABASE_URL</code>\u00a0whose value is the connection string to your Postgres database:</p> <p></p> <p>Finally, at the bottom of the page, hit the\u00a0Create Web Service\u00a0button:</p> <p></p> <p>This will trigger the deployment process! Once that finishes deploying, you will be able to access the URL Render provides to see your GraphQL API.</p> <p>Copy the URL from the location shown below and navigate to it in a new browser window at the\u00a0<code>/graphql</code>\u00a0route:</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#deploy-the-react-application","title":"Deploy the React application","text":"<p>Now that your API is deployed, you will deploy your React application.</p> <p>Head back over to the Render dashboard and hit the\u00a0New\u00a0button at the top of the page. Choose the\u00a0Static Site\u00a0option:</p> <p></p> <p>Connect this static site to your React application's Github repostory.</p> <p>You will be prompted again to fill out some details for deploying this application:</p> <ol> <li>name: Pick any name you'd like</li> <li>Branch:\u00a0<code>main</code></li> <li>Build Command:\u00a0<code>npm run build</code></li> <li>Publish directory:\u00a0<code>dist</code></li> </ol> <p>Under the\u00a0Advanced\u00a0section, add an environment variable named\u00a0<code>VITE_API_URL</code>\u00a0whose value is the URL of your deployed GraphQL API at the\u00a0<code>/graphql</code>\u00a0route. For example:</p> <p></p> <p>Finally, hit the\u00a0Create Static Site\u00a0button at the bottom of the page to deploy the application.</p> <p>When that finishes deploying, head over to the URL available at the top of the page. If all went well, you should see your application is live!</p> <p></p>"},{"location":"Code/How_to_GraphQL/Tutorial/Part_4_Codegen_and_Deployment/#summary-final-thoughts","title":"Summary &amp; Final thoughts","text":"<p>In this article, you finished up your application and deployed it! Along the way you:</p> <ul> <li>Set up GraphQL Codegen to keep your TypeScript types in sync across your entire stack</li> <li>Published both of your codebases to Github</li> <li>Deployed both of your applications using Render</li> </ul> <p>In this series, you walked through every step of building a fully type-safe application using Prisma, GraphQL, and React as the main technologies. The power of all the tools you used combined is pretty amazing and allows you to build a scalable, safe application.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/","title":"How to Next.js","text":""},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-core-concepts","title":"Next.js Core Concepts","text":""},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs","title":"Next.js","text":"<p>Next.js is a React framework that supports the development of robust web applications. It provides key features such as routing, rendering, data fetching, server components, and optimization. These features enable high-performing, scalable, and search-engine-friendly web applications.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-rendering","title":"Next.js Rendering","text":"<p>Rendering is the process of converting code into viewable user interfaces. In Next.js, different rendering strategies can be adopted depending on the application\u2019s requirements.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-rendering-strategies","title":"Next.js Rendering Strategies","text":"<p>Next.js enables developers to employ various rendering strategies, allowing the creation of hybrid web applications. These strategies allow developers to decide the rendering environment for individual components. The primary environments supported by Next.js are server-side and client-side rendering.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#server-side-rendering","title":"Server-side Rendering","text":"<p>In server-side rendering, the server infrastructure is used to render the webpage content. Then, a viewable, non-interactive webpage is sent to the client.</p> <p>In Next.js, components are server-side rendered by default using server components. No additional configuration is necessary.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#client-side-rendering","title":"Client-side Rendering","text":"<p>In client-side rendering, the server sends the client all the necessary files for a webpage. The client uses the instructions to render the components on the browser and enable interactivity.</p> <p>In Next.js, a component can be marked for client-side rendering with the\u00a0<code>'use client'</code>\u00a0directive.</p> <pre><code>'use client'\n\nfunction MyComponent() { \n    return &lt;div&gt;Hello, World!&lt;/div&gt;; \n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#create-next-app","title":"<code>create-next-app</code>","text":"<p>A Next.js project can be created with the CLI tool\u00a0<code>create-next-app</code>. It starts an interactive setup experience and generates a basic project structure and configuration when used.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-app-router","title":"Next.js App Router","text":"<p>Next.js uses the App Router, providing routing for the web application based on the\u00a0<code>/app</code>\u00a0directory. Each folder name determines a route that exists. To make the route accessible, a\u00a0<code>page.tsx</code>\u00a0file must live in the directory.</p> <p>To make the\u00a0<code>/</code>\u00a0path accessible, the file structure must look like this:</p> <pre><code>\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 page.tsx\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#css-modules","title":"CSS Modules","text":"<p>Next.js supports multiple ways of styling the web app. It supports CSS modules, allowing a locally scoped styling method.</p> <pre><code>import styles from './MyComponent.module.css'; \n\nfunction MyComponent() { \n    return &lt;div className={styles.myClass}&gt;Hello World&lt;/div&gt;; \n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-hydration","title":"Next.js Hydration","text":"<p>After webpages are server-side rendered, they are made interactive on the client through hydration.</p> <p>Hydration executes the bundled JavaScript, attaching event handlers and linking the React components to their HTML counterparts. Reconciliation is performed to compare the results made on the client with those sent by the server, ensuring they\u2019re in sync.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-routing","title":"Next.js Routing","text":""},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-app-router_1","title":"Next.js App Router","text":"<p>In Next.js, the App Router is used to define and structure an application\u2019s routes and their UIs. It is defined by creating a folder named\u00a0<code>app</code>\u00a0at the project\u2019s root level.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-folders-and-reserved-files","title":"Next.js Folders and Reserved Files","text":"<p>In the Next.js App Router, folders define path segments, and reserved files within, like\u00a0<code>page.tsx</code>, define that segment\u2019s UI.</p> <pre><code>\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 users               /users\n\u2502   \u2502   \u251c\u2500\u2500 page.tsx          UI\n\u2502   \u251c\u2500\u2500settings             /settings\n\u2514\u2500\u2500 \u2502   \u251c\u2500\u2500 page.tsx          UI\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-nested-routes","title":"Next.js Nested Routes","text":"<p>In Next.js, nested routes can be created by creating nested folders.</p> <pre><code>\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 users\n\u2502   \u2502   \u251c\u2500\u2500 profiles        /users/profiles\n\u2514\u2500\u2500 \u2502   \u2502   \u251c\u2500\u2500 page.tsx      UI\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#composition-of-url-paths","title":"Composition of URL Paths","text":"<p>A URL path is composed of path segments and comes after the URL domain.</p> <p>For example, in the URL\u00a0<code>https://www.codecademy.com/catalog/language/javascript</code>:</p> <ul> <li><code>codecademy.com</code>\u00a0is the domain.</li> <li><code>/catalog/language/javascript</code>\u00a0is the path.</li> <li><code>/catalog</code>,\u00a0<code>/language</code>, and\u00a0<code>/javascript</code>\u00a0are path segments.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-navigation","title":"Next.js Navigation","text":"<p>Next.js provides SPA-like navigation with the\u00a0<code>useRouter()</code>\u00a0hook and\u00a0<code>&lt;Link&gt;</code>\u00a0component.</p> <p>The\u00a0<code>useRouter()</code>\u00a0hook returns a\u00a0<code>router</code>\u00a0object which contains methods like\u00a0<code>push(path)</code>,\u00a0<code>back()</code>, and\u00a0<code>forward()</code>\u00a0for navigation.</p> <p>The\u00a0<code>&lt;Link&gt;</code>\u00a0component extends the\u00a0<code>&lt;a&gt;</code>\u00a0element by adding features like prefetching.</p> <pre><code>'use client'\n\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\n\nexport default function MyPage() {\n    const router = useRouter()\n    return (\n        &lt;div&gt;\n            &lt;Link href=\"/\"&gt;Home&lt;/Link&gt;\n          &lt;button onClick={router.back}&gt;Back&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-pagetsx","title":"Next.js\u00a0<code>page.tsx</code>","text":"<p>In Next.js, a\u00a0<code>page.tsx</code>\u00a0is a reserved file that defines a unique UI for its containing path segment and makes it accessible.</p> <p>To use\u00a0<code>page.tsx</code>, you must default export a React component.</p> <pre><code>// in page.tsx in the folder /app/settings\n\nexport default function SettingsPage() {\n    return (\n        &lt;h1&gt;Your Settings&lt;/h1&gt;\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-layouttsx-and-templatetsx","title":"Next.js\u00a0<code>layout.tsx</code>\u00a0and\u00a0<code>template.tsx</code>","text":"<p>In Next.js,\u00a0<code>layout.tsx</code>\u00a0and\u00a0<code>template.tsx</code>\u00a0are reserved files used to create shared UIs.</p> <p>Similarities include:</p> <ul> <li>Requiring a default export React component.</li> <li>Exported component receives a\u00a0<code>children</code>\u00a0prop of type\u00a0<code>ReactNode</code>.</li> <li>Wraps other reserved files and nested routes.</li> </ul> <p>Differences include:</p> <ul> <li>A\u00a0<code>template.tsx</code>\u00a0component will be re-instantiated while\u00a0<code>layout.tsx</code>\u00a0component will not.</li> <li>At least one root\u00a0<code>layout.tsx</code>\u00a0returning the\u00a0<code>&lt;html&gt;</code>\u00a0and\u00a0<code>&lt;body&gt;</code>\u00a0elements is required in the App Router.</li> </ul> <pre><code>// In root layout.tsx\n\nexport default function RootLayout({children}: { children: React.ReactNode}) {\n    return (\n        &lt;html&gt;\n              &lt;body&gt;\n                   &lt;h1&gt;Root Layout&lt;/h1&gt;\n                   {children}\n              &lt;/body&gt;\n        &lt;/html&gt;\n    )\n}\n</code></pre> <pre><code>// In template.tsx\n\nexport default function Template({children}: {children: React.ReactNode}) {\n    return (\n        &lt;h2&gt;Template Layout&lt;/h2&gt;\n        {children}\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-dynamic-segments","title":"Next.js Dynamic Segments","text":"<p>In Next.js, a dynamic segment is created by wrapping a folder\u2019s name in square brackets, for example,\u00a0<code>/app/users/[userId]</code>.</p> <p>The\u00a0<code>page.tsx</code>\u00a0component exported from this folder will receive a\u00a0<code>params</code>\u00a0prop which will contain the dynamic segment data (as a\u00a0<code>string</code>) and be referenced using the dynamic segment folder name (<code>userId</code>).</p> <pre><code>// In /app/users/[userId]/page.tsx\n\nexport default function UserPage({ params }: { params: { userId: string }}) {\n    const userId = params.userId  // Access dynamic segment data\n    return (\n        &lt;h2&gt;My User Page for: {userId}&lt;/h2&gt;\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-catch-all-dynamic-segment","title":"Next.js Catch-all Dynamic Segment","text":"<p>In Next.js, dynamic segments can be further modified to be made catch-all and optional. A catch-all segment is created by prefixing a dynamic segment with ellipses like\u00a0<code>/app/articles/[...articleIds]</code>.</p> <p>A catch-all segment\u2019s\u00a0<code>page.tsx</code>\u00a0component will receive a\u00a0<code>params</code>\u00a0prop containing the dynamic data as an array of\u00a0<code>string</code>s referenced using the dynamic folder name (<code>articleIds</code>).</p> <p>To make the catch-all dynamic segment optional, you wrap it in another pair of square brackets like:\u00a0<code>/app/articles/[[...articleIds]]</code>.</p> <pre><code>// In /app/articles/[[...articleIds]]/page.tsx\n\nexport default function ArticlesPage({ params }: { params: { articleIds: string[]}}) {\n    const articleIds = params.articleIds  // Retrieve dynamic segment data\n\n    return (\n        &lt;&gt;\n            &lt;h2&gt;Articles&lt;/h2&gt;\n            {articleIds.map(id =&gt; (&lt;p&gt;Article Id is: {id}&lt;/p&gt;))}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-reserved-files","title":"Next.js Reserved Files","text":"<p>Next.js reserves special files used to define UIs by default exporting a React component. Some of the special files include:</p> <ul> <li><code>layout.tsx</code>: Defines a shared UI.</li> <li><code>template.tsx</code>: Defines a shared UI.</li> <li><code>error.tsx</code>: Defines an\u00a0<code>ErrorBoundary</code>\u00a0fallback UI.</li> <li><code>loading.tsx</code>: Defines a\u00a0<code>Suspense</code>\u00a0fallback UI.</li> <li><code>not-found.tsx</code>: Defines an\u00a0<code>ErrorBoundary</code>\u00a0fallback UI for an unknown segment or nested segments.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-reserved-file-component-hierarchy","title":"Next.js Reserved File Component Hierarchy","text":"<p>Next.js defines a component hierarchy for reserve file components. The hierarchy is:</p> <ol> <li><code>layout.tsx</code></li> <li><code>template.tsx</code></li> <li><code>error.tsx</code></li> <li><code>loading.tsx</code></li> <li><code>not-found.tsx</code></li> <li><code>page.tsx</code></li> </ol> <p>Any nested hierarchy will be placed within the hierarchy of its parent.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-server-components","title":"Next.js Server Components","text":""},{"location":"Code/How_to_Next.js/How_to_Next.js/#hybrid-rendering","title":"Hybrid Rendering","text":"<p>Next.js applications offer patterns to combine Server and Client Components for managing static and dynamic content effectively.</p> <ul> <li>Client Components can be directly imported into Server Components.</li> <li>Server Components must be passed into Client Components as props for decoupled rendering.</li> </ul> <pre><code>// Example of using Client and Server Components together\n\nimport ClientComponent from './ClientComponent';\n\nexport default function ServerComponent() {\n    return (\n        &lt;div&gt;\n            &lt;ClientComponent /&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#integration-of-server-within-client-components","title":"Integration of Server within Client Components","text":"<p>In Next.js, Server Components cannot be directly imported into Client Component modules. Instead, they should be passed through a prop for independent rendering. This decoupled approach ensures that server-side logic remains separate from client-side execution.</p> <pre><code>// ClientComponent.tsx\n'use client';\n\nexport default function ClientComponent({ children }: { children: React.ReactNode }) {\n    return &lt;div&gt;{children}&lt;/div&gt;;\n}\n</code></pre> <pre><code>// Page.tsx\n\nimport ClientComponent from './ClientComponent.tsx';\nimport ServerComponent from './ServerComponent.tsx';\n\nexport default function Page() {\n    return (\n        &lt;ClientComponent&gt;\n            &lt;ServerComponent /&gt;\n        &lt;/ClientComponent&gt;\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-server-components_1","title":"Next.js Server Components","text":"<p>In Next.js, Server Components, also referred to as React Server Components (RSCs), are the default component type. They optimize load times and enhance SEO efficiency by rendering on the server.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#rendering-server-components","title":"Rendering Server Components","text":"<p>Server Components are rendered through a server-client coordination process.</p> <p>When a request is received:</p> <ul> <li>Next.js configures the environment for route-specific React components.</li> <li>Rendering work is segmented into smaller units, or chunks, based on route segments.</li> <li>Chunks are converted into the React Server Component Payload (RSC Payload).</li> <li>The server sends the HTML and RSC Payload to the client.</li> <li>Upon receiving the rendering data, React utilizes the RSC Payload to update the browser\u2019s DOM, synchronizing server-rendered components with their client-side counterparts.</li> <li>Client Components are loaded and made interactive through JavaScript hydration.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#rendering-strategies","title":"Rendering Strategies","text":"<p>Next.js offers three rendering strategies:\u00a0static,\u00a0dynamic, and\u00a0streaming. These strategies enable efficient content distribution, real-time content generation, and improved load times, respectively. Developers can adjust settings to balance between serving static and dynamic responses.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#static-rendering","title":"Static Rendering","text":"<p>Static rendering in Next.js pre-generates pages at build time and can be cached and distributed via a CDN. This approach efficiently caches content, reducing server load, and is ideal for static, unchanging content.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#dynamic-rendering","title":"Dynamic Rendering","text":"<p>Dynamic rendering in Next.js generates real-time content per request, making it suitable for personalized or time-sensitive content. However, this approach may slow response time due to its resource-intensive nature.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#streaming-in-nextjs","title":"Streaming in Next.js","text":"<p>Streaming in Next.js enhances load times by progressively sending UI chunks to the client. This feature allows users to interact with parts of the page as they become available. It\u2019s especially useful for pages with delayed data fetching, enabling immediate display of available content.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#server-components-implementation","title":"Server Components Implementation","text":"<p>In Next.js, implementing Server Components involves creating a React component, with Next.js automatically handling the server-side rendering process.</p> <pre><code>import React from 'react';\n\n// Server Component for displaying item details\nexport default function ItemDetails({ itemId }: { itemId: ItemIdType }) {\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;Item: {itemId.name}&lt;/h2&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#benefits-of-server-components","title":"Benefits of Server Components","text":"<p>Server Components in Next.js offer multiple advantages:</p> <ul> <li>They execute server-side, reducing client-side load by excluding them from the JavaScript bundle.</li> <li>They fetch data server-side, optimizing application performance by offloading tasks to the server.</li> <li>Server Components transmit only necessary output to the client, enhancing efficiency and reducing bandwidth consumption.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#suspense-with-fallback-components","title":"Suspense with Fallback Components","text":"<p>React Suspense and Fallback Components, when used alongside Next.js Server Components, enable developers to define custom Suspense Boundaries. This enhances user interaction by suspending rendering during loading and displaying placeholders like loaders or skeleton screens.</p> <pre><code>import { Suspense } from 'react';\n\n// Define a fallback component\nconst FallbackComponent = () =&gt; &lt;p&gt;Loading...&lt;/p&gt;;\n\nfunction MyComponent() {\n    return (\n        &lt;Suspense fallback={&lt;FallbackComponent /&gt;}&gt;\n            ...\n        &lt;/Suspense&gt;\n    );\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#roles-of-server-and-client-components","title":"Roles of Server and Client Components","text":"<p>Server Components efficiently handle data and backend interactions, while Client Components focus on interactivity and state management. Understanding and applying these distinct roles optimizes server-side efficiency and user experience in Next.js applications.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-data-fetching","title":"Next.js Data Fetching","text":""},{"location":"Code/How_to_Next.js/How_to_Next.js/#data-fetching","title":"Data Fetching","text":"<p>In a Next.js app, data fetching can occur both on the server and the client. While client-side data fetching may be necessary in some cases, data fetching on the server should be prioritized.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#server-side-data-fetching","title":"Server-Side Data Fetching","text":"<p>In Next.js applications, data fetching should ideally occur on the server due to several benefits:</p> <ul> <li>The server has direct access to the database, ensuring efficient data retrieval.</li> <li>Fetching data on the server reduces client-server waterfalls, optimizing performance.</li> <li>Server components enable data fetching and rendering in the same environment, enhancing efficiency.</li> <li>Security is increased as sensitive data can remain unexposed to the client, reducing the risk of data breaches.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#route-handlers-in-nextjs","title":"Route Handlers in Next.js","text":"<p>Route Handlers in Next.js are used to define custom request handlers responsible for fetching data and preparing responses for client interactions. These handlers are typically defined in the\u00a0<code>/app</code>\u00a0directory and are structured to handle various HTTP methods such as\u00a0<code>GET</code>,\u00a0<code>POST</code>, and\u00a0<code>PUT</code>.</p> <pre><code>export async function GET() {\n    const response = await fetch('https://api.example.com/data');\n\n    if (!response.ok) {\n        throw new Error('Failed to fetch data.');\n    }\n\n    const data = await response.json();\n    return data;\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#fetch-calls-in-server-components","title":"Fetch Calls in Server Components","text":"<p>In Next.js applications,\u00a0<code>fetch</code>\u00a0calls can be directly used within server components, enabling seamless data retrieval and processing on the server side. However, this practice can potentially lead to the exposure of sensitive data when not used in conjunction with the\u00a0<code>'server-only'</code>\u00a0package.</p> <pre><code>// Example of fetch call within a Server Component\n\nexport async function MyServerComponent() {\n    const response = await fetch('https://api.example.com/data', { cache: 'no-store' });\n\n    if (!response.ok) {\n        throw new Error('Failed to fetch data.');\n    }\n\n    const data = await response.json();\n    // Additional logic for the component\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#server-only-package","title":"<code>'server-only'</code>\u00a0Package","text":"<p>The\u00a0<code>'server-only'</code>\u00a0package serves to prevent server-only code from being transmitted to the client in Next.js applications.</p> <p>Using the\u00a0<code>'server-only'</code>\u00a0package can ensure that sensitive server-side logic or resources remain exclusive to the server environment, enhancing security and minimizing the risk of exposing critical information to clients.</p> <pre><code>// Example of using the 'server-only' package\n\nimport 'server-only';\n\n// Server-only code here\nexport async function MyServerComponent() {\n\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#cache-control-in-data-fetching","title":"Cache Control in Data Fetching","text":"<p>Next.js automatically caches fetched data by default. To disable caching, include\u00a0<code>cache: 'no-store'</code>\u00a0in the options object of a\u00a0<code>fetch</code>\u00a0call.</p> <p>Disabling caching ensures that data is fetched freshly from the server each time, preventing stale data issues in Next.js applications.</p> <pre><code>const response = await fetch('https://api.example.com/data', {\n    cache: 'no-store',\n});\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#sequential-data-fetching-pattern","title":"Sequential Data Fetching Pattern","text":"<p>When using the sequential data fetching pattern, requests create waterfalls as they happen one after the other. This approach is used when one data fetch depends on the result of another.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#parallel-data-fetching-pattern","title":"Parallel Data Fetching Pattern","text":"<p>In the parallel data fetching pattern, requests within a route occur simultaneously, without waiting for one request to complete before starting another. This approach makes it easier to fetch multiple resources concurrently, leading to faster performance and better user experience.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#optimizing-parallel-data-fetching","title":"Optimizing Parallel Data Fetching","text":"<p>The parallel data fetching pattern can be optimized by preloading data. By creating a function, such as\u00a0<code>preload()</code>, data can be fetched and cached before it needs to be rendered.</p> <pre><code>// utils/getPosts.tsx\n\nimport { cache } from 'react';\nimport 'server-only';\n\nexport const preload = () =&gt; {\n    void getPosts();\n};\n\nexport const getPosts = cache(async () =&gt; {\n    const response = await fetch('https://api.com/some/route');\n    // more fetch logic\n});\n</code></pre> <pre><code>// In a component file\n\nimport { preload } from '../utils/getPosts';\nimport Posts from '../components/Posts/Posts';\n\nexport default function Home() {\n    preload();\n    return (\n        &lt;Posts /&gt;\n    );\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#cached-data-revalidation","title":"Cached Data Revalidation","text":"<p>Next.js enables cached data revalidation through two methods:</p> <ul> <li>Time-based Revalidation:\u00a0Set the interval for data revalidation.</li> <li>On-demand Revalidation:\u00a0Group data by path or tag, updating it collectively upon specific event triggers.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#time-based-revalidation","title":"Time-based Revalidation","text":"<p>Time-based revalidation in Next.js allows for the automatic revalidation of cached data after a specified duration, measured in seconds. By setting the\u00a0<code>next.revalidate</code>\u00a0option in a fetch call, developers can control how frequently data is refreshed to ensure its accuracy and timeliness.</p> <pre><code>const response = await fetch('https://api.com/some/route', {\n    next: { revalidate: 30 } // Revalidate data every 30 seconds\n});\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#server-action-in-nextjs","title":"Server Action in Next.js","text":"<p>A Server Action is an asynchronous function executed on the server. It is created using the\u00a0<code>'use server'</code>\u00a0directive. This enables specific tasks to be executed on the server side, such as data revalidation or fetching.</p> <pre><code>'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function updatePost() {\n    // Revalidate cached data with the 'posts' tag\n    revalidateTag('posts')\n}\n</code></pre> <pre><code>// The component that uses the updatePost() Server Action\nimport { updatePost } from './actions';\n\nexport default function EditPost() {\n    // Component logic here\n\n    return (\n        &lt;form action={updatePost}&gt;\n            &lt;button type=\"submit\"&gt;Update&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#on-demand-revalidation","title":"On-Demand Revalidation","text":"<p>On-demand revalidation ensures data freshness by updating cached data selectively when specific events occur. This optimization technique allows developers to control data revalidation either by path or tag, providing precise control over data fetching.</p> <p>The\u00a0<code>revalidateTag()</code>\u00a0function from\u00a0<code>next/cache</code>\u00a0enables developers to trigger revalidation of cached data associated with a particular tag.</p> <pre><code>'use server'\n\nimport { revalidateTag } from 'next/cache';\n\n// Server action to update cached data with a specific tag\nexport async function updateCachedData() {\n    revalidateTag('blogs'); // Revalidate cached data with the 'blogs' tag\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#loading-uis","title":"Loading UIs","text":"<p>Loading UIs provides visual feedback to users, indicating that data is being fetched, as fetching large amounts of data can take time. These UIs, like spinners, skeletons, progress indicators, or loading messages, serve as instant loading states, replacing segments while data loads.</p> <pre><code>//loading.tsx\n\nexport default function Loading(){\n    return (\n        &lt;p&gt;Loading data...&lt;/p&gt;\n    )\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#streaming-using-suspense-boundaries","title":"Streaming using\u00a0<code>&lt;Suspense&gt;</code>\u00a0boundaries","text":"<p>Streaming using\u00a0<code>&lt;Suspense&gt;</code>\u00a0boundaries allows a web app to progressively render and incrementally stream parts of the UI to the client, enhancing user experience by displaying content as it becomes available.</p> <pre><code>&lt;Suspense fallback={&lt;Loading /&gt;} &gt;\n    &lt;UserPosts /&gt;\n&lt;/Suspense&gt;\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#server-only-forms-with-server-actions","title":"Server-Only Forms With Server Actions","text":"<p>Server-only forms can be created in a server component using Server Actions to efficiently manage form submissions by retrieving, validating, and processing user data on the server side.</p> <pre><code>// components/FeedbackForm/actions.ts\n'use server'  \nimport { redirect } from 'next/navigation'\n\nexport async function handleFeedback(formData: FormData) {\n    // process form data\n    redirect('/feedback/thankyou');\n}  \n</code></pre> <pre><code>// components/FeedbackForm/FeedbackForm.tsx  \nimport { handleFeedback } from './actions'\n\nexport default function FeedbackForm() {\n    return (\n        &lt;form action={handleFeedback}&gt;\n            {/* form fields */}\n            &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-optimization","title":"Next.js Optimization","text":"<p>Web applications should prioritize providing quality and optimized end-user experiences. Optimization of web applications with Next.js revolves around enhancing loading speed, minimizing interactivity delays, and ensuring visual consistency.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#largest-contentful-paint-lcp","title":"Largest Contentful Paint (LCP)","text":"<p>Largest Contentful Paint (LCP) is the time from the start of the navigation until the largest block of content is visible to the user. The LCP should be visible within 2.5 seconds of the page initially loading. The LCP can be any element, including a large text block, video, or image.</p> <p></p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#first-input-delay-fid","title":"First Input Delay (FID)","text":"<p>First Input Delay (FID) is the time from when the user first interacts to the time when the browser begins processing the events. The FID should take no longer than 0.1 seconds or 100ms. Interactions can include the following actions:</p> <ul> <li>user clicking a link</li> <li>user tapping on a button</li> <li>calling a custom, JavaScript-powered control on an interaction</li> </ul> <p></p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#cumulative-layout-shift-cls","title":"Cumulative Layout Shift (CLS)","text":"<p>Cumulative Layout Shift (CLS) measures the largest burst of layout shift for every unexpected layout during the lifespan of a page. A layout shift occurs any time a visible element changes its position from one rendered frame to the next. Layout shift is calculated using the following formula:</p> <p><code>layout shift score = impact fraction * distance fraction</code></p> <p>CLS should score less than 0.1.</p> <p></p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-script-optimization","title":"Next.js Script Optimization","text":"<p>Next.js\u2019 built-in\u00a0<code>next/script</code>\u00a0Component\u00a0helps with loading third-party scripts, only loading them one time even if the user navigates between pages. There are four strategies to fine-tune script execution:</p> <ul> <li><code>beforeInteractive</code>: Load the script before any Next.js code and before any page hydration occurs.</li> <li><code>afterInteractive</code>: (default) Load the script early, but after some hydration on the page occurs.</li> <li><code>lazyOnload</code>: Load the script later during the browser\u2019s idle time.</li> <li><code>worker</code>: (experimental) Load the script in a web worker.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-font-optimization","title":"Next.js Font Optimization","text":"<p>Next.js\u2019 built-in\u00a0<code>next/font</code>\u00a0Component\u00a0adds web fonts with zero layout shift and zero requests to Google. Next.js uses font loading for both Google fonts and local fonts. Next.js also provides the capability to preload and reuse fonts efficiently in your application.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-image-optimization","title":"Next.js Image Optimization","text":"<p>Next.js\u2019 built-in\u00a0<code>next/image</code>\u00a0Component\u00a0extends the HTML\u00a0<code>&lt;img&gt;</code>\u00a0element to include automatic image optimization. Image optimization focuses on:</p> <ul> <li>Size Optimization: Automatically serve correctly sized images for each device.</li> <li>Visual Stability: Prevent layout shift automatically when images are loading.</li> <li>Faster Page Loads: Images are only loaded when they enter the viewport using native browser lazy loading.</li> <li>Asset Flexibility: On-demand image resizing, even for images stored on remote servers.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-optimization-tools","title":"Next.js Optimization Tools","text":"<p>Next.js has built-in tools to optimize images, fonts, scripts, and metadata.</p> <ul> <li>Images:\u00a0<code>next/image</code></li> <li>Fonts:\u00a0<code>next/font/google</code>\u00a0and\u00a0<code>next/font/local</code></li> <li>Scripts:\u00a0<code>next/script</code></li> <li>Metadata: the\u00a0<code>Metadata</code>\u00a0object,\u00a0<code>robots.tsx</code>, and\u00a0<code>sitemap.tsx</code>.</li> </ul>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-metadata-optimization","title":"Next.js Metadata Optimization","text":"<p>Next.js has a\u00a0Metadata API\u00a0to help define application metadata for improved SEO and shareability. Developers can use the\u00a0<code>generateMetadata()</code>\u00a0function for dynamic, config-based metadata generation or a static metadata object for static, config-based metadata generation. Developers can also use any of the\u00a0four available file-based metadata generation techniques.</p>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-config-based-metadata-optimization","title":"Next.js Config-Based Metadata Optimization","text":"<p>Config-based Metadata exports a metadata object to a\u00a0<code>layout.tsx</code>\u00a0or\u00a0<code>page.tsx</code>\u00a0file.</p> <pre><code>export async function generateMetadata({\n    params,\n}: MetadataProps): Promise&lt;Metadata&gt; {\n    const slug = params.slug\n    return {\n        title: `${slug}`,\n        description: `${slug}`,\n    }\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#nextjs-file-based-metadata-optimization","title":"Next.js File-Based Metadata Optimization","text":"<p>File-based Metadata adds a statically or dynamically generated file to a route file.</p> <pre><code>export const metadata: Metadata = {\n    title: 'Title of Page',\n    description: 'Description of Page',\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/How_to_Next.js/#lighthouse","title":"Lighthouse","text":"<p>Lighthouse\u00a0is an open-source, automated tool to measure and assess web performance. Its primary goal is to enhance a website\u2019s overall experience using the following metrics:</p> <ul> <li>Performance</li> <li>Accessibility</li> <li>Best Practices</li> <li>SEO</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/","title":"1 Setup","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/#create-new-nextjs-project","title":"Create new Next.js project","text":"<ul> <li>run command:<code>npx create-next-app</code></li> <li>It'll install several packages including react: <code>react</code>,<code>react-dom</code> and for linting:<code>eslint</code>, <code>eslint-config-next</code>.</li> <li>You can see repo changes at this point.</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/#run-locally","title":"Run locally","text":"<ol> <li> <p>Run command: <code>npm run dev</code></p> </li> <li> <p>Visit <code>http://localhost:3000</code>. You'd see something like below image:</p> </li> </ol> <p></p>"},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/#debug-nextjs-in-vscode","title":"Debug Next.js in VSCode","text":"<p>Useful to put breakpoints in VSCode and pause active session to inspect data.</p> <ol> <li>Create a file named <code>.vscode/launch.json</code> at the root of your project and paste below content:</li> </ol> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Next.js: attach\",\n      \"port\": 9229,\n      \"request\": \"attach\",\n      \"skipFiles\": [\"&lt;node_internals&gt;/**\"],\n      \"type\": \"node\",\n      \"restart\": true\n    },\n    {\n      \"name\": \"Next.js: debug server-side\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side\",\n      \"type\": \"pwa-chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\"\n    },\n    {\n      \"name\": \"Next.js: debug full stack\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\",\n      \"console\": \"integratedTerminal\",\n      \"serverReadyAction\": {\n        \"pattern\": \"started server on .+, url: (https?://.+)\",\n        \"uriFormat\": \"%s\",\n        \"action\": \"debugWithChrome\"\n      }\n    }\n  ]\n}\n</code></pre> <ol> <li> <p>Go to VSCode Debug panel (Ctrl+Shift+D on Windows/Linux, \u21e7+\u2318+D on macOS), select a launch configuration, then press F5 or select Debug: Start Debugging from the Command Palette to start your debugging session.</p> </li> <li> <p>Types of debugging sessions:</p> </li> <li> <p><code>Next.js: debug server-side</code>: It'll run <code>npm run dev</code> command and you'd be able to put breakpoints for both frontend files and api routes.</p> </li> <li><code>Next.js: debug client-side</code>: you need to run <code>npm run dev</code> prior to starting this debugging session. Upon starting session it'll open a new chrome window and load your site. You can put breakpoints only in frontend code (no api routes).</li> <li><code>Next.js: debug full stack</code>: It'll open a new chrome window and you'll be able to put breakpoints in both frontend and api routes.</li> <li><code>Next.js: attach</code>: Works for both frontend and backend. Extra steps are needed to make it work:<ol> <li>Run: <code>npm i cross-env</code></li> <li>Add this to package.json <code>\"start:debug\": \"cross-env NODE_OPTIONS='--inspect' next dev\"</code></li> <li>Run: <code>npm run start:debug</code></li> <li>Run <code>Next.js: attach</code> session</li> </ol> </li> </ol> <p>Also, there's a separate guide to debug using Chrome DevTools instead.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/#run-localhost-in-mobile","title":"Run localhost in mobile","text":"<ol> <li> <p>Run: <code>npm run dev</code></p> </li> <li> <p>Find your desktop IPv4 address. (For Windows: <code>ipconfig /all</code>, on Mac: <code>ipconfig getifaddr en0</code>)</p> </li> <li> <p>Open site in mobile: http://laptop_IPv4_address:3000 (replace <code>laptop_IPv4_address</code> with actual IPv4 address)</p> </li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/#disable-telemetry","title":"Disable telemetry","text":"<p>Next.js collects completely anonymous telemetry data about general usage. Run this command to disable it:</p> <ul> <li><code>npx next telemetry disable</code></li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/1_Setup/#disable-emails-from-vercelbot-which-comes-after-every-github-commit","title":"Disable emails from vercel[bot] which comes after every github commit","text":"<ol> <li>Create <code>vercel.json</code> at root of project and paste this:</li> </ol> <pre><code>{\n  \"github\": {\n    \"silent\": true\n  }\n}\n</code></pre> <ol> <li>Commit and push this file to Github.</li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/2_Deployment/","title":"2 Deployment","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/2_Deployment/#netlify","title":"Netlify","text":"<ul> <li>Deploy new Next.js project.</li> <li>Deploy existing Next.js project.</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/2_Deployment/#vercel","title":"Vercel","text":"<ol> <li>Commit any pending changes to the repo and link it on Github.</li> <li>Create a free account at https://vercel.com/</li> <li>Create a new project https://vercel.com/new</li> <li>Import this github repository (give Github access to Vercel when asked).</li> <li>Skip creating a team (it's a paid feature) if asked.</li> </ol> <ol> <li>Click Deploy. Vercel will give you a custom public URL (ending with <code>.vercel.app</code>) for your site. You can later replace it with your own domain.</li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/2_Deployment/#deploy-to-preview-and-production","title":"Deploy to Preview and Production","text":"<ul> <li>Push to any branch other than <code>main</code> on Github and Vercel will deploy to a custom public URL (unique for every deployment). Useful for testing purpose before making it live on production domain.</li> <li>Push to <code>main</code> branch on Github and vercel will deploy to production domain.</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/2_Deployment/#link-custom-domain","title":"Link custom domain","text":"<p>Detailed guide by Vercel</p> <ol> <li>Go to your domain registrar website (Godaddy, Namecheap, etc) and change nameserver to:</li> </ol> <pre><code>ns1.vercel-dns.com\nns2.vercel-dns.com\n</code></pre> <ol> <li>Now go to https://vercel.com/dashboard/domains and add that custom domain.</li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/2_Deployment/#create-development-url-like-devyoursitecom","title":"Create development url like dev.yoursite.com","text":"<p>Creating different environments for development and production is a neat way to do development while maintaining a bug-free production server. All the changes you do on a <code>dev</code> branch will be deployed to <code>dev.yoursite.com</code> and won't affect your prod site <code>yoursite.com</code>. Let's set this up:</p> <ol> <li>Create git dev branch: <code>git checkout -b dev</code></li> <li>Commit something (at least one new commit is required for Vercel to deploy this branch)</li> <li>Push branch to github: <code>git push --set-upstream origin dev</code></li> <li> <p>In Vercel, go to project domain: https://vercel.com/{username}/{project}/settings/domains.</p> </li> <li> <p>Add domain: dev.yoursite.com</p> </li> <li> <p>Add Git branch: <code>dev</code> and save.</p> </li> <li> <p>Visit your dev site <code>dev.yoursite.com</code></p> </li> <li> <p>Any commits made to <code>dev</code> branch will now show in <code>dev.yoursite.com</code> along with unique url generated by Vercel for that deployment.</p> </li> </ol> <p>Later, when everything seems okay you can merge code from <code>dev</code> -&gt; <code>main</code> branch to reflect changes on prod server.</p> <p>You can create even more branches like testing, staging, etc.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/3_Add_TypeScript/","title":"3 Add TypeScript","text":"<p>typescript version at the time of writing this article: 4.4</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/3_Add_TypeScript/#add-typescript-when-creating-a-new-nextjs-project","title":"Add Typescript when creating a new Next.js project","text":"<ul> <li>Just run <code>npx create-next-app@latest --ts</code></li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/3_Add_TypeScript/#add-typescript-to-existing-nextjs-project","title":"Add Typescript to existing Next.js project","text":"<ol> <li> <p>Run <code>npm i -D typescript @types/react @types/node</code>.</p> </li> <li> <p>Create empty <code>tsconfig.json</code> file at root of project.</p> </li> <li> <p>Run <code>npm run dev</code> and it'll fill <code>tsconfig.json</code>.</p> </li> <li> <p>Now, Change Javascript files extension to Typescript extension.    <code>*.js</code> files which have react related code (components etc) should be converted to <code>*.tsx</code> and rest of <code>*.js</code> files should be converted to <code>*.ts</code></p> </li> </ol> <pre><code>pages\\api\\hello.js -&gt; pages\\api\\hello.ts\npages\\_app.js -&gt; pages\\_app.tsx\npages\\index.js -&gt; pages\\index.tsx\n</code></pre> <p>You can see repo changes at this point.</p> <p>Test it locally:</p> <ul> <li> <p>Run <code>npm run dev</code> and visit <code>http://localhost:3000/</code> (page should look same as before)</p> </li> <li> <p>Also, test the api route for file (pages\\api\\hello.ts)</p> </li> </ul> <p>Visit <code>http://localhost:3000/api/hello</code> output should be:</p> <pre><code>{\"name\":\"John Doe\"}\n</code></pre>"},{"location":"Code/How_to_Next.js/Cheatsheet/3_Add_TypeScript/#check-for-any-typescript-errors","title":"Check for any Typescript errors","text":"<ol> <li>You can either build the project: <code>npm run build</code> (it'll show TS errors)</li> <li>Or create a separate command for it:    add <code>\"tsc\": \"tsc\"</code> to <code>package.json</code> scripts section</li> </ol> <pre><code>{\n  \"scripts\": {\n    \"tsc\": \"tsc\"\n  }\n}\n</code></pre> <ul> <li>Run <code>npm run tsc</code></li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/3_Add_TypeScript/#strict-type-checking-optional","title":"Strict Type checking (Optional)","text":"<p>Strict type checking is useful if you want to further reduce the scope of errors.</p> <ul> <li>To enable:</li> <li>in <code>tsconfig.json</code>     change <code>\"strict\": false</code> to <code>\"strict\": true</code></li> <li>Now, if you run <code>npm run build</code> or <code>npm run tsc</code> it'll throw below errors like <code>XXX implicitly has an 'any' type.</code></li> </ul> <pre><code>pages/_app.tsx:3:18 - error TS7031: Binding element 'Component' implicitly has an 'any' type.\n\n3 function MyApp({ Component, pageProps }) {\n                   ~~~~~~~~~\n\npages/_app.tsx:3:29 - error TS7031: Binding element 'pageProps' implicitly has an 'any' type.\n\n3 function MyApp({ Component, pageProps }) {\n                              ~~~~~~~~~\n\npages/api/hello.ts:3:33 - error TS7006: Parameter 'req' implicitly has an 'any' type.\n\n3 export default function handler(req, res) {\n                                  ~~~\n\npages/api/hello.ts:3:38 - error TS7006: Parameter 'res' implicitly has an 'any' type.\n\n3 export default function handler(req, res) {\n                                       ~~~\n\n\nFound 4 errors.\n</code></pre> <p>You can either define the <code>type</code> for those errors or suppress these errors by enabling use of <code>any</code>.</p> <ul> <li>To allow use of <code>any</code>   open <code>tsconfig.json</code> and add <code>\"noImplicitAny\": false</code> to <code>compilerOptions</code></li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false //set 'true' to throw error for 'any'\n  }\n}\n</code></pre> <ul> <li>Run <code>npm run tsc</code> and now it shouldn't give you any error.</li> </ul> <p>At this point, complete <code>tsconfig.json</code> should look like this:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true, // strict type checking is enabled\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"noImplicitAny\": false, // set 'true' to throw error for 'any'\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\"\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre> <p>At this point, complete <code>package.json</code> should look like this:</p> <pre><code>{\n  \"name\": \"nextjs-template\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"tsc\": \"tsc\"\n  },\n  \"dependencies\": {\n    \"next\": \"11.1.2\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.10.3\",\n    \"@types/react\": \"^17.0.27\",\n    \"eslint\": \"8.0.0\",\n    \"eslint-config-next\": \"11.1.2\",\n    \"typescript\": \"^4.4.3\"\n  }\n}\n</code></pre> <ul> <li>You can also checkout the sample repository for Next.js.</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/4_Add_ESLint_and_Prettier/","title":"4 Add ESLint and Prettier","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/4_Add_ESLint_and_Prettier/#add-eslint-to-nextjs-typescript-project","title":"Add ESLint to Next.js Typescript project","text":"<p>To add ESLint in Next.js Javascript project. see https://stackoverflow.com/a/61160352/3073272</p> <p>There are few steps required for adding proper support of ESLint to TS project:</p> <ol> <li> <p>First step to install few ESLint packages is already done at time of creating Next.js project i.e. <code>npx create-next-app</code>, it installed <code>eslint</code> and <code>eslint-config-next</code>.</p> </li> <li> <p>Install TS related ESLint packages:    <code>npm i -D @typescript-eslint/parser @typescript-eslint/eslint-plugin @next/eslint-plugin-next</code></p> </li> <li> <p>Install VSCode ESLint extension: ESLint</p> </li> </ol> <p>Explanations:</p> <p><code>eslint</code> is the main ESLint package. <code>@typescript-eslint/parser</code> will allow ESLint to parse TypeScript files. <code>@typescript-eslint/eslint-plugin</code> will add TypeScript specific lint rules. <code>eslint-config-next</code> adds multiple useful plugins (next, react, and react-hooks) (full list of plugins) <code>@next/eslint-plugin-next</code> to catch common issues and problems in a Next.js application.</p> <ol> <li>Create/edit file <code>.eslintrc.json</code> at root of project and replace with below content:    (to mention plugins, configs, rules for linting)</li> </ol> <pre><code>{\n  \"root\": true,\n  \"env\": {\n    \"browser\": true,\n    \"es6\": true,\n    \"node\": true\n  },\n  \"settings\": {\n    \"react\": {\n      \"version\": \"detect\"\n    }\n  },\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"project\": \"./tsconfig.json\", // tells parser relative path of tsconfig.json\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"ecmaVersion\": 12,\n    \"sourceType\": \"module\"\n  },\n\n  // all plugins (eslint-plugin-xxx) go here:\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"@next/eslint-plugin-next\" // https://github.com/vercel/next.js/blob/canary/packages/eslint-plugin-next/lib/index.js\n  ],\n\n  // all configs (eslint-config-xxx) go here:\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:@typescript-eslint/recommended-requiring-type-checking\", // contains rules that specifically require type information\n    \"plugin:@next/next/recommended\",\n    \"next\", // https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/package.json\n    \"next/core-web-vitals\"\n  ],\n  \"rules\": {\n    // ...add rules which you'd like to disable\n  }\n}\n</code></pre> <ol> <li>Create file <code>.eslintignore</code> at root of project:    (It tells ESLint to ignore files when linting)</li> </ol> <pre><code># don't ever lint node_modules\n**/node_modules/*\n# don't lint build output (make sure it's set to your correct build folder name)\ndist\n# don't lint nyc coverage output\ncoverage\n**/.next/*\n*.json\n*.lock\n*.css\n*.scss\n**/out/*\nnext-env.d.ts\n# next.config.js\n</code></pre> <ol> <li>Include support for <code>*.js</code> files in <code>tsconfig.json</code>:</li> </ol> <pre><code>{\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \"**/*.js\"],\n  \"exclude\": [\"node_modules\", \".next\", \".vercel\", \"out\"]\n}\n</code></pre> <ol> <li>Restart VSCode to activate ESLint.</li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/4_Add_ESLint_and_Prettier/#test-linting-eslint","title":"Test Linting (ESLint)","text":"<p>VSCode will show warnings and errors in files which have linting issues.</p> <p></p> <p></p> <p>We can also explicitly check for these issues by running a command.</p> <ol> <li>Add below to <code>package.json</code> scripts if it's not added already:</li> </ol> <pre><code>{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n</code></pre> <ol> <li>Run <code>npm run lint</code> and you should see some errors &amp; warnings.</li> </ol> <p>Fix lint warnings &amp; errors:</p> <p>Modify <code>_app.tsx</code> according to it:</p> <pre><code>import { AppProps } from \"next/app\";\n\nimport \"../styles/globals.css\";\n\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\n  return &lt;Component {...pageProps} /&gt;;\n}\n\nexport default MyApp;\n</code></pre> <p>In <code>index.tsx</code>, add return type as <code>JSX.Element</code> to <code>Home</code> function:</p> <pre><code>export default function Home(): JSX.Element {\n</code></pre> <p>In <code>hello.ts</code>:</p> <pre><code>/* eslint-disable import/no-anonymous-default-export */\nimport type { NextApiRequest, NextApiResponse } from \"next\";\n\ntype Data = {\n  name: string;\n};\nexport default (req: NextApiRequest, res: NextApiResponse&lt;Data&gt;): void =&gt; {\n  res.status(200).json({ name: \"John Doe\" });\n};\n</code></pre> <p>Run <code>npm run lint</code> to test again. There shouldn't be any issues now.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/4_Add_ESLint_and_Prettier/#disable-or-suppress-linting-errors-and-warnings","title":"Disable or suppress linting errors and warnings","text":"<ul> <li> <p>To suppress issue for a particular line basis: <code>ctrl+.</code> and select disable for this line. (<code>ctrl+.</code> is a VSCode shortcut)</p> </li> <li> <p>To suppress issue for entire file: <code>ctrl+.</code> and select disable for entire file</p> </li> <li> <p>Disable rule for entire project</p> </li> <li> <p>Add that rule to <code>.eslintrc.json</code> .</p> <p>Options for any specific rule:</p> <p>\"off\": to completely shut this rule.</p> <p>\"warn\": rule violation will show as warning.</p> <p>\"on\": rule violation will show it as error.</p> <p><code>.eslintrc.json</code>:</p> <pre><code>{\nrules: {\n      \"jsx-a11y/anchor-is-valid\": \"off\", // disable this rule\n  },\n}\n</code></pre> </li> </ul> <p><code>package.json</code> at this point:</p> <pre><code>{\n  \"name\": \"nextjs-template\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"tsc\": \"tsc\"\n  },\n  \"dependencies\": {\n    \"next\": \"11.1.2\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\"\n  },\n  \"devDependencies\": {\n    \"@next/eslint-plugin-next\": \"^11.1.2\",\n    \"@types/node\": \"^16.10.3\",\n    \"@types/react\": \"^17.0.27\",\n    \"@typescript-eslint/eslint-plugin\": \"^4.33.0\",\n    \"eslint\": \"^7.23.0\",\n    \"eslint-config-next\": \"11.1.2\",\n    \"typescript\": \"^4.4.3\"\n  }\n}\n</code></pre> <ul> <li>You can see repo changes at this point.</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/4_Add_ESLint_and_Prettier/#add-support-for-prettier-in-nextjs-project-with-eslint","title":"Add support for Prettier in Next.js project with ESLint","text":"<p>Prettier is an opinionated code formatter with support for many popular languages (js, ts, html, css, etc.). So, whenever you hit <code>ctrl+s</code>, it'll beautify/format the file.</p> <ol> <li>Install VSCode extension: Prettier - Code formatter.</li> </ol> <p>(that's it! do not install any other prettier related eslint plugins or extensions as those make the whole project slow. Let prettier do its job independently. read more</p> <ol> <li> <p>In VSCode settings (<code>ctrl+,</code>):</p> </li> <li> <p>Set <code>Default Formatter</code> to <code>Prettier - code formatter</code></p> </li> <li> <p>Enable <code>Format on Save</code></p> </li> <li> <p>You may need to disable any formatting related eslint rules as Prettier will handle formatting from now on. You can disable those rules in <code>.eslintrc.json</code> or use eslint-config-prettier.</p> </li> <li>Restart VSCode and try to save any unformatted file.</li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/5_Add_Styling/","title":"5 Add Styling","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/5_Add_Styling/#add-custom-fonts","title":"Add custom fonts","text":"<p>Holy Tip: These days you need not serve multiple font files as variable fonts are widely supported by using just one file. Moreover, the newer font format <code>woff2</code> has a better compression ratio and is again widely supported.</p> <ol> <li> <p>Put variable font file (<code>.woff2</code>) in <code>/public/fonts/</code> folder</p> </li> <li> <p>Add it to <code>_document.tsx</code> file so that it's fetched for all pages:</p> </li> </ol> <pre><code>export default class MyDocument extends Document {\n  render(): JSX.Element {\n    return (\n      &lt;Html&gt;\n        &lt;Head&gt;\n          &lt;link\n            rel=\"preload\"\n            href=\"/fonts/inter-var-latin.woff2\"\n            as=\"font\"\n            type=\"font/woff2\"\n            crossOrigin=\"anonymous\"\n          /&gt;\n        &lt;/Head&gt;\n        ...\n</code></pre> <ol> <li>Mention in global CSS file so that it's applied to all pages:</li> </ol> <pre><code>@font-face {\n  font-family: \"Inter\";\n  font-style: normal;\n  font-weight: 100 900;\n  font-display: optional;\n  src: url(/fonts/inter-var-latin.woff2) format(\"woff2\");\n}\n</code></pre> <ol> <li>Tell browser to cache this font file for a long time (~1yr) to avoid unnecessary re-downloads for subsequent site visits.    Add headers to <code>next.config.json</code>:</li> </ol> <pre><code>module.exports = {\n  async headers() {\n    return [\n      {\n        source: \"/fonts/inter-var-latin.woff2\",\n        headers: [\n          {\n            key: \"Cache-Control\",\n            value: \"public, max-age=31536000, immutable\",\n          },\n        ],\n      },\n    ];\n  },\n};\n</code></pre>"},{"location":"Code/How_to_Next.js/Cheatsheet/5_Add_Styling/#add-tailwind-css-to-nextjs-project","title":"Add Tailwind CSS to Next.js project","text":"<p>https://tailwindcss.com/docs/guides/nextjs</p> <ol> <li> <p>Install VSCode extension: Tailwind CSS IntelliSense</p> </li> <li> <p>Run: <code>npm i -D tailwindcss@latest postcss@latest autoprefixer@latest</code></p> </li> <li> <p>Run:<code>npx tailwindcss init -p</code> (It'll generate <code>tailwind.config.js</code> and <code>postcss.config.js</code> files)</p> </li> <li> <p>Paste below to <code>tailwind.config.js</code>:</p> </li> </ol> <pre><code>module.exports = {\n  future: {\n    removeDeprecatedGapUtilities: true,\n  },\n  mode: \"jit\",\n  purge: [\"./pages/**/*.{js,ts,jsx,tsx}\", \"./components/**/*.{js,ts,jsx,tsx}\"], // remove unused styles in production\n  darkMode: false, // or 'media' or 'class'\n  theme: {\n    extend: {},\n  },\n  variants: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre> <ol> <li>Make sure <code>postcss.config.js</code> is also generated with below code:</li> </ol> <pre><code>module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n</code></pre> <ol> <li>Paste below to <code>styles\\globals.css</code></li> </ol> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <ol> <li>Import style in <code>pages\\_app.tsx</code> if not done already</li> </ol> <pre><code>import { AppProps } from \"next/app\";\nimport \"../styles/globals.css\";\n\nfunction MyApp({ Component, pageProps }: AppProps): JSX.Element {\n  return &lt;Component {...pageProps} /&gt;;\n}\n\nexport default MyApp;\n</code></pre> <ul> <li>To add custom CSS styles, see:</li> <li>https://tailwindcss.com/docs/adding-base-styles ,</li> <li>https://tailwindcss.com/docs/adding-new-utilities,</li> <li>https://tailwindcss.com/docs/extracting-components</li> </ul> <p>You can see repo changes at this point.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/5_Add_Styling/#add-sassscss-support-to-nextjs-project","title":"Add SASS/SCSS support to Next.js project","text":"<ol> <li> <p>Run: <code>npm i sass</code></p> </li> <li> <p>Rename all <code>*.css</code> files to <code>*.scss</code></p> </li> <li> <p>Also, update this change in <code>import</code> statements i.e. <code>import \"../styles/globals.scss\"</code> , <code>import styles from \"../styles/Home.module.scss\";</code></p> </li> </ol> <p>That's all. Start writing css styles in scss syntax.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/","title":"6 Add SEO","text":"<p>Checkout free SEO course by Next.js: https://nextjs.org/learn/seo/introduction-to-seo</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#set-redirect-from-wwwyoursitecom-to-yoursitecom","title":"Set Redirect from www.yoursite.com to yoursite.com","text":"<p>It means whenever someone visits www.yoursite.com it'll be redirected to yoursite.com without hurting SEO.</p> <ol> <li> <p>Go to domains settings inside Vercel: https://vercel.com/{username}/{project}/settings/domains</p> </li> <li> <p>Add an entry <code>yoursite.com</code> if not added already.    config should be like this:    domain: yoursite.com    Redirect to: No redirect possible    Git Branch: main</p> </li> <li> <p>Add a new entry <code>www.yoursite.com</code> if not added already    config should be like this:    domain: www.yoursite.com    Redirect to: yoursite.com    Status Code: 308 Permanent Redirect    Git Branch: main</p> </li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#add-seo-meta-tags-and-favicon","title":"Add SEO meta tags and favicon","text":"<p>Whenever you share a website link on Twitter, LinkedIn, Whatsapp, etc, you must have noticed that it generates a little preview containing a title, description and a preview image. Platform picks this info from site meta tags. Luckily, there's an npm library which makes it easy to add meta tags to next.js project.</p> <ol> <li> <p>Install next-seo: <code>npm i next-seo</code></p> </li> <li> <p>Create a file <code>header.tsx</code> and paste below code:</p> </li> </ol> <pre><code>import { NextSeo } from \"next-seo\";\nimport { useRouter } from \"next/router\";\n\nexport default function Header(): JSX.Element {\n  const title = \"Gourav Goyal\";\n  const desc =\n    \"I'm a tech founder, digital nomad, and a fun guy to hang around with. I like to build things that others find helpful.\";\n  const ogImgRelativePath = \"/og.png\";\n\n  const siteURL = \"https://gourav.io\";\n  const ogImageURL = `${siteURL}${ogImgRelativePath}`;\n  const pathName = useRouter().pathname;\n  const pageURL = pathName === \"/\" ? siteURL : siteURL + pathName;\n  const twitterHandle = \"@GorvGoyl\";\n  const siteName = \"Gourav.io\";\n\n  return (\n    &lt;NextSeo\n      title={title}\n      description={desc}\n      canonical={pageURL}\n      openGraph={{\n        type: \"website\",\n        locale: \"en_US\", //  Default is en_US\n        url: pageURL,\n        title,\n        description: desc,\n        images: [\n          {\n            url: ogImageURL,\n            width: 1200,\n            height: 630,\n            alt: \"Gourav.io - personal site and blog\",\n          },\n        ],\n        site_name: siteName,\n      }}\n      twitter={{\n        handle: twitterHandle,\n        site: twitterHandle,\n        cardType: \"summary_large_image\",\n      }}\n      additionalMetaTags={[\n        {\n          property: \"author\",\n          content: title,\n        },\n      ]}\n      additionalLinkTags={[\n        {\n          rel: \"icon\",\n          href: `${siteURL}/favicon.ico`,\n        },\n        // {\n        //   rel: \"manifest\",\n        //   href: \"/site.manifest\",\n        // },\n      ]}\n    /&gt;\n  );\n}\n</code></pre> <ol> <li> <p>Set proper value of <code>title</code>, <code>desc</code>, <code>ogImgRelativePath</code>, <code>siteURL</code>, etc.</p> </li> <li> <p>Create favicon.ico:</p> </li> <li> <p>create favicon by image, text, or emoji: https://favicon.io/</p> </li> <li> <p>put <code>favicon.ico</code> inside <code>public/</code> folder.</p> </li> <li> <p>Create an OG Image (preview image) of size 1200x630, name it <code>og.png</code> and put it in <code>public/</code> folder.</p> </li> <li> <p>import <code>Header.tsx</code> to all of your website pages which need meta tags.</p> </li> </ol> <pre><code>import Header from \"@/components/header\";\n\nexport default function Home(): JSX.Element {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      ...rest of code\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>To verify metatags:</p> <ul> <li>Locally you can verify it in dev tools -&gt; Elements -&gt; html/head section:</li> </ul> <p></p> <ul> <li>After deployment you can verify it via https://metatags.io (enter your site name in input field)</li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#create-dynamic-sitemap","title":"Create dynamic sitemap","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#using-custom-post-build-script","title":"Using custom post-build script","text":"<p>Up-to date sitemap will be generated every time you do a deployment (during build process) so no need to manually add/update/remove urls in sitemap.</p> <ol> <li> <p>Create <code>/scripts</code> folder and create new file inside it: <code>generate-sitemap.mjs</code></p> </li> <li> <p>Install required <code>globby</code> package: <code>npm i -D globby</code></p> </li> <li> <p>Paste below to <code>generate-sitemap.mjs</code>. Replace <code>homeURL</code> with your domain.</p> </li> </ol> <pre><code>import { writeFileSync } from \"fs\";\nimport { globby } from \"globby\";\nconst homeURL = \"https://yoursite.com\";\n\n(async () =&gt; {\n  try {\n    console.log(\"generating sitemap..\");\n\n    const pages = await globby([\n      \"pages/**/*.tsx\",\n      \"!pages/_*.tsx\",\n      \"!pages/api\",\n      \"!pages/404.tsx\",\n    ]);\n\n    const sitemap = `&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n        &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;\n            ${pages\n              .map((page) =&gt; {\n                const path = page\n                  .replace(\"pages/\", \"/\")\n                  .replace(\".tsx\", \"\")\n                  .replace(\"/index\", \"\");\n                const route = path === \"/index\" ? \"\" : path;\n                const fullUrl = `${homeURL}${route}`;\n                console.log(fullUrl);\n                return `\n                        &lt;url&gt;\n                            &lt;loc&gt;${fullUrl}&lt;/loc&gt;\n                        &lt;/url&gt;\n                    `;\n              })\n              .join(\"\")}\n        &lt;/urlset&gt;`;\n\n    writeFileSync(\"public/sitemap.xml\", sitemap);\n    console.log(\"sitemap generated\");\n  } catch (e) {\n    console.log(e);\n    process.exit(1);\n  }\n})();\n</code></pre> <ol> <li> <p>Ignore this file from linting as it's not typescript compatible:</p> </li> <li> <p>Create<code>.eslintignore</code> file at root of project</p> </li> <li> <p>Add below line:</p> </li> </ol> <pre><code>*.mjs\n</code></pre> <ol> <li>in <code>package.json</code> add below <code>postbuild</code> step. <code>postbuild</code> step will run automatically after the <code>build</code> step (due to <code>post</code>prefix).</li> </ol> <pre><code>{\n\"scripts\": {\n    \"build\": \"next build\",\n    \"postbuild\": \"node ./scripts/generate-sitemap.mjs\"\n  },\n}\n</code></pre> <ul> <li>Now if you run <code>npm run build</code>, a new file <code>sitemap.xml</code> will be created under <code>./public</code>:</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n        &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;\n\n                        &lt;url&gt;\n                            &lt;loc&gt;https://yoursite.com&lt;/loc&gt;\n                        &lt;/url&gt;\n\n        &lt;/urlset&gt;\n</code></pre> <ul> <li>Also create <code>/public/robots.txt</code> and paste below and replace mysite.com with your site. This gives permission to web crawlers (e.g. Google) to crawl and index your site and its pages.</li> </ul> <pre><code>User-agent: *\nSitemap: https://mysite.com/sitemap.xml\n</code></pre> <ul> <li> <p>Check in code and deploy. you should see sitemap by visiting: <code>https://mysite.com/sitemap.xml</code></p> </li> <li> <p>Submit this source map to Google: https://search.google.com/search-console</p> </li> </ul>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#using-npm-package-next-sitemap","title":"Using npm package <code>next-sitemap</code>","text":"<ol> <li>Install next-sitemap:</li> </ol> <pre><code>npm i -D next-sitemap\n</code></pre> <ol> <li>Create a config file. <code>next-sitemap</code> will look for a file named <code>next-sitemap.js</code> in the <code>public/</code> by default. Using Windows, this does not work because of a naming conflict. Instead, create a file named <code>sitemap-generator.js</code> with the following configuration:</li> </ol> <pre><code>module.exports = {\n  siteUrl: \"https://yourdomain.com\",\n  generateRobotsTxt: true,\n  exclude: [\"/en*\", \"/de*\", \"/disallowed\"],\n  alternateRefs: [\n    {\n      href: \"https://yourdomain.com/en\",\n      hreflang: \"en\",\n    },\n    {\n      href: \"https://yourdomain.com/de\",\n      hreflang: \"de\",\n    },\n  ],\n  robotsTxtOptions: {\n    policies: [\n      {\n        userAgent: \"*\",\n        disallow: \"/disallowed\",\n      },\n      {\n        userAgent: \"*\",\n        allow: \"/\",\n      },\n    ],\n  },\n};\n</code></pre> <ol> <li>Finally, add the <code>postbuild</code> script to <code>package.json</code></li> </ol> <pre><code>\"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"postbuild\": \"next-sitemap --config sitemap-generator.js\"\n},\n</code></pre> <p>Notice the optional <code>--config sitemap-generator.js</code> to point to a different filename than the default <code>next-sitemap.js</code></p>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#add-html-language-attribute-and-locale","title":"Add HTML language attribute and locale","text":"<p>It'll convert from <code>&lt;html&gt;...&lt;/html&gt;</code> to <code>&lt;html lang=\"en-US\"&gt;...&lt;/html&gt;</code>.</p> <ul> <li>In <code>next.config.js</code> add:</li> </ul> <pre><code>module.exports = {\n  i18n: {\n    locales: [\"en-US\"],\n    defaultLocale: \"en-US\",\n  },\n};\n</code></pre>"},{"location":"Code/How_to_Next.js/Cheatsheet/6_Add_SEO/#create-dynamic-rss-feed","title":"Create dynamic RSS feed","text":"<p>Add this to <code>./scripts/generate-rss.mjs</code> <pre><code>import { Feed } from \"feed\";\nimport { writeFileSync } from \"fs\";\nimport { join } from \"path\";\nimport { getPublishedPostsFrontmatter, homeUrl } from \"./helper.mjs\";\n\nconst imgOutputPath = `${homeUrl}/img/blog/`;\n\nconst author = {\n  name: \"Gourav Goyal\",\n  email: \"hey@gourav.io\",\n  link: \"https://gourav.io/blog\",\n};\n\nfunction generateRSS() {\n  try {\n    console.log(\"generating blog feed...\");\n    const feed = new Feed({\n      title: \"Gourav Goyal\",\n      description: \"Gourav's Blog - Tech | Productivity | Life\",\n      id: homeUrl,\n      link: homeUrl,\n      language: \"en\",\n      image: `${homeUrl}/favicon-32x32.png`,\n      favicon: `${homeUrl}/favicon.ico`,\n      generator: `Feed for ${homeUrl}`,\n      copyright: `All rights reserved ${new Date().getFullYear()}, Gourav Goyal`,\n      feedLinks: {\n        rss: `${homeUrl}/feed.xml`,\n        json: `${homeUrl}/feed.json`,\n        atom: `${homeUrl}/atom.xml`,\n      },\n      author,\n    });\n\n    const postsFrontmatter = getPublishedPostsFrontmatter();\n\n    // don't add posts to rss feed: preview posts, posts that starts with _folder\n    postsFrontmatter.forEach((frontmatter) =&gt; {\n      try {\n        const postURL = `https://gourav.io/blog/${frontmatter.slug}`;\n\n        const postDir = join(\n          process.cwd(),\n          \"content\",\n          \"blog\",\n          frontmatter.slug\n        );\n\n        // use default og image if no image is provided\n        let ogImgFullPath = `${homeUrl}/og.png`;\n        if (frontmatter.ogImage) {\n          ogImgFullPath = `${postURL}/${frontmatter.ogImage}`;\n        }\n\n        feed.addItem({\n          title: frontmatter.title,\n          id: frontmatter.title,\n          link: postURL,\n          description: frontmatter.desc,\n          // content: html + postText,\n          author: [author],\n          date: new Date(frontmatter.date),\n          image: ogImgFullPath,\n        });\n        // feed.addCategory(\"Technology\");\n      } catch (e) {\n        console.error(\"Error: \", e);\n      }\n    });\n\n    writeFileSync(\"./public/feed.xml\", feed.rss2());\n    writeFileSync(\"./public/atom.xml\", feed.atom1());\n    writeFileSync(\"./public/feed.json\", feed.json1());\n    console.log(\"feed generated\");\n  } catch (e) {\n    console.error(e);\n    process.exit(1);\n  }\n}\n\ngenerateRSS();\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Cheatsheet/7_Add_Analytics/","title":"7 Add Analytics","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/7_Add_Analytics/#add-cloudflare-web-analytics","title":"Add Cloudflare Web Analytics","text":"<p>It's free free, lightweight, privacy-friendly, and cookie-less analytics provided by Cloudflare.</p> <ol> <li> <p>Create free account at Cloudflare web-analytics and get JS Snippet.</p> </li> <li> <p>Create <code>pages/_document.tsx</code> and paste below code.</p> </li> <li>Replace <code>your_token</code> with your token (from that JS snippet)</li> </ol> <pre><code>import Document, { Html, Main, NextScript } from \"next/document\";\nconst isProd = process.env.NODE_ENV === \"production\";\n\nexport default class MyDocument extends Document {\n  render(): JSX.Element {\n    return (\n      &lt;Html&gt;\n        &lt;body&gt;\n          &lt;Main /&gt;\n          &lt;NextScript /&gt;\n          {/* Cloudflare Web Analytics */}\n          {isProd &amp;&amp; (\n            &lt;&gt;\n              &lt;script\n                defer\n                src=\"https://static.cloudflareinsights.com/beacon.min.js\"\n                data-cf-beacon='{\"token\": \"your_token\", \"spa\": true}'\n              /&gt;\n            &lt;/&gt;\n          )}\n        &lt;/body&gt;\n      &lt;/Html&gt;\n    );\n  }\n}\n</code></pre> <p>Done. When you deploy your site to production. Cloudflare will track site analytics.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/7_Add_Analytics/#add-google-analytics","title":"Add Google Analytics","text":"<p>It's free but bloated and uses cookies to track visitors.</p> <ol> <li> <p>Create a Google analytics project and get Measurement ID.</p> </li> <li> <p>In your Next.js project, create <code>/lib/gtag.ts</code> file and add your Google Measurement ID:</p> </li> </ol> <pre><code>export const GA_ANALYTICS_MEASUREMENT_ID = \"&lt;INSERT_MEASUREMENT_ID&gt;\";\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/pages\nexport const pageview = (url: URL): void =&gt; {\n  window.gtag(\"config\", GA_ANALYTICS_MEASUREMENT_ID, {\n    page_path: url,\n  });\n};\n\ntype GTagEvent = {\n  action: string;\n  category: string;\n  label: string;\n  value: number;\n};\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events\nexport const event = ({ action, category, label, value }: GTagEvent): void =&gt; {\n  window.gtag(\"event\", action, {\n    event_category: category,\n    event_label: label,\n    value,\n  });\n};\n</code></pre> <ol> <li>Also install gtag <code>types</code>:</li> </ol> <pre><code>npm i -D @types/gtag.js\n</code></pre> <ol> <li>Create <code>/pages/_document.tsx</code>:</li> </ol> <pre><code>import Document, { Html, Head, Main, NextScript } from \"next/document\";\n\nimport { GA_ANALYTICS_MEASUREMENT_ID } from \"../lib/gtag\";\n\nconst isProd = process.env.NODE_ENV === \"production\";\n\nexport default class MyDocument extends Document {\n  render(): JSX.Element {\n    return (\n      &lt;Html&gt;\n        &lt;Head&gt;\n          {/* enable analytics script only for production */}\n          {isProd &amp;&amp; (\n            &lt;&gt;\n              &lt;script\n                async\n                src={`https://www.googletagmanager.com/gtag/js?id=${GA_ANALYTICS_MEASUREMENT_ID}`}\n              /&gt;\n              &lt;script\n                // eslint-disable-next-line react/no-danger\n                dangerouslySetInnerHTML={{\n                  __html: `\n            window.dataLayer = window.dataLayer || [];\n            function gtag(){dataLayer.push(arguments);}\n            gtag('js', new Date());\n            gtag('config', '${GA_ANALYTICS_MEASUREMENT_ID}', {\n              page_path: window.location.pathname,\n            });\n          `,\n                }}\n              /&gt;\n            &lt;/&gt;\n          )}\n        &lt;/Head&gt;\n        &lt;body&gt;\n          &lt;Main /&gt;\n          &lt;NextScript /&gt;\n        &lt;/body&gt;\n      &lt;/Html&gt;\n    );\n  }\n}\n</code></pre> <ol> <li>Create <code>/pages/_app.tsx</code>:</li> </ol> <pre><code>import { AppProps } from \"next/app\";\nimport { useRouter } from \"next/router\";\nimport { useEffect } from \"react\";\nimport * as gtag from \"../lib/gtag\";\nconst isProd = process.env.NODE_ENV === \"production\";\n\nconst App = ({ Component, pageProps }: AppProps): JSX.Element =&gt; {\n  const router = useRouter();\n\n  useEffect(() =&gt; {\n    const handleRouteChange = (url: URL) =&gt; {\n      /* invoke analytics function only for production */\n      if (isProd) gtag.pageview(url);\n    };\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n    return () =&gt; {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return &lt;Component {...pageProps} /&gt;;\n};\n\nexport default App;\n</code></pre> <p>Done. When you deploy your site to production. Google will track site analytics.</p>"},{"location":"Code/How_to_Next.js/Cheatsheet/8_Miscellanous_Tips/","title":"8 Miscellanous Tips","text":""},{"location":"Code/How_to_Next.js/Cheatsheet/8_Miscellanous_Tips/#open-localhost-site-whenever-you-start-nextjs-server","title":"Open localhost site whenever you start Next.js server","text":"<p>Open https://localhost:3000 site in browser whenever you run <code>npm run start</code>. Add below to <code>package.json</code> file:</p> <pre><code>\"scripts\": {\n    \"start\": \"start http://localhost:3000 &amp; next dev\", // for MAC, use `open` instead of `start`\n    }\n</code></pre>"},{"location":"Code/How_to_Next.js/Cheatsheet/8_Miscellanous_Tips/#check-if-site-is-running-in-production-or-dev-server","title":"Check if site is running in production or dev server","text":"<p>Many a times we need to enable some code only on production or dev server. You can check if site is running on production environment or dev server:</p> <pre><code>const isProd = process.env.NODE_ENV === \"production\";\n\nif (isProd) {\n  console.log(\"it's prod server bois\");\n}\n</code></pre>"},{"location":"Code/How_to_Next.js/Cheatsheet/8_Miscellanous_Tips/#use-absolute-path-like-components-instead-of-relative-path","title":"Use absolute path like @/components instead of relative path","text":"<p>You can use <code>@/</code> symbol to access path related to root of project instead of relative to current file path. For example, you can use <code>import Header from \"@/components/Header\";</code> no matter how deeply nested your file is. No more <code>../../../components/Header</code> etc.</p> <ol> <li>Add below to <code>tsconfig.json</code>:</li> </ol> <pre><code>{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      // use @/ to access path related to root of project\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n</code></pre> <ol> <li>Add below to <code>.eslintrc.json</code>:</li> </ol> <pre><code>{\n  \"settings\": {\n    // to support @/ path\n    \"import/resolver\": {\n      \"typescript\": {} // this loads &lt;rootdir&gt;/tsconfig.json to eslint\n    },\n    \"react\": {\n      \"version\": \"detect\"\n    }\n  },\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"project\": \"./tsconfig.json\", // tells parser relative path of tsconfig.json\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"ecmaVersion\": 12,\n    \"sourceType\": \"module\"\n  },\n  \"extends\": [\"plugin:import/typescript\"],\n};\n</code></pre> <ol> <li> <p>Restart VSCode.</p> </li> <li> <p>Now import some code using <code>@/</code> in a file e.g. <code>import Header from \"@/components/Header\";</code></p> </li> <li>You can test for any import errors by running <code>npm run lint</code></li> </ol>"},{"location":"Code/How_to_Next.js/Cheatsheet/8_Miscellanous_Tips/#redirect-a-page-to-an-external-url","title":"Redirect a page to an external URL","text":"<p>Useful for creating short memorable links to your projects, resume, etc.</p> <p>When user visits https://gourav.io/chrome then redirect to https://chrome.google.com/webstore/detail/notion-boost/eciepnnimnjaojlkcpdpcgbfkpcagahd.</p> <p>Create <code>next.config.js</code> at root of project and paste:</p> <pre><code>module.exports = {\n  async redirects() {\n    return [\n      {\n        source: \"/chrome\",\n        destination:\n          \"https://chrome.google.com/webstore/detail/notion-boost/eciepnnimnjaojlkcpdpcgbfkpcagahd\",\n        permanent: true,\n      },\n    ];\n  },\n};\n</code></pre>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/","title":"1 Installation","text":"<p>System Requirements:</p> <ul> <li>Node.js 18.17 or later.</li> <li>macOS, Windows (including WSL), and Linux are supported.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/#automatic-installation","title":"Automatic Installation","text":"<p>We recommend starting a new Next.js app using <code>create-next-app</code> which sets up everything automatically for you. To create a project, run:</p> <p>```bash filename=\"Terminal\" npx create-next-app@latest <pre><code>On installation, you'll see the following prompts:\n\n```txt filename=\"Terminal\"\nWhat is your project named? my-app\nWould you like to use TypeScript? No / Yes\nWould you like to use ESLint? No / Yes\nWould you like to use Tailwind CSS? No / Yes\nWould you like to use `src/` directory? No / Yes\nWould you like to use App Router? (recommended) No / Yes\nWould you like to use Turbopack for `next dev`?  No / Yes\nWould you like to customize the default import alias (@/*)? No / Yes\nWhat import alias would you like configured? @/*\n</code></pre></p> <p>After the prompts, <code>create-next-app</code> will create a folder with your project name and install the required dependencies.</p> <p>If you're new to Next.js, see the <code>project structure</code> docs for an overview of all the possible files and folders in your application.</p> <p>Good to know:</p> <ul> <li>Next.js now ships with TypeScript, ESLint, and Tailwind CSS configuration by default.</li> <li>You can optionally use a <code>src</code> directory in the root of your project to separate your application's code from configuration files.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/#creating-directories","title":"Creating directories","text":"<p>Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files.</p>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/#the-app-directory","title":"The <code>app</code> directory","text":"<p>For new applications, we recommend using the App Router. This router allows you to use React's latest features and is an evolution of the Pages Router based on community feedback.</p> <p>Create an <code>app/</code> folder, then add a <code>layout.tsx</code> and <code>page.tsx</code> file. These will be rendered when the user visits the root of your application (<code>/</code>).</p> <p>Create a root layout inside <code>app/layout.tsx</code> with the required <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags:</p> <p>```tsx filename=\"app/layout.tsx\" switcher export default function RootLayout({   children, }: {   children: React.ReactNode }) {   return (      {children}    ) } <pre><code>```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"en\"&gt;\n      &lt;body&gt;{children}&lt;/body&gt;\n    &lt;/html&gt;\n  )\n}\n</code></pre></p> <p>Finally, create a home page <code>app/page.tsx</code> with some initial content:</p> <p>```tsx filename=\"app/page.tsx\" switcher export default function Page() {   return Hello, Next.js! } <pre><code>```jsx filename=\"app/page.js\" switcher\nexport default function Page() {\n  return &lt;h1&gt;Hello, Next.js!&lt;/h1&gt;\n}\n</code></pre></p> <p>Good to know: If you forget to create <code>layout.tsx</code>, Next.js will automatically create this file when running the development server with <code>next dev</code>.</p>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/#the-pages-directory-optional","title":"The <code>pages</code> directory (optional)","text":"<p>If you prefer to use the Pages Router instead of the App Router, you can create a <code>pages/</code> directory at the root of your project.</p> <p>Then, add an <code>index.tsx</code> file inside your <code>pages</code> folder. This will be your home page (<code>/</code>):</p> <p>```tsx filename=\"pages/index.tsx\" switcher export default function Page() {   return Hello, Next.js! } <pre><code>Next, add an `_app.tsx` file inside `pages/` to define the global layout.\n\n```tsx filename=\"pages/_app.tsx\" switcher\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return &lt;Component {...pageProps} /&gt;\n}\n</code></pre></p> <p>```jsx filename=\"pages/_app.js\" switcher export default function App({ Component, pageProps }) {   return  } <pre><code>Finally, add a `_document.tsx` file inside `pages/` to control the initial response from the server.\n\n```tsx filename=\"pages/_document.tsx\" switcher\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    &lt;Html&gt;\n      &lt;Head /&gt;\n      &lt;body&gt;\n        &lt;Main /&gt;\n        &lt;NextScript /&gt;\n      &lt;/body&gt;\n    &lt;/Html&gt;\n  )\n}\n</code></pre></p> <p>Good to know: Although you can use both routers in the same project, routes in <code>app</code> will be prioritized over <code>pages</code>. We recommend using only one router in your new project to avoid confusion.</p>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/#the-public-folder-optional","title":"The <code>public</code> folder (optional)","text":"<p>Create a <code>public</code> folder to store static assets such as images, fonts, etc. Files inside <code>public</code> directory can then be referenced by your code starting from the base URL (<code>/</code>).</p>"},{"location":"Code/How_to_Next.js/Docs/1_Installation/#run-the-development-server","title":"Run the Development Server","text":"<ol> <li>Run <code>npm run dev</code> to start the development server.</li> <li>Visit <code>http://localhost:3000</code> to view your application.</li> <li>Edit <code>app/page.tsx</code> (or <code>pages/index.tsx</code>) file and save it to see the updated result in your browser.</li> </ol>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/","title":"2.1 Project Organization","text":"<p>Apart from routing folder and file conventions, Next.js is unopinionated about how you organize and colocate your project files.</p> <p>This page shares default behavior and features you can use to organize your project.</p> <ul> <li>Safe colocation by default</li> <li>Project organization features</li> <li>Project organization strategies</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#safe-colocation-by-default","title":"Safe colocation by default","text":"<p>In the <code>app</code> directory, nested folder hierarchy defines route structure.</p> <p>Each folder represents a route segment that is mapped to a corresponding segment in a URL path.</p> <p>However, even though route structure is defined through folders, a route is not publicly accessible until a <code>page.js</code> or <code>route.js</code> file is added to a route segment.</p> <p></p> <p>And, even when a route is made publicly accessible, only the content returned by <code>page.js</code> or <code>route.js</code> is sent to the client.</p> <p></p> <p>This means that project files can be safely colocated inside route segments in the <code>app</code> directory without accidentally being routable.</p> <p></p> <p>Good to know:</p> <ul> <li>This is different from the <code>pages</code> directory, where any file in <code>pages</code> is considered a route.</li> <li>While you can colocate your project files in <code>app</code> you don't have to. If you prefer, you can keep them outside the <code>app</code> directory.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#project-organization-features","title":"Project organization features","text":"<p>Next.js provides several features to help you organize your project.</p>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#private-folders","title":"Private Folders","text":"<p>Private folders can be created by prefixing a folder with an underscore: <code>_folderName</code></p> <p>This indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.</p> <p></p> <p>Since files in the <code>app</code> directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for:</p> <ul> <li>Separating UI logic from routing logic.</li> <li>Consistently organizing internal files across a project and the Next.js ecosystem.</li> <li>Sorting and grouping files in code editors.</li> <li>Avoiding potential naming conflicts with future Next.js file conventions.</li> </ul> <p>Good to know</p> <ul> <li>While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern.</li> <li>You can create URL segments that start with an underscore by prefixing the folder name with <code>%5F</code> (the URL-encoded form of an underscore): <code>%5FfolderName</code>.</li> <li>If you don't use private folders, it would be helpful to know Next.js special file conventions to prevent unexpected naming conflicts.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#route-groups","title":"Route Groups","text":"<p>Route groups can be created by wrapping a folder in parenthesis: <code>(folderName)</code></p> <p>This indicates the folder is for organizational purposes and should not be included in the route's URL path.</p> <p></p> <p>Route groups are useful for:</p> <ul> <li>Organizing routes into groups e.g. by site section, intent, or team.</li> <li>Enabling nested layouts in the same route segment level:</li> <li>Creating multiple nested layouts in the same segment, including multiple root layouts</li> <li>Adding a layout to a subset of routes in a common segment</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#src-directory","title":"<code>src</code> Directory","text":"<p>Next.js supports storing application code (including <code>app</code>) inside an optional <code>src</code> directory. This separates application code from project configuration files which mostly live in the root of a project.</p> <p></p>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#module-path-aliases","title":"Module Path Aliases","text":"<p>Next.js supports Module Path Aliases which make it easier to read and maintain imports across deeply nested project files.</p> <p>```jsx filename=\"app/dashboard/settings/analytics/page.js\" // before import { Button } from '../../../components/button'</p> <p>// after import { Button } from '@/components/button' ```</p>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#project-organization-strategies","title":"Project organization strategies","text":"<p>There is no \"right\" or \"wrong\" way when it comes to organizing your own files and folders in a Next.js project.</p> <p>The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.</p> <p>Good to know: In our examples below, we're using <code>components</code> and <code>lib</code> folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like <code>ui</code>, <code>utils</code>, <code>hooks</code>, <code>styles</code>, etc.</p>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#store-project-files-outside-of-app","title":"Store project files outside of <code>app</code>","text":"<p>This strategy stores all application code in shared folders in the root of your project and keeps the <code>app</code> directory purely for routing purposes.</p> <p></p>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#store-project-files-in-top-level-folders-inside-of-app","title":"Store project files in top-level folders inside of <code>app</code>","text":"<p>This strategy stores all application code in shared folders in the root of the <code>app</code> directory.</p> <p></p>"},{"location":"Code/How_to_Next.js/Docs/2.1_Project_Organization/#split-project-files-by-feature-or-route","title":"Split project files by feature or route","text":"<p>This strategy stores globally shared application code in the root <code>app</code> directory and splits more specific application code into the route segments that use them.</p> <p></p>"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/","title":"2 Project Structure","text":"<p>This page provides an overview of the project structure of a Next.js application. It covers top-level files and folders, configuration files, and routing conventions within the <code>app</code> and <code>pages</code> directories.</p> <p>Click the file and folder names to learn more about each convention.</p>"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#top-level-folders","title":"Top-level folders","text":"<p>Top-level folders are used to organize your application's code and static assets.</p> <p></p> Folder Desc <code>app</code> App Router <code>pages</code> Pages Router <code>public</code> Static assets to be served <code>src</code> Optional application source folder"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#top-level-files","title":"Top-level files","text":"<p>Top-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables.</p> Files Desc <code>next.config.js</code> Configuration file for Next.js <code>package.json</code> Project dependencies and scripts <code>instrumentation.ts</code> OpenTelemetry and Instrumentation file <code>middleware.ts</code> Next.js request middleware <code>.env</code> Environment variables <code>.env.local</code> Local environment variables <code>.env.production</code> Production environment variables <code>.env.development</code> Development environment variables <code>.eslintrc.json</code> Configuration file for ESLint <code>.gitignore</code> Git files and folders to ignore <code>next-env.d.ts</code> TypeScript declaration file for Next.js <code>tsconfig.json</code> Configuration file for TypeScript <code>jsconfig.json</code> Configuration file for JavaScript"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#app-routing-conventions","title":"<code>app</code> Routing Conventions","text":"<p>The following file conventions are used to define routes and handle metadata in the <code>app</code> router.</p>"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#routing-files","title":"Routing Files","text":"File Type Desc <code>layout</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Layout <code>page</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Page <code>loading</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Loading UI <code>not-found</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Not found UI <code>error</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Error UI <code>global-error</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Global error UI <code>route</code> <code>.js</code> <code>.ts</code> API endpoint <code>template</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Re-rendered layout <code>default</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Parallel route fallback page"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#nested-routes","title":"Nested Routes","text":"Example Folder Name Desc <code>folder</code> Route segment <code>folder/folder</code> Nested route segment"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#dynamic-routes","title":"Dynamic Routes","text":"Example Folder Name Desc <code>[folder]</code> Dynamic route segment <code>[...folder]</code> Catch-all route segment <code>[[...folder]]</code> Optional catch-all route segment"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#route-groups-and-private-folders","title":"Route Groups and Private Folders","text":"Example Folder Name Desc <code>(folder)</code> Group routes without affecting routing <code>_folder</code> Opt folder and all child segments out of routing"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#parallel-and-intercepted-routes","title":"Parallel and Intercepted Routes","text":"Example Folder Name Desc <code>@folder</code> Named slot <code>(.)folder</code> Intercept same level <code>(..)folder</code> Intercept one level above <code>(..)(..)folder</code> Intercept two levels above <code>(...)folder</code> Intercept from root"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#metadata-file-conventions","title":"Metadata File Conventions","text":""},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#app-icons","title":"App Icons","text":"File Type Desc <code>favicon</code> <code>.ico</code> Favicon file <code>icon</code> <code>.ico</code> <code>.jpg</code> <code>.jpeg</code> <code>.png</code> <code>.svg</code> App Icon file <code>icon</code> <code>.js</code> <code>.ts</code> <code>.tsx</code> Generated App Icon <code>apple-icon</code> <code>.jpg</code> <code>.jpeg</code>, <code>.png</code> Apple App Icon file <code>apple-icon</code> <code>.js</code> <code>.ts</code> <code>.tsx</code> Generated Apple App Icon"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#open-graph-and-twitter-images","title":"Open Graph and Twitter Images","text":"File Type Desc <code>opengraph-image</code> <code>.jpg</code> <code>.jpeg</code> <code>.png</code> <code>.gif</code> Open Graph image file <code>opengraph-image</code> <code>.js</code> <code>.ts</code> <code>.tsx</code> Generated Open Graph image <code>twitter-image</code> <code>.jpg</code> <code>.jpeg</code> <code>.png</code> <code>.gif</code> Twitter image file <code>twitter-image</code> <code>.js</code> <code>.ts</code> <code>.tsx</code> Generated Twitter image"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#seo","title":"SEO","text":"File Type Desc <code>sitemap</code> <code>.xml</code> Sitemap file <code>sitemap</code> <code>.js</code> <code>.ts</code> Generated Sitemap <code>robots</code> <code>.txt</code> Robots file <code>robots</code> <code>.js</code> <code>.ts</code> Generated Robots file"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#pages-routing-conventions","title":"<code>pages</code> Routing Conventions","text":"<p>The following file conventions are used to define routes in the <code>pages</code> router.</p>"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#special-files","title":"Special Files","text":"File Type Desc <code>_app</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Custom App <code>_document</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Custom Document <code>_error</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Custom Error Page <code>404</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> 404 Error Page <code>500</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> 500 Error Page"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#routes","title":"Routes","text":"Folder convention Type Desc <code>index</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Home page <code>folder/index</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Nested page File convention Type Desc <code>index</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Home page <code>file</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Nested page"},{"location":"Code/How_to_Next.js/Docs/2_Project_Structure/#dynamic-routes_1","title":"Dynamic Routes","text":"Folder convention Type Desc <code>[folder]/index</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Dynamic route segment <code>[...folder]/index</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Catch-all route segment <code>[[...folder]]/index</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Optional catch-all route segment File convention Type Desc <code>[file]</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Dynamic route segment <code>[...file]</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Catch-all route segment <code>[[...file]]</code> <code>.js</code> <code>.jsx</code> <code>.tsx</code> Optional catch-all route segment"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/","title":"3.1 Route Handlers","text":"<p>Route Handlers allow you to create custom request handlers for a given route using the Web\u00a0Request\u00a0and\u00a0Response\u00a0APIs.</p> <p></p> <p>Good to know: Route Handlers are only available inside the\u00a0<code>app</code>\u00a0directory. They are the equivalent of\u00a0API Routes\u00a0inside the\u00a0<code>pages</code>\u00a0directory meaning you\u00a0do not\u00a0need to use API Routes and Route Handlers together.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#convention","title":"Convention","text":"<p>Route Handlers are defined in a\u00a0<code>route.js|ts</code>\u00a0file\u00a0inside the\u00a0<code>app</code>\u00a0directory:</p> <p>```ts filename=\"app/api/route.ts\" switcher export async function GET(request: Request) {} <pre><code>```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {}\n</code></pre></p> <p>Route Handlers can be nested inside the\u00a0<code>app</code>\u00a0directory, similar to\u00a0<code>page.js</code>\u00a0and\u00a0<code>layout.js</code>. But there\u00a0cannot\u00a0be a\u00a0<code>route.js</code>\u00a0file at the same route segment level as\u00a0<code>page.js</code>.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#supported-http-methods","title":"Supported HTTP Methods","text":"<p>The following\u00a0HTTP methods\u00a0are supported:\u00a0<code>GET</code>,\u00a0<code>POST</code>,\u00a0<code>PUT</code>,\u00a0<code>PATCH</code>,\u00a0<code>DELETE</code>,\u00a0<code>HEAD</code>, and\u00a0<code>OPTIONS</code>. If an unsupported method is called, Next.js will return a\u00a0<code>405 Method Not Allowed</code>\u00a0response.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#extended-nextrequest-and-nextresponse-apis","title":"Extended\u00a0<code>NextRequest</code>\u00a0and\u00a0<code>NextResponse</code>\u00a0APIs","text":"<p>In addition to supporting native\u00a0Request\u00a0and\u00a0Response. Next.js extends them with\u00a0<code>NextRequest</code>\u00a0and\u00a0<code>NextResponse</code>\u00a0to provide convenient helpers for advanced use cases.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#behavior","title":"Behavior","text":""},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#caching","title":"Caching","text":"<p>Route Handlers are dynamic by default as of Next.js v15. To opt-in to caching for <code>GET</code> requests, you can use the following config:</p> <p>```ts filename=\"app/items/route.ts\" switcher // opt in to caching the route handler export const dynamic = 'force-static' // or 'error'</p> <p>export async function GET() {   const res = await fetch('https://data.mongodb-api.com/...', {     headers: {       'Content-Type': 'application/json',       'API-Key': process.env.DATA_API_KEY,     },   })   const data = await res.json()</p> <p>return Response.json({ data }) } <pre><code>```js filename=\"app/items/route.js\" switcher\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n</code></pre></p> <p>TypeScript Warning: <code>Response.json()</code> is only valid from TypeScript 5.2. If you use a lower TypeScript version, you can use <code>NextResponse.json()</code> for typed responses instead.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#route-resolution","title":"Route Resolution","text":"<p>You can consider a <code>route</code> the lowest level routing primitive.</p> <ul> <li>They do not participate in layouts or client-side navigations like <code>page</code>.</li> <li>There cannot be a <code>route.js</code> file at the same route as <code>page.js</code>.</li> </ul> Page Route Result <code>app/page.js</code> <code>app/route.js</code>  Conflict <code>app/page.js</code> <code>app/api/route.js</code>  Valid <code>app/[user]/page.js</code> <code>app/api/route.js</code>  Valid <p>Each <code>route.js</code> or <code>page.js</code> file takes over all HTTP verbs for that route.</p> <p>```jsx filename=\"app/page.js\" export default function Page() {   return Hello, Next.js! }</p> <p>// \u274c Conflict // <code>app/route.js</code> export async function POST(request) {} <pre><code>## Examples\n\nThe following examples show how to combine Route Handlers with other Next.js APIs and features.\n\n### Revalidating Cached Data\n\nYou can [revalidate cached data](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data) using the [`next.revalidate`](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data) option:\n\n```ts filename=\"app/items/route.ts\" switcher\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    next: { revalidate: 60 }, // Revalidate every 60 seconds\n  })\n  const data = await res.json()\n\n  return Response.json(data)\n}\n</code></pre></p> <p>```js filename=\"app/items/route.js\" switcher export async function GET() {   const res = await fetch('https://data.mongodb-api.com/...', {     next: { revalidate: 60 }, // Revalidate every 60 seconds   })   const data = await res.json()</p> <p>return Response.json(data) } <pre><code>Alternatively, you can use the [`revalidate` segment config option](/docs/app/api-reference/file-conventions/route-segment-config#revalidate):\n\n```ts\nexport const revalidate = 60\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#dynamic-functions","title":"Dynamic Functions","text":"<p>Route Handlers can be used with dynamic functions from Next.js, like <code>cookies</code> and <code>headers</code>.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#cookies","title":"Cookies","text":"<p>You can read or set cookies with <code>cookies</code> from <code>next/headers</code>. This server function can be called directly in a Route Handler, or nested inside of another function.</p> <p>Alternatively, you can return a new <code>Response</code> using the <code>Set-Cookie</code> header.</p> <p>```ts filename=\"app/api/route.ts\" switcher import { cookies } from 'next/headers'</p> <p>export async function GET(request: Request) {   const cookieStore = cookies()   const token = cookieStore.get('token')</p> <p>return new Response('Hello, Next.js!', {     status: 200,     headers: { 'Set-Cookie': <code>token=${token.value}</code> },   }) } <pre><code>```js filename=\"app/api/route.js\" switcher\nimport { cookies } from 'next/headers'\n\nexport async function GET(request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token}` },\n  })\n}\n</code></pre></p> <p>You can also use the underlying Web APIs to read cookies from the request (<code>NextRequest</code>):</p> <p>```ts filename=\"app/api/route.ts\" switcher import { type NextRequest } from 'next/server'</p> <p>export async function GET(request: NextRequest) {   const token = request.cookies.get('token') } <pre><code>```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {\n  const token = request.cookies.get('token')\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#headers","title":"Headers","text":"<p>You can read headers with <code>headers</code> from <code>next/headers</code>. This server function can be called directly in a Route Handler, or nested inside of another function.</p> <p>This <code>headers</code> instance is read-only. To set headers, you need to return a new <code>Response</code> with new <code>headers</code>.</p> <p>```ts filename=\"app/api/route.ts\" switcher import { headers } from 'next/headers'</p> <p>export async function GET(request: Request) {   const headersList = headers()   const referer = headersList.get('referer')</p> <p>return new Response('Hello, Next.js!', {     status: 200,     headers: { referer: referer },   }) } <pre><code>```js filename=\"app/api/route.js\" switcher\nimport { headers } from 'next/headers'\n\nexport async function GET(request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n</code></pre></p> <p>You can also use the underlying Web APIs to read headers from the request (<code>NextRequest</code>):</p> <p>```ts filename=\"app/api/route.ts\" switcher import { type NextRequest } from 'next/server'</p> <p>export async function GET(request: NextRequest) {   const requestHeaders = new Headers(request.headers) } <pre><code>```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {\n  const requestHeaders = new Headers(request.headers)\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#redirects","title":"Redirects","text":"<p>```ts filename=\"app/api/route.ts\" switcher import { redirect } from 'next/navigation'</p> <p>export async function GET(request: Request) {   redirect('https://nextjs.org/') } <pre><code>```js filename=\"app/api/route.js\" switcher\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  redirect('https://nextjs.org/')\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#dynamic-route-segments","title":"Dynamic Route Segments","text":"<p>We recommend reading the Defining Routes page before continuing.</p> <p>Route Handlers can use Dynamic Segments to create request handlers from dynamic data.</p> <p>```ts filename=\"app/items/[slug]/route.ts\" switcher export async function GET(   request: Request,   { params }: { params: { slug: string } } ) {   const slug = params.slug // 'a', 'b', or 'c' } <pre><code>```js filename=\"app/items/[slug]/route.js\" switcher\nexport async function GET(request, { params }) {\n  const slug = params.slug // 'a', 'b', or 'c'\n}\n</code></pre></p> Route Example URL <code>params</code> <code>app/items/[slug]/route.js</code> <code>/items/a</code> <code>{ slug: 'a' }</code> <code>app/items/[slug]/route.js</code> <code>/items/b</code> <code>{ slug: 'b' }</code> <code>app/items/[slug]/route.js</code> <code>/items/c</code> <code>{ slug: 'c' }</code>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#url-query-parameters","title":"URL Query Parameters","text":"<p>The request object passed to the Route Handler is a <code>NextRequest</code> instance, which has some additional convenience methods, including for more easily handling query parameters.</p> <p>```ts filename=\"app/api/search/route.ts\" switcher import { type NextRequest } from 'next/server'</p> <p>export function GET(request: NextRequest) {   const searchParams = request.nextUrl.searchParams   const query = searchParams.get('query')   // query is \"hello\" for /api/search?query=hello } <pre><code>```js filename=\"app/api/search/route.js\" switcher\nexport function GET(request) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#streaming","title":"Streaming","text":"<p>Streaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about the AI SDK.</p> <p>```ts filename=\"app/api/chat/route.ts\" switcher import { openai } from '@ai-sdk/openai' import { StreamingTextResponse, streamText } from 'ai'</p> <p>export async function POST(req) {   const { messages } = await req.json()   const result = await streamText({     model: openai('gpt-4-turbo'),     messages,   })</p> <p>return new StreamingTextResponse(result.toAIStream()) } <pre><code>```js filename=\"app/api/chat/route.js\" switcher\nimport { openai } from '@ai-sdk/openai'\nimport { StreamingTextResponse, streamText } from 'ai'\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json()\n  const result = await streamText({\n    model: openai('gpt-4-turbo'),\n    messages,\n  })\n\n  return new StreamingTextResponse(result.toAIStream())\n}\n</code></pre></p> <p>These abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly.</p> <p>```ts filename=\"app/api/route.ts\" switcher // https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream function iteratorToStream(iterator: any) {   return new ReadableStream({     async pull(controller) {       const { value, done } = await iterator.next()</p> <pre><code>  if (done) {\n    controller.close()\n  } else {\n    controller.enqueue(value)\n  }\n},\n</code></pre> <p>}) }</p> <p>function sleep(time: number) {   return new Promise((resolve) =&gt; {     setTimeout(resolve, time)   }) }</p> <p>const encoder = new TextEncoder()</p> <p>async function* makeIterator() {   yield encoder.encode('<p>One</p>')   await sleep(200)   yield encoder.encode('<p>Two</p>')   await sleep(200)   yield encoder.encode('<p>Three</p>') }</p> <p>export async function GET() {   const iterator = makeIterator()   const stream = iteratorToStream(iterator)</p> <p>return new Response(stream) } <pre><code>```js filename=\"app/api/route.js\" switcher\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time) {\n  return new Promise((resolve) =&gt; {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('&lt;p&gt;One&lt;/p&gt;')\n  await sleep(200)\n  yield encoder.encode('&lt;p&gt;Two&lt;/p&gt;')\n  await sleep(200)\n  yield encoder.encode('&lt;p&gt;Three&lt;/p&gt;')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#request-body","title":"Request Body","text":"<p>You can read the <code>Request</code> body using the standard Web API methods:</p> <p>```ts filename=\"app/items/route.ts\" switcher export async function POST(request: Request) {   const res = await request.json()   return Response.json({ res }) } <pre><code>```js filename=\"app/items/route.js\" switcher\nexport async function POST(request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#request-body-formdata","title":"Request Body FormData","text":"<p>You can read the <code>FormData</code> using the <code>request.formData()</code> function:</p> <p>```ts filename=\"app/items/route.ts\" switcher export async function POST(request: Request) {   const formData = await request.formData()   const name = formData.get('name')   const email = formData.get('email')   return Response.json({ name, email }) } <pre><code>```js filename=\"app/items/route.js\" switcher\nexport async function POST(request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n</code></pre></p> <p>Since <code>formData</code> data are all strings, you may want to use <code>zod-form-data</code> to validate the request and retrieve data in the format you prefer (e.g. <code>number</code>).</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#cors","title":"CORS","text":"<p>You can set CORS headers for a specific Route Handler using the standard Web API methods:</p> <p>```ts filename=\"app/api/route.ts\" switcher export async function GET(request: Request) {   return new Response('Hello, Next.js!', {     status: 200,     headers: {       'Access-Control-Allow-Origin': '*',       'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',       'Access-Control-Allow-Headers': 'Content-Type, Authorization',     },   }) } <pre><code>```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n</code></pre></p> <p>Good to know:</p> <ul> <li>To add CORS headers to multiple Route Handlers, you can use Middleware or the <code>next.config.js</code> file.</li> <li>Alternatively, see our CORS example package.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#webhooks","title":"Webhooks","text":"<p>You can use a Route Handler to receive webhooks from third-party services:</p> <p><code>``ts filename=\"app/api/route.ts\" switcher export async function POST(request: Request) {   try {     const text = await request.text()     // Process the webhook payload   } catch (error) {     return new Response(</code>Webhook error: ${error.message}`, {       status: 400,     })   }</p> <p>return new Response('Success!', {     status: 200,   }) } <pre><code>```js filename=\"app/api/route.js\" switcher\nexport async function POST(request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n</code></pre></p> <p>Notably, unlike API Routes with the Pages Router, you do not need to use <code>bodyParser</code> to use any additional configuration.</p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#non-ui-responses","title":"Non-UI Responses","text":"<p>You can use Route Handlers to return non-UI content. Note that <code>sitemap.xml</code>, <code>robots.txt</code>, <code>app icons</code>, and open graph images all have built-in support.</p> <p><code>``ts filename=\"app/rss.xml/route.ts\" switcher export async function GET() {   return new Response(</code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;  <p> Next.js Documentation https://nextjs.org/docs The React Framework for the Web </p> <p>`,     {       headers: {         'Content-Type': 'text/xml',       },     }   ) } <pre><code>```js filename=\"app/rss.xml/route.js\" switcher\nexport async function GET() {\n  return new Response(`&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;rss version=\"2.0\"&gt;\n\n&lt;channel&gt;\n  &lt;title&gt;Next.js Documentation&lt;/title&gt;\n  &lt;link&gt;https://nextjs.org/docs&lt;/link&gt;\n  &lt;description&gt;The React Framework for the Web&lt;/description&gt;\n&lt;/channel&gt;\n\n&lt;/rss&gt;`)\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/3.1_Route_Handlers/#segment-config-options","title":"Segment Config Options","text":"<p>Route Handlers use the same route segment configuration as pages and layouts.</p> <p>```ts filename=\"app/items/route.ts\" switcher export const dynamic = 'auto' export const dynamicParams = true export const revalidate = false export const fetchCache = 'auto' export const runtime = 'nodejs' export const preferredRegion = 'auto' <pre><code>```js filename=\"app/items/route.js\" switcher\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n</code></pre></p> <p>See the API reference for more details.</p>"},{"location":"Code/How_to_Next.js/Docs/3.2_Routing_Misc/","title":"3.2 Routing Misc","text":"Topic Redirecting Route Groups Dynamic Routes Parallel Routes Intercepting Routes Middleware"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/","title":"3 Pages and Routing","text":"<p>This page will guide you through how to define and organize routes in your Next.js application.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#creating-routes","title":"Creating Routes","text":"<p>Next.js uses a file-system based router where folders are used to define routes.</p> <p>Each folder represents a route segment that maps to a URL segment. To create a nested route, you can nest folders inside each other.</p> <p>A special <code>page.js</code> file is used to make route segments publicly accessible.</p> <p>In this example, the <code>/dashboard/analytics</code> URL path is not publicly accessible because it does not have a corresponding <code>page.js</code> file. This folder could be used to store components, stylesheets, images, or other colocated files.</p> <p>Good to know: <code>.js</code>, <code>.jsx</code>, or <code>.tsx</code> file extensions can be used for special files.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#creating-ui","title":"Creating UI","text":"<p>Special file conventions are used to create UI for each route segment. The most common are pages to show UI unique to a route, and layouts to show UI that is shared across multiple routes.</p> <p>For example, to create your first page, add a <code>page.js</code> file inside the <code>app</code> directory and export a React component:</p> <p>```tsx filename=\"app/page.tsx\" switcher export default function Page() {   return Hello, Next.js! } <pre><code>```jsx filename=\"app/page.js\" switcher\nexport default function Page() {\n  return &lt;h1&gt;Hello, Next.js!&lt;/h1&gt;\n}\n</code></pre></p> <p>A page is UI that is unique to a route. You can define a page by default exporting a component from a <code>page.js</code> file.</p> <p>For example, to create your <code>index</code> page, add the <code>page.js</code> file inside the <code>app</code> directory:</p> <p><code>``tsx filename=\"app/page.tsx\" switcher //</code>app/page.tsx<code>is the UI for the</code>/` URL export default function Page() {   return Hello, Home page! } <pre><code>```jsx filename=\"app/page.js\" switcher\n// `app/page.js` is the UI for the `/` URL\nexport default function Page() {\n  return &lt;h1&gt;Hello, Home page!&lt;/h1&gt;\n}\n</code></pre></p> <p>Then, to create further pages, create a new folder and add the <code>page.js</code> file inside it. For example, to create a page for the <code>/dashboard</code> route, create a new folder called <code>dashboard</code>, and add the <code>page.js</code> file inside it:</p> <p><code>``tsx filename=\"app/dashboard/page.tsx\" switcher //</code>app/dashboard/page.tsx<code>is the UI for the</code>/dashboard` URL export default function Page() {   return Hello, Dashboard Page! } <pre><code>```jsx filename=\"app/dashboard/page.js\" switcher\n// `app/dashboard/page.js` is the UI for the `/dashboard` URL\nexport default function Page() {\n  return &lt;h1&gt;Hello, Dashboard Page!&lt;/h1&gt;\n}\n</code></pre></p> <p>Good to know:</p> <ul> <li>The <code>.js</code>, <code>.jsx</code>, or <code>.tsx</code> file extensions can be used for Pages.</li> <li>A page is always the leaf of the route subtree.</li> <li>A <code>page.js</code> file is required to make a route segment publicly accessible.</li> <li>Pages are Server Components by default, but can be set to a Client Component.</li> <li>Pages can fetch data. View the Data Fetching section for more information.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#linking-and-navigating","title":"Linking and Navigating","text":"<p>There are four ways to navigate between routes in Next.js:</p> <ul> <li>Using the <code>&lt;Link&gt;</code> Component</li> <li>Using the <code>useRouter</code> hook (Client Components)</li> <li>Using the <code>redirect</code> function (Server Components)</li> <li>Using the native History API</li> </ul> <p>This page will go through how to use each of these options, and dive deeper into how navigation works.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#link-component","title":"<code>&lt;Link&gt;</code> Component","text":"<p><code>&lt;Link&gt;</code> is a built-in component that extends the HTML <code>&lt;a&gt;</code> tag to provide prefetching and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js.</p> <p>You can use it by importing it from <code>next/link</code>, and passing a <code>href</code> prop to the component:</p> <p>```tsx filename=\"app/page.tsx\" switcher import Link from 'next/link'</p> <p>export default function Page() {   return Dashboard } <pre><code>```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return &lt;Link href=\"/dashboard\"&gt;Dashboard&lt;/Link&gt;\n}\n</code></pre></p> <p>There are other optional props you can pass to <code>&lt;Link&gt;</code>.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#examples","title":"Examples","text":""},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#linking-to-dynamic-segments","title":"Linking to Dynamic Segments","text":"<p>When linking to dynamic segments, you can use template literals and interpolation to generate a list of links. For example, to generate a list of blog posts:</p> <p>```jsx filename=\"app/blog/PostList.js\" import Link from 'next/link'</p> <p>export default function PostList({ posts }) {   return (     <ul>       {posts.map((post) =&gt; (         <li> /blog/${post.slug}}&gt;{post.title} </li>       ))}     </ul>   ) } <pre><code>##### Checking Active Links\n\nYou can use `usePathname()` to determine if a link is active. For example, to add a class to the active link, you can check if the current `pathname` matches the `href` of the link:\n\n```tsx filename=\"@/app/ui/nav-links.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    &lt;nav&gt;\n      &lt;Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\"&gt;\n        Home\n      &lt;/Link&gt;\n\n      &lt;Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      &gt;\n        About\n      &lt;/Link&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre></p> <p>```jsx filename=\"@/app/ui/nav-links.tsx\" switcher 'use client'</p> <p>import { usePathname } from 'next/navigation' import Link from 'next/link'</p> <p>export function Links() {   const pathname = usePathname()</p> <p>return (      link ${pathname === '/' ? 'active' : ''}} href=\"/\"&gt;         Home        <pre><code>  &lt;Link\n    className={`link ${pathname === '/about' ? 'active' : ''}`}\n    href=\"/about\"\n  &gt;\n    About\n  &lt;/Link&gt;\n&lt;/nav&gt;\n</code></pre> <p>) } ``` </p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#scrolling-to-an-id","title":"Scrolling to an <code>id</code>","text":"<p>The default behavior of the Next.js App Router is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.  If you'd like to scroll to a specific <code>id</code> on navigation, you can append your URL with a <code>#</code> hash link or just pass a hash link to the <code>href</code> prop. This is possible since <code>&lt;Link&gt;</code> renders to an <code>&lt;a&gt;</code> element.  <code>jsx &lt;Link href=\"/dashboard#settings\"&gt;Settings&lt;/Link&gt;  // Output &lt;a href=\"/dashboard#settings\"&gt;Settings&lt;/a&gt;</code></p> <p>Good to know:</p> <ul> <li>Next.js will scroll to the Page if it is not visible in the viewport upon navigation.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#disabling-scroll-restoration","title":"Disabling scroll restoration","text":"<p>The default behavior of the Next.js App Router is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation. If you'd like to disable this behavior, you can pass <code>scroll={false}</code> to the <code>&lt;Link&gt;</code> component, or <code>scroll: false</code> to <code>router.push()</code> or <code>router.replace()</code>.</p> <pre><code>// next/link\n&lt;Link href=\"/dashboard\" scroll={false}&gt;\n  Dashboard\n&lt;/Link&gt;\n</code></pre> <pre><code>// useRouter\nimport { useRouter } from 'next/navigation'\n\nconst router = useRouter()\n\nrouter.push('/dashboard', { scroll: false })\n</code></pre>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#userouter-hook","title":"<code>useRouter()</code> hook","text":"<p>The <code>useRouter</code> hook allows you to programmatically change routes from *Client Components*.</p> <p>```jsx filename=\"app/page.js\" 'use client'</p> <p>import { useRouter } from 'next/navigation'</p> <p>export default function Page() {   const router = useRouter()</p> <p>return (      router.push('/dashboard')}&gt;       Dashboard        ) } <pre><code>&gt; **Recommendation:** Use the `&lt;Link&gt;` component to navigate between routes unless you have a specific requirement for using `useRouter`.\n\n### `redirect` function\n\nFor **Server Components**, use the `redirect` function instead.\n\n```tsx filename=\"app/team/[id]/page.tsx\" switcher\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }: { params: { id: string } }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n</code></pre></p> <p>```jsx filename=\"app/team/[id]/page.js\" switcher import { redirect } from 'next/navigation'</p> <p>async function fetchTeam(id) {   const res = await fetch('https://...')   if (!res.ok) return undefined   return res.json() }</p> <p>export default async function Profile({ params }) {   const team = await fetchTeam(params.id)   if (!team) {     redirect('/login')   }</p> <p>// ... } <pre><code>&gt; **Good to know**:\n&gt;\n&gt; - `redirect` returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.\n&gt; - `redirect` internally throws an error so it should be called outside of `try/catch` blocks.\n&gt; - `redirect` can be called in Client Components during the rendering process but not in event handlers. You can use the [`useRouter` hook](#userouter-hook) instead.\n&gt; - `redirect` also accepts absolute URLs and can be used to redirect to external links.\n&gt; - If you'd like to redirect before the render process, use `next.config.js` or ****Middleware****.\n\nSee the **`redirect` API reference** for more information.\n\n### Using the native History API\n\nNext.js allows you to use the native `window.history.pushState` and `window.history.replaceState` methods to update the browser's history stack without reloading the page.\n\n`pushState` and `replaceState` calls integrate into the Next.js Router, allowing you to sync with **`usePathname`** and **`useSearchParams`**.\n\n#### `window.history.pushState`\n\nUse it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:\n\n```tsx fileName=\"app/ui/sort-products.tsx\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; updateSorting('asc')}&gt;Sort Ascending&lt;/button&gt;\n      &lt;button onClick={() =&gt; updateSorting('desc')}&gt;Sort Descending&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre></p> <p>```jsx fileName=\"app/ui/sort-products.js\" switcher 'use client'</p> <p>import { useSearchParams } from 'next/navigation'</p> <p>export default function SortProducts() {   const searchParams = useSearchParams()</p> <p>function updateSorting(sortOrder) {     const params = new URLSearchParams(searchParams.toString())     params.set('sort', sortOrder)     window.history.pushState(null, '', <code>?${params.toString()}</code>)   }</p> <p>return (     &lt;&gt;        updateSorting('asc')}&gt;Sort Ascending  updateSorting('desc')}&gt;Sort Descending    ) } <pre><code>#### `window.history.replaceState`\n\nUse it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:\n\n```tsx fileName=\"app/ui/locale-switcher.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n\n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; switchLocale('en')}&gt;English&lt;/button&gt;\n      &lt;button onClick={() =&gt; switchLocale('fr')}&gt;French&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre></p> <p>```jsx fileName=\"app/ui/locale-switcher.js\" switcher 'use client'</p> <p>import { usePathname } from 'next/navigation'</p> <p>export function LocaleSwitcher() {   const pathname = usePathname()</p> <p>function switchLocale(locale) {     // e.g. '/en/about' or '/fr/contact'     const newPath = <code>/${locale}${pathname}</code>     window.history.replaceState(null, '', newPath)   }</p> <p>return (     &lt;&gt;        switchLocale('en')}&gt;English  switchLocale('fr')}&gt;French    ) } ```</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#how-routing-and-navigation-works","title":"How Routing and Navigation Works","text":"<p>The App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically code-split by route segments. And on the client, Next.js prefetches and caches the route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#1-code-splitting","title":"1. Code Splitting","text":"<p>Code splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance.</p> <p>Server Components allow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#2-prefetching","title":"2. Prefetching","text":"<p>Prefetching is a way to preload a route in the background before the user visits it.</p> <p>There are two ways routes are prefetched in Next.js:</p> <ul> <li><code>&lt;Link&gt;</code> component: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.</li> <li><code>router.prefetch()</code>: The <code>useRouter</code> hook can be used to prefetch routes programmatically.</li> </ul> <p>The <code>&lt;Link&gt;</code>'s default prefetching behavior (i.e. when the <code>prefetch</code> prop is left unspecified or set to <code>null</code>) is different depending on your usage of <code>loading.</code>. Only the shared layout, down the rendered \"tree\" of components until the first <code>loading.js</code> file, is prefetched and cached for <code>30s</code>. This reduces the cost of fetching an entire dynamic route, and it means you can show an instant loading state for better visual feedback to users.</p> <p>You can disable prefetching by setting the <code>prefetch</code> prop to <code>false</code>. Alternatively, you can prefetch the full page data beyond the loading boundaries by setting the <code>prefetch</code> prop to <code>true</code>.</p> <p>See the <code>&lt;Link&gt;</code> API reference for more information.</p> <p>Good to know:</p> <ul> <li>Prefetching is not enabled in development, only in production.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#3-caching","title":"3. Caching","text":"<p>Next.js has an in-memory client-side cache called the Router Cache. As users navigate around the app, the React Server Component Payload of prefetched route segments and visited routes are stored in the cache.</p> <p>This means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred.</p> <p>Learn more about how the Router Cache works and how to configure it.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#4-partial-rendering","title":"4. Partial Rendering","text":"<p>Partial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved.</p> <p>For example, when navigating between two sibling routes, <code>/dashboard/settings</code> and <code>/dashboard/analytics</code>, the <code>settings</code> and <code>analytics</code> pages will be rendered, and the shared <code>dashboard</code> layout will be preserved.</p> <p></p> <p>Without partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#5-soft-navigation","title":"5. Soft Navigation","text":"<p>Browsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#6-back-and-forward-navigation","title":"6. Back and Forward Navigation","text":"<p>By default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in the Router Cache.</p>"},{"location":"Code/How_to_Next.js/Docs/3_Pages_and_Routing/#7-routing-between-pages-and-app","title":"7. Routing between <code>pages/</code> and <code>app/</code>","text":"<p>When incrementally migrating from <code>pages/</code> to <code>app/</code>, the Next.js router will automatically handle hard navigation between the two. To detect transitions from <code>pages/</code> to <code>app/</code>, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via the <code>experimental.clientRouterFilterAllowedRate</code> option in <code>next.config.js</code>. It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle.</p> <p>Alternatively, if you prefer to disable this handling completely and manage the routing between <code>pages/</code> and <code>app/</code> manually, you can set <code>experimental.clientRouterFilter</code> to false in <code>next.config.js</code>. When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default.</p>"},{"location":"Code/How_to_Next.js/Docs/4_Components_and_Layouts/","title":"4 Components and Layouts","text":"<p>The special files layout.js and template.js allow you to create UI that is shared between routes. This page will guide you through how and when to use these special files.</p>"},{"location":"Code/How_to_Next.js/Docs/4_Components_and_Layouts/#layouts","title":"Layouts","text":"<p>A layout is UI that is shared between multiple routes. On navigation, layouts preserve state, remain interactive, and do not re-render. Layouts can also be nested.</p> <p>You can define a layout by default exporting a React component from a <code>layout.js</code> file. The component should accept a <code>children</code> prop that will be populated with a child layout (if it exists) or a page during rendering.</p> <p>For example, the layout will be shared with the <code>/dashboard</code> and <code>/dashboard/settings</code> pages:</p> <p>```tsx filename=\"app/dashboard/layout.tsx\" switcher export default function DashboardLayout({   children, // will be a page or nested layout }: {   children: React.ReactNode }) {   return (            {/ Include shared UI here e.g. a header or sidebar /}        <pre><code>  {children}\n&lt;/section&gt;\n</code></pre> <p>) } <code></code>jsx filename=\"app/dashboard/layout.js\" switcher export default function DashboardLayout({   children, // will be a page or nested layout }) {   return (            {/ Include shared UI here e.g. a header or sidebar /}               {children}        ) } ```</p>"},{"location":"Code/How_to_Next.js/Docs/4_Components_and_Layouts/#root-layout-required","title":"Root Layout (Required)","text":"<p>The root layout is defined at the top level of the <code>app</code> directory and applies to all routes. This layout is required and must contain <code>html</code> and <code>body</code> tags, allowing you to modify the initial HTML returned from the server.</p> <p>```tsx filename=\"app/layout.tsx\" switcher export default function RootLayout({   children, }: {   children: React.ReactNode }) {   return (               {/ Layout UI /}         {children}    ) } <pre><code>```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"en\"&gt;\n      &lt;body&gt;\n        {/* Layout UI */}\n        &lt;main&gt;{children}&lt;/main&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  )\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/4_Components_and_Layouts/#nesting-layouts","title":"Nesting Layouts","text":"<p>By default, layouts in the folder hierarchy are nested, which means they wrap child layouts via their <code>children</code> prop. You can nest layouts by adding <code>layout.js</code> inside specific route segments (folders).</p> <p>For example, to create a layout for the <code>/dashboard</code> route, add a new <code>layout.js</code> file inside the <code>dashboard</code> folder:</p> <p>```tsx filename=\"app/dashboard/layout.tsx\" switcher export default function DashboardLayout({   children, }: {   children: React.ReactNode }) {   return {children} } <pre><code>```jsx filename=\"app/dashboard/layout.js\" switcher\nexport default function DashboardLayout({ children }) {\n  return &lt;section&gt;{children}&lt;/section&gt;\n}\n</code></pre></p> <p>If you were to combine the two layouts above, the root layout (<code>app/layout.js</code>) would wrap the dashboard layout (<code>app/dashboard/layout.js</code>), which would wrap route segments inside <code>app/dashboard/*</code>.</p> <p>The two layouts would be nested as such:</p> <p>Good to know:</p> <ul> <li><code>.js</code>, <code>.jsx</code>, or <code>.tsx</code> file extensions can be used for Layouts.</li> <li>Only the root layout can contain <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags.</li> <li>When a <code>layout.js</code> and <code>page.js</code> file are defined in the same folder, the layout will wrap the page.</li> <li>Layouts are Server Components by default but can be set to a Client Component.</li> <li>Layouts can fetch data. View the Data Fetching section for more information.</li> <li>Passing data between a parent layout and its children is not possible. However, you can fetch the same data in a route more than once, and React will automatically dedupe the requests without affecting performance.</li> <li>Layouts do not have access to <code>pathname</code>. But imported Client Components can access the pathname using <code>usePathname</code> hook.</li> <li>Layouts do not have access to the route segments below itself. To access all route segments, you can use <code>useSelectedLayoutSegment</code> or <code>useSelectedLayoutSegments</code> in a Client Component.</li> <li>You can use Route Groups to opt specific route segments in and out of shared layouts.</li> <li>You can use Route Groups to create multiple root layouts.</li> <li>Migrating from the <code>pages</code> directory: The root layout replaces the <code>_app.js</code> and <code>_document.js</code> files.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/4_Components_and_Layouts/#templates","title":"Templates","text":"<p>Templates are similar to layouts in that they wrap a child layout or page. Unlike layouts that persist across routes and maintain state, templates create a new instance for each of their children on navigation. This means that when a user navigates between routes that share a template, a new instance of the child is mounted, DOM elements are recreated, state is not preserved in Client Components, and effects are re-synchronized.</p> <p>There may be cases where you need those specific behaviors, and templates would be a more suitable option than layouts. For example:</p> <ul> <li>To resynchronize <code>useEffect</code> on navigation.</li> <li>To reset the state of a child Client Components on navigation.</li> </ul> <p>A template can be defined by exporting a default React component from a <code>template.js</code> file. The component should accept a <code>children</code> prop.</p> <p>```tsx filename=\"app/template.tsx\" switcher export default function Template({ children }: { children: React.ReactNode }) {   return {children} } <pre><code>```jsx filename=\"app/template.js\" switcher\nexport default function Template({ children }) {\n  return &lt;div&gt;{children}&lt;/div&gt;\n}\n</code></pre></p> <p>In terms of nesting, <code>template.js</code> is rendered between a layout and its children. Here's a simplified output:</p> <p>```jsx filename=\"Output\"    {/ Note that the template is given a unique key. /}   {children} <pre><code>## Examples\n\n### Metadata\n\nYou can modify the `&lt;head&gt;` HTML elements such as `title` and `meta` using the **Metadata APIs**.\n\nMetadata can be defined by exporting a **`metadata` object** or **`generateMetadata` function** in a `layout.js` or `page.js` file.\n\n```tsx filename=\"app/page.tsx\" switcher\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n</code></pre></p> <p>```jsx filename=\"app/page.js\" switcher export const metadata = {   title: 'Next.js', }</p> <p>export default function Page() {   return '...' } <pre><code>&gt; **Good to know**: You should **not** manually add `&lt;head&gt;` tags such as `&lt;title&gt;` and `&lt;meta&gt;` to root layouts. Instead, use the **Metadata API** which automatically handles advanced requirements such as streaming and de-duplicating `&lt;head&gt;` elements.\n\n### Active Nav Links\n\nYou can use the `usePathname()` hook to determine if a nav link is active.\n\nSince `usePathname()` is a client hook, you need to extract the nav links into a Client Component, which can be imported into your layout or template:\n\n```tsx filename=\"app/ui/nav-links.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function NavLinks() {\n  const pathname = usePathname()\n\n  return (\n    &lt;nav&gt;\n      &lt;Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\"&gt;\n        Home\n      &lt;/Link&gt;\n\n      &lt;Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      &gt;\n        About\n      &lt;/Link&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre></p> <p>```jsx filename=\"app/ui/nav-links.js\" switcher 'use client'</p> <p>import { usePathname } from 'next/navigation' import Link from 'next/link'</p> <p>export function Links() {   const pathname = usePathname()</p> <p>return (      link ${pathname === '/' ? 'active' : ''}} href=\"/\"&gt;         Home        <pre><code>  &lt;Link\n    className={`link ${pathname === '/about' ? 'active' : ''}`}\n    href=\"/about\"\n  &gt;\n    About\n  &lt;/Link&gt;\n&lt;/nav&gt;\n</code></pre> <p>) } <code></code>tsx filename=\"app/layout.tsx\" switcher import { NavLinks } from '@/app/ui/nav-links'  export default function Layout({ children }: { children: React.ReactNode }) {   return (      {children}    ) } ```</p> <p>```jsx filename=\"app/layout.js\" switcher import { NavLinks } from '@/app/ui/nav-links'</p> <p>export default function Layout({ children }) {   return (      {children}    ) } ```</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/","title":"5 Data Fetching","text":""},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-caching-and-revalidating","title":"Fetching, Caching, and Revalidating","text":"<p>Data fetching is a core part of any application. This page goes through how you can fetch, cache, and revalidate data in React and Next.js.</p> <p>There are four ways you can fetch data:</p> <ol> <li>On the server, with <code>fetch</code></li> <li>On the server, with third-party libraries</li> <li>On the client, via a Route Handler</li> <li>On the client, with third-party libraries</li> </ol>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-data-on-the-server-with-fetch","title":"Fetching Data on the Server with <code>fetch</code>","text":"<p>Next.js extends the native <code>fetch</code> Web API to allow you to configure the caching and revalidating behavior for each fetch request on the server. React extends <code>fetch</code> to automatically  memoize fetch requests while rendering a React component tree.</p> <p>You can use <code>fetch</code> with <code>async</code>/<code>await</code> in Server Components, in Route Handlers, and in Server Actions.</p> <p>For example:</p> <p>```tsx filename=\"app/page.tsx\" switcher async function getData() {   const res = await fetch('https://api.example.com/...')   // The return value is not serialized   // You can return Date, Map, Set, etc.</p> <p>if (!res.ok) {     // This will activate the closest <code>error.js</code> Error Boundary     throw new Error('Failed to fetch data')   }</p> <p>return res.json() }</p> <p>export default async function Page() {   const data = await getData()</p> <p>return  } <pre><code>```jsx filename=\"app/page.js\" switcher\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n\n  if (!res.ok) {\n    // This will activate the closest `error.js` Error Boundary\n    throw new Error('Failed to fetch data')\n  }\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const data = await getData()\n\n  return &lt;main&gt;&lt;/main&gt;\n}\n</code></pre></p> <p>Good to know:</p> <ul> <li>Next.js provides helpful functions you may need when fetching data in Server Components such as <code>cookies</code>api-reference/functions/cookies) and <code>headers</code>api-reference/functions/headers). These will cause the route to be dynamically rendered as they rely on request time information.</li> <li>In Route handlers, <code>fetch</code> requests are not memoized as Route Handlers are not part of the React component tree.</li> <li>In Server Actions, <code>fetch</code> requests are not cached (defaults <code>cache: no-store</code>).</li> <li>To use <code>async</code>/<code>await</code> in a Server Component with TypeScript, you'll need to use TypeScript <code>5.1.3</code> or higher and <code>@types/react</code> <code>18.2.8</code> or higher.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#caching-data","title":"Caching Data","text":"<p>Caching stores data so it doesn't need to be re-fetched from your data source on every request.</p> <p>By default, Next.js automatically caches the returned values of <code>fetch</code> in the Data Cache on the server. This means that the data can be fetched at build time or request time, cached, and reused on each data request.</p> <pre><code>// 'force-cache' is the default, and can be omitted\nfetch('https://...', { cache: 'force-cache' })\n</code></pre> <p>However, there are exceptions, <code>fetch</code> requests are not cached when:</p> <ul> <li>Used inside a Server Action.</li> <li>Used inside a Route Handler that uses the <code>POST</code> method.</li> </ul> <p>What is the Data Cache?</p> <p>The Data Cache is a persistent HTTP cache. Depending on your platform, the cache can scale automatically and be shared across multiple regions.</p> <p>Learn more about the Data Cache.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#revalidating-data","title":"Revalidating Data","text":"<p>Revalidation is the process of purging the Data Cache and re-fetching the latest data. This is useful when your data changes and you want to ensure you show the latest information.</p> <p>Cached data can be revalidated in two ways:</p> <ul> <li>Time-based revalidation: Automatically revalidate data after a certain amount of time has passed. This is useful for data that changes infrequently and freshness is not as critical.</li> <li>On-demand revalidation: Manually revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated).</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#time-based-revalidation","title":"Time-based Revalidation","text":"<p>To revalidate data at a timed interval, you can use the <code>next.revalidate</code> option of <code>fetch</code> to set the cache lifetime of a resource (in seconds).</p> <pre><code>fetch('https://...', { next: { revalidate: 3600 } })\n</code></pre> <p>Alternatively, to revalidate all <code>fetch</code> requests in a route segment, you can use the Segment Config Optionsapi-reference/file-conventions/route-segment-config).</p> <p>```jsx filename=\"layout.js | page.js\" export const revalidate = 3600 // revalidate at most every hour <pre><code>If you have multiple fetch requests in a statically rendered route, and each has a different revalidation frequency. The lowest time will be used for all requests. For dynamically rendered routes, each `fetch` request will be revalidated independently.\n\nLearn more about time-based revalidation.\n\n##### On-demand Revalidation\n\nData can be revalidated on-demand by path or by cache tag inside a Server Action or Route Handler.\n\nNext.js has a cache tagging system for invalidating `fetch` requests across routes.\n\n1. When using `fetch`, you have the option to tag cache entries with one or more tags.\n2. Then, you can call `revalidateTag` to revalidate all entries associated with that tag.\n\nFor example, the following `fetch` request adds the cache tag `collection`:\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default async function Page() {\n  const res = await fetch('https://...', { next: { tags: 'collection'] } })\n  const data = await res.json()\n  // ...\n}\n</code></pre></p> <p>```jsx filename=\"app/page.js\" switcher export default async function Page() {   const res = await fetch('https://...', { next: { tags: 'collection'] } })   const data = await res.json()   // ... } <pre><code>You can then revalidate this `fetch` call tagged with `collection` by calling `revalidateTag` in a Server Action:\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function action() {\n  revalidateTag('collection')\n}\n</code></pre></p> <p>```js filename=\"app/actions.js\" switcher 'use server'</p> <p>import { revalidateTag } from 'next/cache'</p> <p>export default async function action() {   revalidateTag('collection') } <pre><code>##### Error handling and revalidation\n\nIf an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data.\n\n#### Opting out of Data Caching\n\n`fetch` requests are **not** cached if:\n\n- The `cache: 'no-store'` is added to `fetch` requests.\n- The `revalidate: 0` option is added to individual `fetch` requests.\n- The `fetch` request is inside a Router Handler that uses the `POST` method.\n- The `fetch` request comes after the usage of `headers` or `cookies`.\n- The `const dynamic = 'force-dynamic'` route segment option is used.\n- The `fetchCache` route segment option is configured to skip cache by default.\n- The `fetch` request uses `Authorization` or `Cookie` headers and there's an uncached request above it in the component tree.\n\n##### Individual `fetch` Requests\n\nTo opt out of caching for individual `fetch` requests, you can set the `cache` option in `fetch` to `'no-store'`. This will fetch data dynamically, on every request.\n\n```js filename=\"layout.js | page.js\"\nfetch('https://...', { cache: 'no-store' })\n</code></pre></p> <p>View all the available <code>cache</code> options in the <code>fetch</code> API referenceapi-reference/functions/fetch).</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#multiple-fetch-requests","title":"Multiple <code>fetch</code> Requests","text":"<p>If you have multiple <code>fetch</code> requests in a route segment (e.g. a Layout or Page), you can configure the caching behavior of all data requests in the segment using the Segment Config Optionsapi-reference/file-conventions/route-segment-config).</p> <p>However, we recommend configuring the caching behavior of each <code>fetch</code> request individually. This gives you more granular control over the caching behavior.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-data-on-the-server-with-third-party-libraries","title":"Fetching data on the Server with third-party libraries","text":"<p>In cases where you're using a third-party library that doesn't support or expose <code>fetch</code> (for example, a database, CMS, or ORM client), you can configure the caching and revalidating behavior of those requests using the Route Segment Config Optionapi-reference/file-conventions/route-segment-config) and React's <code>cache</code> function.</p> <p>Whether the data is cached or not will depend on whether the route segment is statically or dynamically rendered. If the segment is static (default), the output of the request will be cached and revalidated as part of the route segment. If the segment is dynamic, the output of the request will not be cached and will be re-fetched on every request when the segment is rendered.</p> <p>You can also use the experimental <code>unstable_cache</code> APIapi-reference/functions/unstable_cache).</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#example","title":"Example","text":"<p>In the example below:</p> <ul> <li>The React <code>cache</code> function is used to  memoize data requests.</li> <li>The <code>revalidate</code> option is set to <code>3600</code> in the Layout and Page segments, meaning the data will be cached and revalidated at most every hour.</li> </ul> <p>```ts filename=\"app/utils.ts\" switcher import { cache } from 'react'</p> <p>export const getItem = cache(async (id: string) =&gt; {   const item = await db.item.findUnique({ id })   return item }) <pre><code>```js filename=\"app/utils.js\" switcher\nimport { cache } from 'react'\n\nexport const getItem = cache(async (id) =&gt; {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n</code></pre></p> <p>Although the <code>getItem</code> function is called twice, only one query will be made to the database.</p> <p>```tsx filename=\"app/item/[id]/layout.tsx\" switcher import { getItem } from '@/utils/get-item'</p> <p>export const revalidate = 3600 // revalidate the data at most every hour</p> <p>export default async function Layout({   params: { id }, }: {   params: { id: string } }) {   const item = await getItem(id)   // ... } <pre><code>```jsx filename=\"app/item/[id]/layout.js\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Layout({ params: { id } }) {\n  const item = await getItem(id)\n  // ...\n}\n</code></pre></p> <p>```tsx filename=\"app/item/[id]/page.tsx\" switcher import { getItem } from '@/utils/get-item'</p> <p>export const revalidate = 3600 // revalidate the data at most every hour</p> <p>export default async function Page({   params: { id }, }: {   params: { id: string } }) {   const item = await getItem(id)   // ... } <pre><code>```jsx filename=\"app/item/[id]/page.js\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Page({ params: { id } }) {\n  const item = await getItem(id)\n  // ...\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-data-on-the-client-with-route-handlers","title":"Fetching Data on the Client with Route Handlers","text":"<p>If you need to fetch data in a client component, you can call a Route Handler from the client. Route Handlers execute on the server and return the data to the client. This is useful when you don't want to expose sensitive information to the client, such as API tokens.</p> <p>Server Components and Route Handlers</p> <p>Since Server Components render on the server, you don't need to call a Route Handler from a Server Component to fetch data. Instead, you can fetch the data directly inside the Server Component.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-data-on-the-client-with-third-party-libraries","title":"Fetching Data on the Client with third-party libraries","text":"<p>You can also fetch data on the client using a third-party library such as SWR or TanStack Query. These libraries provide their own APIs for memoizing requests, caching, revalidating, and mutating data.</p> <p>Future APIs:</p> <p><code>use</code> is a React function that accepts and handles a promise returned by a function. Wrapping <code>fetch</code> in <code>use</code> is currently not recommended in Client Components and may trigger multiple re-renders. Learn more about <code>use</code> in the React docs.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#data-fetching-patterns-and-best-practices","title":"Data Fetching Patterns and Best Practices","text":"<p>There are a few recommended patterns and best practices for fetching data in React and Next.js. This page will go over some of the most common patterns and how to use them.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-data-on-the-server","title":"Fetching data on the server","text":"<p>Whenever possible, we recommend fetching data on the server with Server Components. This allows you to:</p> <ul> <li>Have direct access to backend data resources (e.g. databases).</li> <li>Keep your application more secure by preventing sensitive information, such as access tokens and API keys, from being exposed to the client.</li> <li>Fetch data and render in the same environment. This reduces both the back-and-forth communication between client and server, as well as the work on the main thread on the client.</li> <li>Perform multiple data fetches with single round-trip instead of multiple individual requests on the client.</li> <li>Reduce client-server waterfalls.</li> <li>Depending on your region, data fetching can also happen closer to your data source, reducing latency and improving performance.</li> </ul> <p>Then, you can mutate or update data with Server Actions.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#fetching-data-where-its-needed","title":"Fetching data where it's needed","text":"<p>If you need to use the same data (e.g. current user) in multiple components in a tree, you do not have to fetch data globally, nor forward props between components. Instead, you can use <code>fetch</code> or React <code>cache</code> in the component that needs the data without worrying about the performance implications of making multiple requests for the same data.</p> <p>This is possible because <code>fetch</code> requests are automatically memoized. Learn more about request memoization.</p> <p>Good to know: This also applies to layouts, since it's not possible to pass data between a parent layout and its children.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#streaming","title":"Streaming","text":"<p>Streaming and Suspense are React features that allow you to progressively render and incrementally stream rendered units of the UI to the client.</p> <p>With Server Components and nested layouts, you're able to instantly render parts of the page that do not specifically require data, and show a loading state for parts of the page that are fetching data. This means the user does not have to wait for the entire page to load before they can start interacting with it.</p> <p></p> <p>To learn more about Streaming and Suspense, see the Loading UI and Streaming and Suspense pages.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#parallel-and-sequential-data-fetching","title":"Parallel and sequential data fetching","text":"<p>When fetching data inside React components, you need to be aware of two data fetching patterns: Parallel and Sequential.</p> <p></p> <ul> <li>With sequential data fetching, requests in a route are dependent on each other and therefore create waterfalls. There may be cases where you want this pattern because one fetch depends on the result of the other, or you want a condition to be satisfied before the next fetch to save resources. However, this behavior can also be unintentional and lead to longer loading times.</li> <li>With parallel data fetching, requests in a route are eagerly initiated and will load data at the same time. This reduces client-server waterfalls and the total time it takes to load data.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#sequential-data-fetching","title":"Sequential Data Fetching","text":"<p>If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are different (this doesn't apply to requests for the same data as they are automatically memoized).</p> <p>For example, the <code>Playlists</code> component will only start fetching data once the <code>Artist</code> component has finished fetching data because <code>Playlists</code> depends on the <code>artistID</code> prop:</p> <p>```tsx filename=\"app/artist/[username]/page.tsx\" switcher // ...</p> <p>async function Playlists({ artistID }: { artistID: string }) {   // Wait for the playlists   const playlists = await getArtistPlaylists(artistID)</p> <p>return (     <ul>       {playlists.map((playlist) =&gt; (         <li>{playlist.name}</li>       ))}     </ul>   ) }</p> <p>export default async function Page({   params: { username }, }: {   params: { username: string } }) {   // Wait for the artist   const artist = await getArtist(username)</p> <p>return (     &lt;&gt;       {artist.name} Loading...\\}&gt;             ) } <pre><code>```jsx filename=\"app/artist/[username]/page.js\" switcher\n// ...\n\nasync function Playlists({ artistID }) {\n  // Wait for the playlists\n  const playlists = await getArtistPlaylists(artistID)\n\n  return (\n    &lt;ul&gt;\n      {playlists.map((playlist) =&gt; (\n        &lt;li key={playlist.id}&gt;{playlist.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  )\n}\n\nexport default async function Page({ params: { username } }) {\n  // Wait for the artist\n  const artist = await getArtist(username)\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{artist.name}&lt;/h1&gt;\n      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n        &lt;Playlists artistID={artist.id} /&gt;\n      &lt;/Suspense&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre></p> <p>In cases like this, you can use <code>loading.js</code> (for route segments) or React <code>&lt;Suspense&gt;</code> (for nested components) to show an instant loading state while React streams in the result.</p> <p>This will prevent the whole route from being blocked by data fetching, and the user will be able to interact with the parts of the page that are not blocked.</p> <p>Blocking Data Requests:</p> <p>An alternative approach to prevent waterfalls is to fetch data globally, at the root of your application, but this will block rendering for all route segments beneath it until the data has finished loading. This can be described as \"all or nothing\" data fetching. Either you have the entire data for your page or application, or none.</p> <p>Any fetch requests with <code>await</code> will block rendering and data fetching for the entire tree beneath it, unless they are wrapped in a <code>&lt;Suspense&gt;</code> boundary or <code>loading.js</code> is used. Another alternative is to use parallel data fetching #parallel-data-fetching) or the preload pattern #preloading-data).</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#parallel-data-fetching","title":"Parallel Data Fetching","text":"<p>To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data, then calling them from inside the component. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved.</p> <p>In the example below, the <code>getArtist</code> and <code>getArtistAlbums</code> functions are defined outside the <code>Page</code> component, then called inside the component, and we wait for both promises to resolve:</p> <p>```tsx filename=\"app/artist/[username]/page.tsx\" switcher import Albums from './albums'</p> <p>async function getArtist(username: string) {   const res = await fetch(<code>https://api.example.com/artist/${username}</code>)   return res.json() }</p> <p>async function getArtistAlbums(username: string) {   const res = await fetch(<code>https://api.example.com/artist/${username}/albums</code>)   return res.json() }</p> <p>export default async function Page({   params: { username }, }: {   params: { username: string } }) {   // Initiate both requests in parallel   const artistData = getArtist(username)   const albumsData = getArtistAlbums(username)</p> <p>// Wait for the promises to resolve   const artist, albums] = await Promise.all([artistData, albumsData])</p> <p>return (     &lt;&gt;       {artist.name}    ) } <pre><code>```jsx filename=\"app/artist/[username]/page.js\" switcher\nimport Albums from './albums'\n\nasync function getArtist(username) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n\nasync function getArtistAlbums(username) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n\nexport default async function Page({ params: { username } }) {\n  // Initiate both requests in parallel\n  const artistData = getArtist(username)\n  const albumsData = getArtistAlbums(username)\n\n  // Wait for the promises to resolve\n  const artist, albums] = await Promise.all([artistData, albumsData])\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{artist.name}&lt;/h1&gt;\n      &lt;Albums list={albums}&gt;&lt;/Albums&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre></p> <p>To improve the user experience, you can add a Suspense Boundary to break up the rendering work and show part of the result as soon as possible.</p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#preloading-data","title":"Preloading Data","text":"<p>Another way to prevent waterfalls is to use the preload pattern. You can optionally create a <code>preload</code> function to further optimize parallel data fetching. With this approach, you don't have to pass promises down as props. The <code>preload</code> function can also have any name as it's a pattern, not an API.</p> <p>```tsx filename=\"components/Item.tsx\" switcher import { getItem } from '@/utils/get-item'</p> <p>export const preload = (id: string) =&gt; {   // void evaluates the given expression and returns undefined   // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void   void getItem(id) } export default async function Item({ id }: { id: string }) {   const result = await getItem(id)   // ... } <pre><code>```jsx filename=\"components/Item.js\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id) =&gt; {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id)\n}\nexport default async function Item({ id }) {\n  const result = await getItem(id)\n  // ...\n}\n</code></pre></p> <p>```tsx filename=\"app/item/[id]/page.tsx\" switcher import Item, { preload, checkIsAvailable } from '@/components/Item'</p> <p>export default async function Page({   params: { id }, }: {   params: { id: string } }) {   // starting loading item data   preload(id)   // perform another asynchronous task   const isAvailable = await checkIsAvailable()</p> <p>return isAvailable ?  : null } <pre><code>```jsx filename=\"app/item/[id]/page.js\" switcher\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({ params: { id } }) {\n  // starting loading item data\n  preload(id)\n  // perform another asynchronous task\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? &lt;Item id={id} /&gt; : null\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#using-react-cache-server-only-and-the-preload-pattern","title":"Using React <code>cache</code>, <code>server-only</code>, and the Preload Pattern","text":"<p>You can combine the <code>cache</code> function, the <code>preload</code> pattern, and the <code>server-only</code> package to create a data fetching utility that can be used throughout your app.</p> <p>```ts filename=\"utils/get-item.ts\" switcher import { cache } from 'react' import 'server-only'</p> <p>export const preload = (id: string) =&gt; {   void getItem(id) }</p> <p>export const getItem = cache(async (id: string) =&gt; {   // ... }) <pre><code>```js filename=\"utils/get-item.js\" switcher\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id) =&gt; {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id) =&gt; {\n  // ...\n})\n</code></pre></p> <p>With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetching only happens on the server.</p> <p>The <code>utils/get-item</code> exports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched.</p> <p>Good to know:</p> <ul> <li>We recommend using the <code>server-only</code> package to make sure server data fetching functions are never used on the client.</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/5_Data_Fetching/#preventing-sensitive-data-from-being-exposed-to-the-client","title":"Preventing sensitive data from being exposed to the client","text":"<p>We recommend using React's taint APIs, <code>taintObjectReference</code> https://react.dev/reference/react/experimental_taintObjectReference) and <code>taintUniqueValue</code> https://react.dev/reference/react/experimental_taintUniqueValue), to prevent whole object instances or sensitive values from being passed to the client.</p> <p>To enable tainting in your application, set the Next.js Config <code>experimental.taint</code> option to <code>true</code>:</p> <p>```js filename=\"next.config.js\" module.exports = {   experimental: {     taint: true,   }, } <pre><code>Then pass the object or value you want to taint to the `experimental_taintObjectReference` or `experimental_taintUniqueValue` functions:\n\n```ts filename=\"app/utils.ts\" switcher\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n</code></pre></p> <p>```js filename=\"app/utils.js\" switcher import { queryDataFromDB } from './api' import {   experimental_taintObjectReference,   experimental_taintUniqueValue, } from 'react'</p> <p>export async function getUserData() {   const data = await queryDataFromDB()   experimental_taintObjectReference(     'Do not pass the whole user object to the client',     data   )   experimental_taintUniqueValue(     \"Do not pass the user's address to the client\",     data,     data.address   )   return data } <pre><code>```tsx filename=\"app/page.tsx\" switcher\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = getUserData()\n  return (\n    &lt;ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    /&gt;\n  )\n}\n</code></pre></p> <p>```jsx filename=\"app/page.js\" switcher import { getUserData } from './data'</p> <p>export async function Page() {   const userData = await getUserData()   return (        ) } ```</p> <p>Learn more about Security and Server Actions https://nextjs.org/blog/security-nextjs-server-components-actions).</p>"},{"location":"Code/How_to_Next.js/Docs/7_Internationalization/","title":"7 Internationalization","text":"<p>Next.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes.</p>"},{"location":"Code/How_to_Next.js/Docs/7_Internationalization/#terminology","title":"Terminology","text":"<ul> <li>Locale: An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region.</li> <li><code>en-US</code>: English as spoken in the United States</li> <li><code>nl-NL</code>: Dutch as spoken in the Netherlands</li> <li><code>nl</code>: Dutch, no specific region</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/7_Internationalization/#routing-overview","title":"Routing Overview","text":"<p>It\u2019s recommended to use the user\u2019s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incoming <code>Accept-Language</code> header to your application.</p> <p>For example, using the following libraries, you can look at an incoming <code>Request</code> to determine which locale to select, based on the <code>Headers</code>, locales you plan to support, and the default locale.</p> <p>```js filename=\"middleware.js\" import { match } from '@formatjs/intl-localematcher' import Negotiator from 'negotiator'</p> <p>let headers = { 'accept-language': 'en-US,en;q=0.5' } let languages = new Negotiator({ headers }).languages() let locales = ['en-US', 'nl-NL', 'nl'] let defaultLocale = 'en-US'</p> <p>match(languages, locales, defaultLocale) // -&gt; 'en-US' <pre><code>Routing can be internationalized by either the sub-path (`/fr/products`) or domain (`my-site.fr/products`). With this information, you can now redirect the user based on the locale inside **Middleware**.\n\n```js filename=\"middleware.js\"\nimport { NextResponse } from \"next/server\";\n\nlet locales = ['en-US', 'nl-NL', 'nl']\n\n// Get the preferred locale, similar to the above or using a library\nfunction getLocale(request) { ... }\n\nexport function middleware(request) {\n  // Check if there is any supported locale in the pathname\n  const { pathname } = request.nextUrl\n  const pathnameHasLocale = locales.some(\n    (locale) =&gt; pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n\n  if (pathnameHasLocale) return\n\n  // Redirect if there is no locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // e.g. incoming request is /products\n  // The new URL is now /en-US/products\n  return NextResponse.redirect(request.nextUrl)\n}\n\nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n}\n</code></pre></p> <p>Finally, ensure all special files inside <code>app/</code> are nested under <code>app/[lang]</code>. This enables the Next.js router to dynamically handle different locales in the route, and forward the <code>lang</code> parameter to every layout and page. For example:</p> <p><code>``jsx filename=\"app/[lang]/page.js\" // You now have access to the current locale // e.g. /en-US/products -&gt;</code>lang` is \"en-US\" export default async function Page({ params: { lang } }) {   return ... } <pre><code>The root layout can also be nested in the new folder (e.g. `app/[lang]/layout.js`).\n\n## Localization\n\nChanging displayed content based on the user\u2019s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application.\n\nLet\u2019s assume we want to support both English and Dutch content inside our application. We might maintain two different \u201cdictionaries\u201d, which are objects that give us a mapping from some key to a localized string. For example:\n\n```json filename=\"dictionaries/en.json\"\n{\n  \"products\": {\n    \"cart\": \"Add to Cart\"\n  }\n}\n</code></pre></p> <p>```json filename=\"dictionaries/nl.json\" {   \"products\": {     \"cart\": \"Toevoegen aan Winkelwagen\"   } } <pre><code>We can then create a `getDictionary` function to load the translations for the requested locale:\n\n```jsx filename=\"app/[lang]/dictionaries.js\"\nimport 'server-only'\n\nconst dictionaries = {\n  en: () =&gt; import('./dictionaries/en.json').then((module) =&gt; module.default),\n  nl: () =&gt; import('./dictionaries/nl.json').then((module) =&gt; module.default),\n}\n\nexport const getDictionary = async (locale) =&gt; dictionaries[locale]()\n</code></pre></p> <p>Given the currently selected language, we can fetch the dictionary inside of a layout or page.</p> <p>```jsx filename=\"app/[lang]/page.js\" import { getDictionary } from './dictionaries'</p> <p>export default async function Page({ params: { lang } }) {   const dict = await getDictionary(lang) // en   return {dict.products.cart} // Add to Cart } <pre><code>Because all layouts and pages in the `app/` directory default to **Server Components**, we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code will **only run on the server**, and only the resulting HTML will be sent to the browser.\n\n## Static Generation\n\nTo generate static routes for a given set of locales, we can use `generateStaticParams` with any page or layout. This can be global, for example, in the root layout:\n\n```jsx filename=\"app/[lang]/layout.js\"\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n\nexport default function Root({ children, params }) {\n  return (\n    &lt;html lang={params.lang}&gt;\n      &lt;body&gt;{children}&lt;/body&gt;\n    &lt;/html&gt;\n  )\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/7_Internationalization/#resources","title":"Resources","text":"<ul> <li>Minimal i18n routing and translations</li> <li><code>next-intl</code></li> <li><code>next-international</code></li> <li><code>next-i18n-router</code></li> <li><code>inlang</code></li> </ul>"},{"location":"Code/How_to_Next.js/Docs/8_Middleware/","title":"8 Middleware","text":"<p>Next.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes.</p>"},{"location":"Code/How_to_Next.js/Docs/8_Middleware/#terminology","title":"Terminology","text":"<ul> <li>Locale: An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region.</li> <li><code>en-US</code>: English as spoken in the United States</li> <li><code>nl-NL</code>: Dutch as spoken in the Netherlands</li> <li><code>nl</code>: Dutch, no specific region</li> </ul>"},{"location":"Code/How_to_Next.js/Docs/8_Middleware/#routing-overview","title":"Routing Overview","text":"<p>It\u2019s recommended to use the user\u2019s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incoming <code>Accept-Language</code> header to your application.</p> <p>For example, using the following libraries, you can look at an incoming <code>Request</code> to determine which locale to select, based on the <code>Headers</code>, locales you plan to support, and the default locale.</p> <p>```js filename=\"middleware.js\" import { match } from '@formatjs/intl-localematcher' import Negotiator from 'negotiator'</p> <p>let headers = { 'accept-language': 'en-US,en;q=0.5' } let languages = new Negotiator({ headers }).languages() let locales = ['en-US', 'nl-NL', 'nl'] let defaultLocale = 'en-US'</p> <p>match(languages, locales, defaultLocale) // -&gt; 'en-US' <pre><code>Routing can be internationalized by either the sub-path (`/fr/products`) or domain (`my-site.fr/products`). With this information, you can now redirect the user based on the locale inside **Middleware**.\n\n```js filename=\"middleware.js\"\nimport { NextResponse } from \"next/server\";\n\nlet locales = ['en-US', 'nl-NL', 'nl']\n\n// Get the preferred locale, similar to the above or using a library\nfunction getLocale(request) { ... }\n\nexport function middleware(request) {\n  // Check if there is any supported locale in the pathname\n  const { pathname } = request.nextUrl\n  const pathnameHasLocale = locales.some(\n    (locale) =&gt; pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n\n  if (pathnameHasLocale) return\n\n  // Redirect if there is no locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // e.g. incoming request is /products\n  // The new URL is now /en-US/products\n  return NextResponse.redirect(request.nextUrl)\n}\n\nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n}\n</code></pre></p> <p>Finally, ensure all special files inside <code>app/</code> are nested under <code>app/[lang]</code>. This enables the Next.js router to dynamically handle different locales in the route, and forward the <code>lang</code> parameter to every layout and page. For example:</p> <p><code>``jsx filename=\"app/[lang]/page.js\" // You now have access to the current locale // e.g. /en-US/products -&gt;</code>lang` is \"en-US\" export default async function Page({ params: { lang } }) {   return ... } <pre><code>The root layout can also be nested in the new folder (e.g. `app/[lang]/layout.js`).\n\n## Localization\n\nChanging displayed content based on the user\u2019s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application.\n\nLet\u2019s assume we want to support both English and Dutch content inside our application. We might maintain two different \u201cdictionaries\u201d, which are objects that give us a mapping from some key to a localized string. For example:\n\n```json filename=\"dictionaries/en.json\"\n{\n  \"products\": {\n    \"cart\": \"Add to Cart\"\n  }\n}\n</code></pre></p> <p>```json filename=\"dictionaries/nl.json\" {   \"products\": {     \"cart\": \"Toevoegen aan Winkelwagen\"   } } <pre><code>We can then create a `getDictionary` function to load the translations for the requested locale:\n\n```jsx filename=\"app/[lang]/dictionaries.js\"\nimport 'server-only'\n\nconst dictionaries = {\n  en: () =&gt; import('./dictionaries/en.json').then((module) =&gt; module.default),\n  nl: () =&gt; import('./dictionaries/nl.json').then((module) =&gt; module.default),\n}\n\nexport const getDictionary = async (locale) =&gt; dictionaries[locale]()\n</code></pre></p> <p>Given the currently selected language, we can fetch the dictionary inside of a layout or page.</p> <p>```jsx filename=\"app/[lang]/page.js\" import { getDictionary } from './dictionaries'</p> <p>export default async function Page({ params: { lang } }) {   const dict = await getDictionary(lang) // en   return {dict.products.cart} // Add to Cart } <pre><code>Because all layouts and pages in the `app/` directory default to **Server Components**, we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code will **only run on the server**, and only the resulting HTML will be sent to the browser.\n\n## Static Generation\n\nTo generate static routes for a given set of locales, we can use `generateStaticParams` with any page or layout. This can be global, for example, in the root layout:\n\n```jsx filename=\"app/[lang]/layout.js\"\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n\nexport default function Root({ children, params }) {\n  return (\n    &lt;html lang={params.lang}&gt;\n      &lt;body&gt;{children}&lt;/body&gt;\n    &lt;/html&gt;\n  )\n}\n</code></pre></p>"},{"location":"Code/How_to_Next.js/Docs/8_Middleware/#resources","title":"Resources","text":"<ul> <li>Minimal i18n routing and translations</li> <li><code>next-intl</code></li> <li><code>next-international</code></li> <li><code>next-i18n-router</code></li> <li><code>inlang</code></li> </ul>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/","title":"0 Useful Tips","text":""},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#1-respect-peoples-time","title":"1. Respect people\u2019s time","text":"<p>A good code review process starts with respecting time. Ideally, you want to start reviewing the code within two hours after its first submission. This is mainly to appreciate the work of the person who submitted the PR.</p> <p>For example, if one of your colleagues has asked you to review their work, they\u2019ll probably wait for your review for some minutes. If the review isn\u2019t done quickly, they\u2019ll start working on something else.</p> <p>Your colleague will create a new feature branch and start writing code for a new task. If, after four hours, you review their first code and discover it\u2019s faulty, your colleague will have to suspend what they\u2019re doing now to make the changes. Context switches like that can be extremely time-consuming. Depending on how your colleague works best, it might take a lot for them to recover focus when coming back to the original task.</p> <p>The situation gets even worse if you let days or weeks pass by without reviewing the code. At this time, your colleague has probably even forgotten what the code was all about. There will be time wasted while they catch up with the old code, and your colleague will be more prone to introducing errors since they haven\u2019t worked on that feature in a while.</p> <p>Always respect other people\u2019s time and work, try to be the most timely reviewer you can be, and realize that those hours your peers are waiting for your review are worth a lot.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#2-always-provide-constructive-feedback","title":"2. Always provide constructive feedback","text":"<p>Even if you\u2019re reviewing code, remember there are humans behind it. Be careful about how you may trigger other people\u2019s emotions, especially since you\u2019re talking about their work.</p> <p>When giving feedback on an error in a pull request, adopt a constructive mindset and try to use positive language. Say\u00a0\u201cI suggest\u201d\u00a0or\u00a0\u201cYou could improve X by doing Y.\u201d\u00a0Avoid\u00a0\u201cDo this\u201d\u00a0or\u00a0\u201cThis is just wrong, why don\u2019t you do Z?\u201d</p> <p>Expressing opinions with written words is very hard\u2014be mindful of how somebody may misinterpret your suggestions and take them personally.</p> <p>Make improving the code of the project your mission, but still keep in mind that the humans behind the code need to receive encouragement. In addition to keeping the workplace environment positive, this can also go a long way toward ensuring the same errors won\u2019t be part of the next pull requests.</p> <p></p> <p>A comment you don\u2019t want to submit.</p> <p></p> <p>A comment that\u2019s a lot better!</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#3-keep-your-ego-out-of-code-reviews","title":"3. Keep your ego out of code reviews","text":"<p>Occasionally, you\u2019ll find yourself in a position of disagreement with the submitter\u2019s implementation of the code or the other reviewers of a PR.\u00a0Should we use this interface? Is this name appropriate for these variables?</p> <p>In cases like these, you and the engineering team should aim for a culture where the best argument wins.</p> <p>And remember, just because you\u2019re a senior developer, it doesn\u2019t mean that you\u2019re necessarily right regarding some junior coder\u2019s idea. Provide reasons, not feelings, to support your position to the other team members. Stay firm in your approach if you believe it\u2019s the best one, but don\u2019t forget to provide reasons behind everything you say. For example, link to articles or docs reinforcing your point.</p> <p>If an argument gets heated, try to schedule an immediate call and positively discuss your idea. In the end, either you\u2019ll be right or you\u2019ll come out of the discussion with fresh knowledge.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#4-be-precise-about-what-needs-to-be-improved","title":"4. Be precise about what needs to be improved","text":"<p>I cannot stress this point enough, as I\u2019ve run into this so often during my career. It\u2019s important to be clear, not only in the words you use but also in the way you construct your sentences.</p> <p>Double-check every comment you write. A simple grammatical error could cause you problems.</p> <p>Consider:</p> <p></p> <p>An example of confusing grammar.</p> <p>What is it that needs to be changed, the class or the function? To which does\u00a0it\u00a0refer? And why should one of your busy peers have to ask you clarifying questions about your grammar?</p> <p>Also, take care to specify the exact line you\u2019re discussing. Don\u2019t just mention the wrong usage of a function for adding students; what if there are two of them with very similar names, say,\u00a0<code>`addStudent`</code>\u00a0and\u00a0<code>`addStudents`</code>?</p> <p>The same applies if you submit code in a comment. It doesn\u2019t have to be perfect, but make sure it\u2019s still clear what you\u2019re trying to say. Otherwise, you\u2019re introducing your peers to a lot of confusion and frustration.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#5-dont-just-hope-for-the-code-to-work","title":"5. Don\u2019t just hope for the code to work","text":"<p>Expecting the code\u2019s author to have tested the code is fair, but you should always try it by yourself, too. Two minds are still better than one, so check out the referring branch and pull down the code locally.</p> <p>Everything should build perfectly before you start testing the code. Check the functionality itself, but don\u2019t limit yourself to simple tests. Try to cause errors. Come up with some edge cases and put the codebase to the test.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#6-reinforce-code-submission-best-practices","title":"6. Reinforce code submission best practices","text":"<p>Remember to promote positive actions a code author can take. For example, you could enable support on\u00a0GitHub for continuous integration\u00a0in your project. This allows the platform to start your automated tests whenever a given event occurs (for example, whenever a PR is opened).</p> <p>Continuous integration by itself encourages developers to commit code more often, it makes it easier to detect errors when they open a PR, and reduces the amount of code that needs to be debugged if something goes wrong. Frequent code updates also make it effortless to merge changes made in a pull request, so you and your team can spend more time writing code instead of resolving annoying branch conflicts.</p> <p>Along the lines of running automated tests inside pull requests, don\u2019t forget that GitHub also offers support for\u00a0code coverage tools. This way, you and the code submitters will always know how much of the running code is being checked by your test suite, streamlining the review process thanks to an immediate overview of how the app is performing.</p> <p>One particularly low-hanging fruit for encouraging best code submission practices is to provide your team with a\u00a0well-written PR template. This is a simple text that appears whenever someone is about to open a PR, reminding developers to specify what the PR is about and what type of change has been performed (eg, bug fix, hotfix, refactor). You could even add a section for submitters to request special things for reviewers to note.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#7-be-strict-about-temporary-code","title":"7. Be strict about temporary code","text":"<p>Occasionally someone will submit code that\u2019s considered temporary. You know, the one that goes by in commit messages like\u00a0hotfix\u00a0or\u00a0temporary refactoring for the component to work.</p> <p>Don\u2019t let the word\u00a0temporary\u00a0mislead you into being less strict when it comes to testing code. Short-term solutions have a magical power of becoming dirty legacy code very quickly. If you don\u2019t want to find yourself dealing with a bigger problem in the future, always use the same discipline whether you\u2019re reviewing a huge feature\u2019s pull request or the tiniest of the most temporary code.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#8-check-the-projects-satellite-files","title":"8. Check the project\u2019s satellite files","text":"<p>Every medium to large-size project will bring with it hundreds of files gravitating around the code structure itself. I like to refer to them as satellite files. These include documentation, tests, and configuration files.</p> <p>Remember to check these files, as they\u2019re usually updated as often as the code and just as important. For example, verify that tests have been added for a new feature if you have them in your application.</p> <p>If a function or class has been refactored, the documentation should be, too, if that\u2019s your workflow. Similarly, build files should reflect the changes made to the project or the single files, and the changelog should always reflect the operations that have been performed on the product.</p>"},{"location":"Code/How_to_PR_Review/0_Useful_Tips/#9-visualize-the-bigger-picture","title":"9. Visualize the bigger picture","text":"<p>This is the biggest lesson that those senior developers actually taught me. Code is not the line you write, but how the line integrates with and provides benefit to the application itself.</p> <p>Will this change benefit the project in terms of maintenance? Will we have to change it because it\u2019s just not scalable? Will me and my peers be able to read this code six months from now?</p> <p>A pull request is never a stand-alone event. It\u2019s one brick in a more extensive, complicated system. Keep the best practices in mind, and let them guide you toward deciding if this modification is a \u201capprove\u201d or \u201creject\u201d one.</p>"},{"location":"Code/How_to_PR_Review/1_Code_Review_Approaches/","title":"1 Code Review Approaches","text":"<p>I have encountered different approaches to code review, depending on the pull request, reviewer preference, time available, etc.</p> <ol> <li>Review per commit: This can only be done if the commit history is available and if it is clear enough.</li> <li>Review per file: This is easier to do if the pull request isn\u2019t very big.</li> <li>Check out the code locally: This approach consumes the most time and effort, but it\u2019s sometimes the only way to actually understand what\u2019s going on.</li> </ol>"},{"location":"Code/How_to_PR_Review/2_During_Coding/","title":"2 During Coding","text":""},{"location":"Code/How_to_PR_Review/2_During_Coding/#1-branch-naming-strategy","title":"1. Branch naming strategy","text":"<p>So you have opened your task manager, selected a ticket, and moved it to \u201cProgress\u201d. What\u2019s next?</p> <p>Create a branch in which you will be working. And call that branch\u2026 what?</p> <p>The branch name is your first opportunity to give your task context. In case your reviewer decides to check the code out locally, they will need to find that branch among many others.</p> <p>There are several good approaches you can choose from, depending on how you manage work.</p>"},{"location":"Code/How_to_PR_Review/2_During_Coding/#approach-1","title":"Approach 1","text":"<p>If you\u2019re using a task management tool that gives your tasks a prefix or number (e.g., Jira), then you can use that prefix too \u2014 especially to set up some hooks, such as to move the ticket to \u201cCode review\u201d when a PR is opened or \u201cTo test\u201d when the PR is merged. For example, if the task name is\u00a0<code>ABC-57: Add list with purchases</code>, then a good name for a branch would be\u00a0<code>ABC-57_purchases_list</code>.</p> <p>But why not just\u00a0<code>ABC-57</code>?</p> <p>Well, let\u2019s compare these two options.</p> List of branches A: List of branches B: <code>ABC-57</code> <code>ABC-57_purchases_list</code> <code>ABC-64</code> <code>ABC-64_fix_cart_npe</code> <code>ABC-73</code> <code>ABC-73_migrate_2.8</code> <p>In which of these lists will you find the required branch faster? Using a naming convention that includes a description also helps when switching your own branches regularly, as you don\u2019t need to remember or look up the ticket number.</p>"},{"location":"Code/How_to_PR_Review/2_During_Coding/#approach-2","title":"Approach 2","text":"<p>Use the same\u00a0<code>prefix</code>\u00a0+\u00a0<code>description</code>\u00a0approach, but instead of prefixing the name with the ticket number, prefix it with what it is:\u00a0<code>feature</code>,\u00a0<code>bug_fix</code>,\u00a0<code>refactor</code>, etc. It\u2019s best to use this approach only if there are no ticket names available. Here are a couple of examples:</p> <p><code>feature_purchases_list</code>\u00a0or\u00a0<code>bug_fix_cart_npe</code></p>"},{"location":"Code/How_to_PR_Review/2_During_Coding/#approach-3","title":"Approach 3","text":"<p>Any other branch naming strategy is fine, as long as it is consistent and has a logical structure. Randomly naming branches can eventually lead to chaos. Not only is it harder to navigate between them but also more difficult to maintain. Which branches are stale? Can you delete them? Is there unmerged work? Is it still relevant?</p>"},{"location":"Code/How_to_PR_Review/2_During_Coding/#2-commit-history","title":"2. Commit history","text":"<p>One code review strategy you can use is per-commit review \u2014 but only if the commit history makes it possible.\u00a0Here\u00a0is a really great and detailed article about how to correctly name your commits.</p> <p>In short, here are some guidelines:</p> <ol> <li>Keep commit messages concise. It\u2019s best to keep them around 50 characters, and 72 is the hard limit. Anything more than 72 is wrapped in GitHub.</li> <li>Use an imperative approach for your commit messages. Phrase it as what will happen when you apply this commit, e.g.,\u00a0<code>Update headline text color</code>\u00a0or\u00a0<code>Remove unused imports</code>.</li> <li>This naming strategy is tightly coupled with an even more important notion for managing history: atomic commits. You can\u2019t give a concise name to a commit unless it introduces a single logical change, i.e., it is atomic.</li> <li>If you have ticket names, as mentioned in the branch naming strategies, prefix every commit with the name of the ticket. This can make it easier to navigate the commit history by task and allow integrations with project management tools. For example, you can integrate Jira with GitHub so that the ticket descriptions also keep track of the commit history.</li> </ol> <p>By just reading the commit history of the pull request, the reviewer can already gain some understanding of what they will be reviewing, even before seeing a single line of code.</p> <p>If you want to go a step further, I\u2019ve recently encountered an interesting approach to commits. The context of this approach is broader than just commit naming. You can read all about it\u00a0here.</p> <p>But the general idea is to write a commit name\u00a0before\u00a0you start coding. This will help you stay focused on one step at a time, provide more clarity on what you need to do, and implicitly make your commits atomic. I think this is a very interesting take and plan to try it myself.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/","title":"3 Before Asking PR","text":""},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#1-provide-context-description-and-images","title":"1. Provide context: Description and images","text":""},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#description","title":"Description","text":"<p>When I talk about creating a description, I don\u2019t mean to just link the Jira ticket to the PR and be done with it. This would require the reviewer to switch to Jira and read the description, which might have more information than necessary for code review\u2026 and yet give no clue about how the solution is implemented.</p> <p>You can avoid this by providing a brief description and answering three questions:</p> <ul> <li>What?\u00a0What is the task that is accomplished by this pull request?</li> <li>How?\u00a0How is it implemented (an overview of your solution)?</li> <li>Why?\u00a0If applicable (e.g., if several valid approaches exist), why did you choose this approach, or what are the impediments of the other approaches?</li> </ul> <p>Thanks to this description, the reviewer will know what to look for in the code and why it was written the way it was. This enables them to provide more relevant comments.</p> <p>You can ensure this by adding a pull request template in GitHub.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#images-and-videos","title":"Images and videos","text":"<p>Evaluating the code while knowing what the actual result looks like is much easier than trying to imagine it. If your task is related to changes in the UI, adding an image of the end result (or a video, if it\u2019s a flow) will greatly benefit the reviewer\u2019s comprehension of the code. Or, if your task involves complicated logic, you can attach a sequence diagram that explains the algorithm.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#2-keep-it-small","title":"2. Keep it small","text":"<p>The bigger the pull request, the poorer the code review will be. Code review is a tough process mentally \u2014 you need to read code, figure out what it\u2019s doing, understand how it\u2019s doing it, and look for potential problems. The more lines of code you need to keep in mind, the higher the chance that you\u2019ll overlook something. Although there isn\u2019t really a \u201cgolden\u201d number of lines, I\u2019d recommend sticking to under 500. If there are more, split them into multiple pull requests.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#3-keep-it-clean","title":"3. Keep it clean","text":"<p>No, I\u2019m not talking about the architecture here. During development, we use all kinds of tricks: generating print logs, hard-coding specific values, leaving\u00a0<code>TODO</code>s, and so on. To save some time and keep the reviewer\u2019s focus on the feature at hand, make it a habit to ensure your pull request is clean before assigning reviewers. What do I mean by keeping it clean?</p> <ol> <li>Find and remove all of the debug logs and unused or commented-out code.</li> <li>Decide what to do with the\u00a0<code>TODO</code>:<ol> <li>Implement it.</li> <li>If you can\u2019t implement it right away, create a task or leave at least some kind of estimation on when it will be done.</li> <li>Delete it if it\u2019s either done or not relevant anymore.</li> </ol> </li> <li>Regarding hardcoded strings (albeit not all of the possible hardcoded values), I\u2019ve recently stumbled upon a\u00a0tip from Vandad Nahavandipoor\u00a0about suffixing all of your hardcoded strings with an emoji (with the help of an extension function, for example).</li> </ol> <p>Pro tip: Most of those issues can be resolved with static code analysis tools, although some of them require custom rules implementation, depending on how you want to handle them.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#4-resolve-all-of-the-merge-conflicts","title":"4. Resolve all of the merge conflicts","text":"<p>This may seem like a minor thing because the feature is done, the code is final, and you can leave merge conflicts for later\u2026 But that isn\u2019t always true. Your branch may have diverged a lot from the base branch, or some changes might clash with your code in a way that makes it impossible to merge without refactoring. And this will either require another review or get merged with possibly overlooked issues.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#5-exclude-code-gen-files","title":"5. Exclude code-gen files","text":"<p>Code-generated files, such as JSON models or unit test mocks, don\u2019t need to be reviewed. So seeing them explicitly in a diff doesn\u2019t add any benefit and is just annoying. Different Git clients have different approaches to excluding such files from review. For example, in GitHub, you can\u00a0add the patterns to\u00a0<code>.gitattributes</code>, and they will be collapsed in the final diff.</p> <p></p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#6-static-code-analysis","title":"6. Static code analysis","text":"<p>It\u2019s a good practice to have static code analysis enabled.</p> <p>Static analysis allows you to find problems before executing a single line of code. It\u2019s a powerful tool used to prevent bugs and ensure that code conforms to style guidelines.</p> <p>Before assigning reviewers, make sure that your code doesn\u2019t violate any lint rules. You can make sure of this with CI: Block the possibility of merging until there are no lint warnings.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#7-unit-tests","title":"7. Unit tests","text":"<p>Unit tests help identify problems and catch bugs in the early stages of development before anyone else even sees the code, let alone tests it. Additionally, they ensure that code behavior stays the same in case of code changes. As a bonus, they also cause you to write cleaner and more decoupled code, contributing to the overall code quality.</p> <p>You can set up CI to run unit tests on every pull request and block merging in case anything fails. And you should fix any failing tests before marking the pull request as ready for review.</p> <p>Pro tip: Enable code coverage reports with tools like\u00a0Codecov.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#8-other-markers-such-as-milestones-and-labels","title":"8. Other markers, such as milestones and labels","text":"<p>Using markers such as milestones and labels is more of a nice-to-have tip, and depending on the size of the project, it can be omitted. But in larger projects, it can help to organize pull requests. For example, if there are a lot of pull requests to review, they can be filtered by milestone so that the PRs for the upcoming release are reviewed sooner. And labels can provide more context by indicating bugs, features, enhancements, etc.</p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#9-add-github-pr-template","title":"9. Add GitHub PR template","text":"<ol> <li>In the root folder of our project, we need to add a file called\u00a0<code>pull_request_template.md</code>.</li> <li>Fill it in (commit, push, and merge into\u00a0<code>main</code>).</li> </ol> <pre><code>## Description\n\n1. What type of code this is (e.g., bug fix, new feature)\n2. What it does and how it does it\n3. Why it is done that way (if required)\n4. Nice to have: images/videos (if it involves the UI) \n\n## Checklist\n\n- [ ] Has unit tests\n- [ ] Coverage is at least 90%\n- [ ] Has documentation \n- [ ] Has release milestone\n</code></pre> <p>The next time we open a pull request, it will already be prefilled for us:</p> <p></p>"},{"location":"Code/How_to_PR_Review/3_Before_Asking_PR/#bonus-tip","title":"Bonus tip","text":"<p>Review your own code before assigning other reviewers. Yes, you have just written this code and still remember everything. But giving it a fresh look, especially in the GUI of the Git client, can help you find some things that you may have previously overlooked.</p>"},{"location":"Code/How_to_PR_Review/4_Addressing_Review/","title":"4 Addressing Review","text":"<p>Address and resolve all comments before merging. This way, you won\u2019t leave anyone guessing what was implemented and what wasn\u2019t.</p> <p>And by addressing, I don\u2019t mean that you have to implement every single comment, but at least leave a reply or react with an emoji to indicate that it was handled or won\u2019t be handled.</p> <p>Then the reviewer can resolve the conversation. GitHub even has a setting you can enable that blocks merging unless all conversations have been resolved.</p>"},{"location":"Code/How_to_PR_Review/5_How_To_PR_Review_on_GitHub/","title":"5 How To PR Review on GitHub","text":""},{"location":"Code/How_to_PR_Review/5_How_To_PR_Review_on_GitHub/#review-a-pr","title":"Review a PR","text":"<ol> <li> <p>In the PR you're reviewing, select the\u00a0Files changed\u00a0tab.</p> <p></p> </li> <li> <p>Compare the original document to the edited one. The original document will be in red, and the proposed document will be in green. Any added text will be highlighted in the green (new) section, and any deleted text will be highlighted in the red (original) section.</p> <p></p> </li> <li> <p>Add comments or suggest changes by selecting the plus (+) icon to the left of the line you'd like to comment on. To select multiple lines, select and drag the plus sign.</p> <p></p> <p>You can only add comments or suggestions to lines that have been edited in the current PR. To make other changes,\u00a0edit that file in your own PR.</p> </li> <li> <p>A box will open. Enter your comments or questions there. If you'd like, you can use the buttons in the toolbar to format your text, add bulleted and numbered lists, or insert code blocks and images.</p> <p></p> </li> <li> <p>You can also suggest a change to the text in that line.</p> <ol> <li> <p>In the toolbar for the comment, select the\u00a0+-\u00a0icon (probably the icon furthest to the left). This is the\u00a0Insert a suggestion\u00a0button.</p> <p></p> </li> <li> <p>The text from the line you selected will be included in a code block (inside two sets of ``` backticks).</p> <p></p> <p>To suggest changes to text that includes a triple-ticked code fence (<code>``), replace the outer/enclosing</code>suggestion<code>backticks with tildes (</code><sub>~</sub>`).</p> </li> <li> <p>Edit the text. Use the buttons in the comment box for simple formatting like bold, italics, and bullets, or use the\u00a0Markdown syntax elements\u00a0directly. You can also add comments to this box below the code-block section.</p> </li> </ol> </li> <li> <p>After you've made your comment, select\u00a0Start a review. The PR author will be notified of your changes. If you used the\u00a0Insert a suggestion\u00a0button in the previous step, the author will be able to commit your suggestion directly to the document.</p> <p>If you want to bring someone else into the conversation, you can\u00a0@mention\u00a0other contributors by their GitHub alias in your comments. Mentioned GitHub users will receive an email containing your comment. You can also use Markdown in your comments, and your comment's Markdown is rendered once you submit the comment.</p> </li> <li> <p>In the\u00a0Conversations\u00a0tab, read through the comments. If you have questions or comments, add them to the conversation. You can also add reactions to comments by selecting the smiley face icon in the bottom-left corner of each comment.</p> </li> </ol>"},{"location":"Code/How_to_PR_Review/5_How_To_PR_Review_on_GitHub/#submit-a-review","title":"Submit a review","text":"<p>Once you've added all your comments to the review, submit your review.</p> <ol> <li>Select the\u00a0Review changes\u00a0button in the upper-right of the\u00a0Files changed\u00a0tab to open the review submittal dialog.</li> <li>Enter a descriptive\u00a0Review summary.</li> <li>Select the radio button for your desired review type, and then choose\u00a0Submit review.</li> </ol> <p></p> <p>The PR author will receive notification of the review.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/","title":"6 How To PR Review on VSCode","text":""},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#creating-pull-request","title":"Creating Pull Request","text":""},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#install-the-official-github-extension","title":"Install the official GitHub Extension","text":"<p>The first thing you need to do is to install the official\u00a0GitHub Pull Requests and Issues\u00a0extension for Visual Studio Code. You can find it in the marketplace by searching for \u201cGitHub\u201d or by clicking\u00a0here.</p> <p></p> <p>Note: make sure to not get confused, the extension called \u201cGitHub\u201d is an old one and deprecated. The new one is called \u201cGitHub Pull Requests and Issues\u201d.</p> <p>As soon as the extension is installed, you\u2019ll see a new icon in the Activity Bar on the left side of Visual Studio Code:</p> <p></p> <p>Opening it the first time will ask you to login to GitHub, just click on the button and a browser tab will open where you can login to your GitHub account.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#create-a-pull-request","title":"Create a Pull Request","text":"<p>Now that you\u2019re logged in, you can create a Pull Request from Visual Studio Code by clicking the icon on the top bar:</p> <p></p> <p>If you\u2019re already on a pushed branch, this is the panel that will open:</p> <p></p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#merge-changes-from","title":"Merge Changes From","text":"<p>The first panel you will see allows you to select the origin branch that is the one containing the changes you want to merge. By default, it will select the current branch you\u2019re on.</p> <p>You can also select the remote in case you have more than one. In the most common open source situation you\u2019ll have your fork and the original repository. In this panel, you might want to select your fork.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#into","title":"Into","text":"<p>Similar to the previous panel it allows you to select a remote and a branch. This time it\u2019s the destination. If you\u2019re working on your own project the remote will likely be the same as the one you selected in the previous panel, but if you\u2019re contributing to someone else\u2019s project you\u2019ll likely want to select the original repository.</p> <p>Branch is usually\u00a0<code>main</code>\u00a0but make sure to read the project\u2019s contribution guidelines to see if there\u2019s a specific branch you should use.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#title","title":"Title","text":"<p>You PR\u2019s title. By default it will use the message of the last commit, but you can change it to whatever you want.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#description","title":"Description","text":"<p>You PR\u2019s description. If the project has a template in\u00a0<code>.github/PULL_REQUEST_TEMPLATE.md</code>, you will see this box already filled with the template. Similar to the title, you\u2019re free to change it.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#create-as-draft","title":"Create as draft","text":"<p>The final option before the Create button is a checkbox that allows you to create the PR as a draft. This is useful if you want to create the PR but you\u2019re not ready to merge it yet.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#create","title":"Create","text":"<p>Once you\u2019re happy with the options you selected, you can click the Create button and the PR will be created on GitHub!</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#compare-changes","title":"Compare changes","text":"<p>Waaaait a moment, before clicking the Create button, you can also open the Compare changes panel right below.</p> <p>From this panel you can see all changes that will be included in the Pull Request in the diff format you\u2019re used to see on vscode, so green files are added, red are deleted and yellow are modified.</p> <p></p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#add-labels","title":"Add labels","text":"<p>Aren\u2019t labels also supported? I can\u2019t see them in the screenshot\u2026 well, that\u2019s because the button only shows up if you hover the mouse over the top bar.</p> <p>To be honest I\u2019m not sure this is a feature or a bug, I might open an issue on the extension\u2019s repository to ask about it.</p> <p>Anyway, if you click that button, the quick pick menu will open on vscode letting you select the labels you want to add to the PR from the list of labels available in the repository.</p> <p></p> <p>And as I\u00a0mention in the video, this is exactly where I found the bug!</p> <p>https://github.com/microsoft/vscode-pull-request-github/pull/4637</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#reviewing-pull-request","title":"Reviewing Pull Request","text":""},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#changed-files","title":"Changed files","text":"<p>The first thing you notice when selecting a Pull Request from the sidebar is the changed files.</p> <p></p> <p>When clicking on one of them a Diff Editor will open so that you can see the changes made to the file by comparing them to the base branch.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#pull-request-overview","title":"Pull Request Overview","text":"<p>If you click on \u201cDescription\u201d from the sidebar, you\u2019ll see the Pull Request overview:</p> <p></p> <p>From here you can see all the relevant information you can also find on the web UI on GitHub. It\u2019s not readonly though, but you can fully interact with it from the editor.</p> <p>You can for example edit labels, assignees, reviewers, and even add comments.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#add-comments","title":"Add comments","text":"<p>Speaking of comments, we just saw you can add some to the Pull Request, but you can also add comments to specific lines of code and files!</p> <p>The UI interaction is the same as on GitHub, you can add a comment by clicking on the line number and then clicking on the \u201cAdd comment\u201d button or by dragging the mouse over the lines you want to comment, in case of a multiline comment.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#checkout-the-branch","title":"Checkout the branch","text":"<p>Probably the most interesting feature of the extension is the ability to checkout the branch of the Pull Request directly from the editor. This gives you a lot of advantages, for example you can run and build the code in local so you can test your application.</p> <p>In case you don\u2019t have a CI/CD pipeline in place (you should though, at least CI), you can also run the tests locally to make sure they pass.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#check-github-actions","title":"Check GitHub Actions","text":"<p>Speaking of CI/CD, you can also check the status of the GitHub Actions workflow directly from the editor!</p> <p></p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#edit-tabs","title":"Edit tabs","text":"<p>Before calling it a day, I want to show you another cool feature of the extension: the ability to edit the tabs and organize the filters in the sidebar.</p> <p>If you hover the mouse on them, you notice a pencil icon. Click on it! It will open your local vscode settings and you can notice this piece of configuration:</p> <pre><code>githubPullRequests.queries\": [\n    {\n      \"label\": \"Waiting For My Review\",\n      \"query\": \"is:open review-requested:${user}\"\n    },\n    {\n      \"label\": \"Assigned To Me\",\n      \"query\": \"is:open assignee:${user}\"\n    },\n    {\n      \"label\": \"Created By Me\",\n      \"query\": \"is:open author:${user}\"\n    },\n  ],\n</code></pre> <p>Do you recognize the labels? Those are the default ones defining your tabs when you install the extension! You can change them to whatever you want, for example I added one for PRs where I\u2019ve been mentioned, by adding a new element to the array:</p> <pre><code>{\n  \"label\": \"Pull Requests where I've been mentioned\",\n  \"query\": \"is:open mentions:${user}\"\n}\n</code></pre> <p>The syntax is pretty straightforward, on label you put\u2026 the label! And on query you can define how PRs will be filtered as you would query them on GitHub.</p>"},{"location":"Code/How_to_PR_Review/6_How_To_PR_Review_on_VSCode/#conclusion","title":"Conclusion","text":"<p>That\u2019s it for today!</p> <p>Last week we learned how to create a Pull Request from Visual Studio Code, and today we saw how to give it a review.</p>"},{"location":"Question/Behavioral/Danger_Sign/","title":"What are your own danger signs during a disagreement?","text":"<p>My own danger sign was when I abruptly fall silent. It signals the depletion of my mental energy, hindering my ability to handle any situation properly. I believe that's the moment when my mind begins to form biased judgments.</p> <p>Even though I understand that expressing the issue is the right thing to do, sometimes I'm just too tired. Communication takes a lot of time and energy. So, I've learned to put things on hold and talk when I'm feeling more refreshed and mentally sharp.</p>"},{"location":"Question/Behavioral/Lose_Temper/","title":"When do you most easily lose your temper in conversations or situations?","text":"<p>Continuous intervention while I'm speaking easily infuriates me. Even if there are a few mistakes in my sentences, I prefer it to be addressed later, after my main points have been discussed.</p>"},{"location":"Question/Behavioral/Rude/","title":"How do you normally respond when other people are rude or mean to you?","text":"<p>I prefer to stay away from toxic people. I may not have the interest to address their behavior, so I intend to distance myself and move on as soon as I get the chance.</p>"},{"location":"Question/Learning/Do%20you%20prefer%20to%20plan%20things%20out%20or%20let%20things%20happen%20as%20they%20happen/","title":"Do you prefer to plan things out or let things happen as they happen","text":"<p>Obviously, I'd prefer to plan things out. It's just how my brain works\u2014persistently thinking about our future. I'd like to plan things out right away so I can face them with proper preparation.</p>"},{"location":"Question/Learning/Does%20making%20friends%20with%20strangers%20come%20naturally%20to%20you/","title":"Does making friends with strangers come naturally to you","text":"<p>Yes, because approachable strangers can provide plenty of useful insights. However, I can be selective about the situations in which I'm willing to socialize.</p>"},{"location":"Question/Learning/What%20do%20you%20do%20when%20you%20need%20to%20feel%20motivated/","title":"What do you do when you need to feel motivated","text":"<p>Recently, I love to write on my personal knowledge management system.</p>"},{"location":"Question/Learning/What%27s%20something%20you%27d%20love%20to%20receive%20as%20a%20gift%20but%20no%20one%20ever%20thinks%20of/","title":"What's something you'd love to receive as a gift but no one ever thinks of","text":"<p>A gift should be memorable and personal, lasting for years, bringing sparks and joy when someone receives it. It should be distinguishable.</p> <p>I think I'd love to receive a nice, soft illustrated blanket.</p>"},{"location":"Think/How_to_be_valuable/How_to_be_valuable/","title":"How to be valuable","text":"<pre><code>1. Do you have value?\n2. How to redeem value?\n3. How to identify hair-on-fire?\n4. How to extinguish the fire?\n</code></pre>"},{"location":"Think/How_to_be_valuable/How_to_be_valuable/#do-i-have-value","title":"Do I have value?","text":"<p>Yes, every individual, regardless of their physical or mental capabilities, age, or stage of life, inherently possesses value. Your inherent value (IV) is comprised of two fundamental components: effort (E) and time (\u2206T). Effort represents the sheer amount of work and energy you invest in various endeavors. Time, on the other hand, encompasses the finite resource of moments of your life.</p> <p>In economics, the concept of value often emerges from scarcity. When a resource is scarce\u2014meaning that its availability is limited relative to the demand for it\u2014people assign value to it because it becomes desirable and sought after. That's why your effort and time can be considered as valuable.</p> <p>Inherent value can be expressed as IV = E / \u2206T.</p> <p>This equation expresses inherent value as the ratio of effort (E) to the change in time (\u0394T). Essentially, it states that the amount of value you bring is determined by the amount of effort you exert divided by how quickly you can accomplish it.</p> <p>You can enhance your value either by increasing the amount of work and energy you invest or by reducing the time required to complete a task. In many cases, particularly as an individual contributor in the workplace, your value is often measured by the quantity of time you dedicate to your work. You can achieve a multiplier effect or double your value by improving your work processes, either through standardized procedures, automating repetitive tasks, utilizing technology, and investing in knowledge and skill development.</p>"},{"location":"Think/How_to_be_valuable/How_to_be_valuable/#but-why-is-inherent-value-often-irrelevant-to-the-perceived-values","title":"But why is inherent value often irrelevant to the perceived values?","text":"<p>So, you may find an excellent person being valued less than what he brings to the table. The significance of a person's inherent values, which we would call impact (I), comes from how they can offer their value to the right problem. That's where value proposition (VP) comes in.</p> <p>The formula for a value proposition can be expressed as VP = IV * I.</p> <p>In other words, inherent value with no impact yields no value proposition, and therefore, no perceived value. In order to create a compelling value proposition, it is essential to not only have inherent value but also to deliver meaningful impact that resonates with the needs and desires of the target audience.</p>"},{"location":"Think/How_to_be_valuable/How_to_be_valuable/#how-to-translate-value-into-tangible-impact","title":"How to translate value into tangible impact?","text":"<p>As stated before, impact are the result of addressing the right problem (P) with the right value proposition.</p> <p>Thus, the formula for impact takes the form of I = P * VP.</p> <p>If you've found a significant problem without being able to bring a good value proposition, then you come home with nothing. That also goes the other way; if you have a great value proposition but are unable to find any applicable use cases, you won't be generating impact.</p> <p>Interestingly, if you substitute between the formula of inherent value, impact, and value proposition, you would find that problem is time divided by effort.</p> <p>IV = E / \u2206T VP = IV * I I = P * VP</p> <p>VP = IV * P * VP 1 = IV * P</p> <p>That's make a problem is P = 1 / IV and P = \u2206T / E.</p> <p>A problem occurs when our desired outcomes don't align with what we're capable of achieving. We already talked about how scarcity imposes value. I am pleased to tell you that scarcity is the very definition of a problem: a mismatch between what we want and what we have the means to achieve.</p> <p>Think of it like two sides of a coin: on one side, there's what's valuable or important to us, but on the flip side, there are the challenges or issues we encounter.</p> <p>When it comes to effort and time, a problem is proportional to time and inversed proportional to effort. It means that the longer it takes to solve a problem, the bigger the problem is and also the less effort we invest to it, the bigger it appears. </p>"},{"location":"Think/How_to_be_valuable/How_to_be_valuable/#what-counts-as-a-good-problem","title":"What counts as a good problem?","text":""},{"location":"Think/How_to_be_valuable/How_to_be_valuable/#how-to-identify-hair-on-fire","title":"How to identify hair-on-fire?","text":""},{"location":"Think/How_to_be_valuable/How_to_be_valuable/#how-to-extinguish-the-fire","title":"How-to-extinguish the fire?","text":""},{"location":"Think/How_to_read/Flowchart/","title":"Flowchart","text":""},{"location":"Think/How_to_write/Flowchart/","title":"Flowchart","text":""},{"location":"%F0%9F%9B%A0/How-to/","title":"How to","text":""},{"location":"%F0%9F%9B%A0/How-to/#admonitions","title":"Admonitions","text":""},{"location":"%F0%9F%9B%A0/How-to/#admonitions-types","title":"Admonitions Types","text":"<p>Add title</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Collapsed <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Expanded <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"%F0%9F%9B%A0/How-to/#admonitions-inlines","title":"Admonitions Inlines","text":"<p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"%F0%9F%9B%A0/How-to/#admonitions-variations","title":"Admonitions Variations","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"%F0%9F%9B%A0/How-to/#annotations","title":"Annotations","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li>:man_raising_hand: I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol>"},{"location":"%F0%9F%9B%A0/How-to/#buttons","title":"Buttons","text":"<p>Subscribe to our newsletter</p> <p>Subscribe to our newsletter</p> <p>Send :fontawesome-solid-paper-plane:</p>"},{"location":"%F0%9F%9B%A0/How-to/#tabs","title":"Tabs","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"%F0%9F%9B%A0/How-to/#superfences","title":"Superfences","text":""},{"location":"%F0%9F%9B%A0/How-to/#lists-inside-tabs","title":"Lists inside Tabs","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"%F0%9F%9B%A0/How-to/#annotation-inside-tabs","title":"Annotation inside Tabs","text":"Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li>:man_raising_hand: I'm an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <ol> <li>:woman_raising_hand: I'm an annotation as well!</li> </ol>"},{"location":"%F0%9F%9B%A0/How-to/#tabs-inside-admonition","title":"Tabs inside Admonition","text":"<p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"%F0%9F%9B%A0/How-to/#annotations-inside-admonitions","title":"Annotations inside Admonitions","text":"<p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li>:man_raising_hand: I'm an annotation!</li> <li>:woman_raising_hand: I'm an annotation as well!</li> </ol>"},{"location":"%F0%9F%9B%A0/How-to/#footnote","title":"Footnote","text":"<p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p>"},{"location":"%F0%9F%9B%A0/How-to/#lists","title":"Lists","text":""},{"location":"%F0%9F%9B%A0/How-to/#ordered-lists","title":"Ordered Lists","text":"<ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol>"},{"location":"%F0%9F%9B%A0/How-to/#unordered-lists","title":"Unordered Lists","text":"<ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> </ul>"},{"location":"%F0%9F%9B%A0/How-to/#definition-lists","title":"Definition Lists","text":"<code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"%F0%9F%9B%A0/Todo/","title":"Todo","text":"<ul> <li> Figuring out how to write</li> <li> Figuring out how to read</li> </ul>"},{"location":"%F0%9F%9B%A0/Type%20of%20Data%20Visualizations/","title":"Type of Data Visualizations","text":"<p>Sankey diagram: Visualization of energy flows or material flows, showing inputs, outputs, and transformations.</p> <p>Bar chart: Graphical representation of data using rectangular bars, often used to compare values across categories.</p> <p>Line chart: Graph showing trends or patterns over time, connecting data points with lines.</p> <p>Pie chart: Circular chart divided into slices to represent proportions of a whole.</p> <p>Scatter plot: Plot of data points on a two-dimensional plane, showing the relationship between two variables.</p> <p>Histogram: Bar chart showing the distribution of numerical data, grouped into intervals. Box plot (Box-and-whisker plot): Graphical summary of a dataset's distribution, showing the median, quartiles, and outliers.</p> <p>Bubble chart: Scatter plot where data points are represented as bubbles, with the size of the bubble indicating a third variable.</p> <p>Radar chart (Spider chart): Chart used to display multivariate data in the form of a two-dimensional chart with three or more quantitative variables represented on axes.</p> <p>Waterfall chart: Visualization of financial data showing how an initial value is affected by intermediate positive or negative values.</p> <p>Treemap: Hierarchical chart representing data as nested rectangles, with the size of each rectangle proportional to a specific value.</p>"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/","title":"Type of Tools","text":""},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#mind-map","title":"Mind map","text":"Fiction Book Anatomy"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#concept-map","title":"Concept map","text":"Concept"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#process-map","title":"Process map","text":"The Six Sigma Process"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#strategy-map","title":"Strategy map","text":"Business"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#canvas","title":"Canvas","text":"Empathy Map"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#flowchart","title":"Flowchart","text":"Basic Flowchart Spiderweb Flowchart Choose Your Own Adventure Linear Representations Hybrid Flowcharts"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#swimlane-process","title":"Swimlane Process","text":"Sales Process Payroll Planning"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#decision-tree","title":"Decision tree","text":"Heart Attack Risk Job Application"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#decision-matrix","title":"Decision Matrix","text":"Weighted Not Weighted"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#cross-matrix","title":"Cross Matrix","text":"Prioritization Matrix Gap Analysis"},{"location":"%F0%9F%9B%A0/Type%20of%20Tools/#venn-diagram","title":"Venn Diagram","text":"Ikigai Purpose The Hedgehog Concept Framework Toro"}]}